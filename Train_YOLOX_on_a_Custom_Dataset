{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "accelerator": "GPU",
    "colab": {
      "name": "Copy of Train YOLOX on a Custom Dataset - YouTube.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "machine_shape": "hm",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/BalramKokkula/YOLO/blob/master/Train_YOLOX_on_a_Custom_Dataset\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Xru6s6p6A18s"
      },
      "source": [
        "# How to Train YOLOX on Custom Objects\n",
        "\n",
        "This tutorial is based on the [YOLOX repository](https://github.com/Megvii-BaseDetection/YOLOX) by [the Megvii Team](https://github.com/Megvii-BaseDetection). This notebook shows training on **your own custom objects**. Many thanks to the Megvii Team for putting this repository together - we hope that in combination with clean data management tools at Roboflow, this technologoy will become easily accessible to any developer wishing to use computer vision in their projects.\n",
        "\n",
        "### Accompanying Blog Post\n",
        "\n",
        "We recommend that you follow along in this notebook while reading the blog post on [How to Train YOLOX](blog.roboflow.com/how-to-train-yolox-on-a-custom-dataset/), concurrently.\n",
        "\n",
        "### Steps Covered in this Tutorial\n",
        "\n",
        "In this tutorial, we will walk through the steps required to train YOLOR on your custom objects. We use a [public blood cell detection dataset](https://public.roboflow.ai/object-detection/bccd), which is open source and free to use. You can also use this notebook on your own data. We will use Roboflow to preprocess our images.\n",
        "\n",
        "To train our detector we take the following steps:\n",
        "\n",
        "* Install YOLOX dependencies\n",
        "* Download and Prepare custom YOLOX object detection data\n",
        "* Download Pre-Trained Weights for YOLOX\n",
        "* Run YOLOX training\n",
        "* Evaluate YOLOX performance\n",
        "* Run YOLOX inference on test images\n",
        "* Export saved YOLOX weights for future inference\n",
        "\n",
        "### **About**\n",
        "\n",
        "[Roboflow](https://roboflow.com) enables teams to deploy custom computer vision models quickly and accurately. Convert data from to annotation format, assess dataset health, preprocess, augment, and more. It's free for your first 1000 source images.\n",
        "\n",
        "**Looking for a vision model available via API without hassle? Try Roboflow Train.**\n",
        "\n",
        "![Roboflow Wordmark](https://i.imgur.com/dcLNMhV.png)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VfVlxlYYBR6z"
      },
      "source": [
        "# Install YOLOX Dependencies"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "igwruhYxE_a7",
        "outputId": "f9dc1466-5512-409e-ac58-9a2ac377d9f2"
      },
      "source": [
        "!git clone https://github.com/roboflow-ai/YOLOX.git\n",
        "%cd YOLOX\n",
        "!pip3 install -U pip && pip3 install -r requirements.txt\n",
        "!pip3 install -v -e .  \n",
        "!pip uninstall -y torch torchvision torchaudio\n",
        "# May need to change in the future if Colab no longer uses CUDA 11.0\n",
        "!pip install torch==1.8.0+cu111 torchvision==0.9.0+cu111 torchaudio==0.8.0 -f https://download.pytorch.org/whl/torch_stable.html"
      ],
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Cloning into 'YOLOX'...\n",
            "remote: Enumerating objects: 786, done.\u001b[K\n",
            "remote: Total 786 (delta 0), reused 0 (delta 0), pack-reused 786\u001b[K\n",
            "Receiving objects: 100% (786/786), 5.77 MiB | 21.65 MiB/s, done.\n",
            "Resolving deltas: 100% (419/419), done.\n",
            "/content/YOLOX\n",
            "Requirement already satisfied: pip in /usr/local/lib/python3.7/dist-packages (21.1.3)\n",
            "Collecting pip\n",
            "  Downloading pip-22.0.4-py3-none-any.whl (2.1 MB)\n",
            "\u001b[K     |████████████████████████████████| 2.1 MB 7.7 MB/s \n",
            "\u001b[?25hInstalling collected packages: pip\n",
            "  Attempting uninstall: pip\n",
            "    Found existing installation: pip 21.1.3\n",
            "    Uninstalling pip-21.1.3:\n",
            "      Successfully uninstalled pip-21.1.3\n",
            "Successfully installed pip-22.0.4\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (from -r requirements.txt (line 2)) (1.21.5)\n",
            "Requirement already satisfied: torch>=1.7 in /usr/local/lib/python3.7/dist-packages (from -r requirements.txt (line 3)) (1.10.0+cu111)\n",
            "Requirement already satisfied: opencv_python in /usr/local/lib/python3.7/dist-packages (from -r requirements.txt (line 4)) (4.1.2.30)\n",
            "Collecting loguru\n",
            "  Downloading loguru-0.6.0-py3-none-any.whl (58 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m58.3/58.3 KB\u001b[0m \u001b[31m5.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: scikit-image in /usr/local/lib/python3.7/dist-packages (from -r requirements.txt (line 6)) (0.18.3)\n",
            "Requirement already satisfied: tqdm in /usr/local/lib/python3.7/dist-packages (from -r requirements.txt (line 7)) (4.63.0)\n",
            "Requirement already satisfied: torchvision in /usr/local/lib/python3.7/dist-packages (from -r requirements.txt (line 8)) (0.11.1+cu111)\n",
            "Requirement already satisfied: Pillow in /usr/local/lib/python3.7/dist-packages (from -r requirements.txt (line 9)) (7.1.2)\n",
            "Collecting thop\n",
            "  Downloading thop-0.0.31.post2005241907-py3-none-any.whl (8.7 kB)\n",
            "Collecting ninja\n",
            "  Downloading ninja-1.10.2.3-py2.py3-none-manylinux_2_5_x86_64.manylinux1_x86_64.whl (108 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m108.1/108.1 KB\u001b[0m \u001b[31m10.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: tabulate in /usr/local/lib/python3.7/dist-packages (from -r requirements.txt (line 12)) (0.8.9)\n",
            "Requirement already satisfied: tensorboard in /usr/local/lib/python3.7/dist-packages (from -r requirements.txt (line 13)) (2.8.0)\n",
            "Collecting onnx==1.8.1\n",
            "  Downloading onnx-1.8.1-cp37-cp37m-manylinux2010_x86_64.whl (14.5 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m14.5/14.5 MB\u001b[0m \u001b[31m77.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hCollecting onnxruntime==1.8.0\n",
            "  Downloading onnxruntime-1.8.0-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (4.5 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m4.5/4.5 MB\u001b[0m \u001b[31m98.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hCollecting onnx-simplifier==0.3.5\n",
            "  Downloading onnx-simplifier-0.3.5.tar.gz (13 kB)\n",
            "  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "Requirement already satisfied: protobuf in /usr/local/lib/python3.7/dist-packages (from onnx==1.8.1->-r requirements.txt (line 16)) (3.17.3)\n",
            "Requirement already satisfied: typing-extensions>=3.6.2.1 in /usr/local/lib/python3.7/dist-packages (from onnx==1.8.1->-r requirements.txt (line 16)) (3.10.0.2)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.7/dist-packages (from onnx==1.8.1->-r requirements.txt (line 16)) (1.15.0)\n",
            "Requirement already satisfied: flatbuffers in /usr/local/lib/python3.7/dist-packages (from onnxruntime==1.8.0->-r requirements.txt (line 17)) (2.0)\n",
            "Collecting onnxoptimizer>=0.2.5\n",
            "  Downloading onnxoptimizer-0.2.6-cp37-cp37m-manylinux2014_x86_64.whl (466 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m466.1/466.1 KB\u001b[0m \u001b[31m45.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: tifffile>=2019.7.26 in /usr/local/lib/python3.7/dist-packages (from scikit-image->-r requirements.txt (line 6)) (2021.11.2)\n",
            "Requirement already satisfied: PyWavelets>=1.1.1 in /usr/local/lib/python3.7/dist-packages (from scikit-image->-r requirements.txt (line 6)) (1.2.0)\n",
            "Requirement already satisfied: matplotlib!=3.0.0,>=2.0.0 in /usr/local/lib/python3.7/dist-packages (from scikit-image->-r requirements.txt (line 6)) (3.2.2)\n",
            "Requirement already satisfied: networkx>=2.0 in /usr/local/lib/python3.7/dist-packages (from scikit-image->-r requirements.txt (line 6)) (2.6.3)\n",
            "Requirement already satisfied: scipy>=1.0.1 in /usr/local/lib/python3.7/dist-packages (from scikit-image->-r requirements.txt (line 6)) (1.4.1)\n",
            "Requirement already satisfied: imageio>=2.3.0 in /usr/local/lib/python3.7/dist-packages (from scikit-image->-r requirements.txt (line 6)) (2.4.1)\n",
            "Requirement already satisfied: grpcio>=1.24.3 in /usr/local/lib/python3.7/dist-packages (from tensorboard->-r requirements.txt (line 13)) (1.44.0)\n",
            "Requirement already satisfied: wheel>=0.26 in /usr/local/lib/python3.7/dist-packages (from tensorboard->-r requirements.txt (line 13)) (0.37.1)\n",
            "Requirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.7/dist-packages (from tensorboard->-r requirements.txt (line 13)) (3.3.6)\n",
            "Requirement already satisfied: google-auth-oauthlib<0.5,>=0.4.1 in /usr/local/lib/python3.7/dist-packages (from tensorboard->-r requirements.txt (line 13)) (0.4.6)\n",
            "Requirement already satisfied: absl-py>=0.4 in /usr/local/lib/python3.7/dist-packages (from tensorboard->-r requirements.txt (line 13)) (1.0.0)\n",
            "Requirement already satisfied: google-auth<3,>=1.6.3 in /usr/local/lib/python3.7/dist-packages (from tensorboard->-r requirements.txt (line 13)) (1.35.0)\n",
            "Requirement already satisfied: tensorboard-plugin-wit>=1.6.0 in /usr/local/lib/python3.7/dist-packages (from tensorboard->-r requirements.txt (line 13)) (1.8.1)\n",
            "Requirement already satisfied: setuptools>=41.0.0 in /usr/local/lib/python3.7/dist-packages (from tensorboard->-r requirements.txt (line 13)) (57.4.0)\n",
            "Requirement already satisfied: werkzeug>=0.11.15 in /usr/local/lib/python3.7/dist-packages (from tensorboard->-r requirements.txt (line 13)) (1.0.1)\n",
            "Requirement already satisfied: requests<3,>=2.21.0 in /usr/local/lib/python3.7/dist-packages (from tensorboard->-r requirements.txt (line 13)) (2.23.0)\n",
            "Requirement already satisfied: tensorboard-data-server<0.7.0,>=0.6.0 in /usr/local/lib/python3.7/dist-packages (from tensorboard->-r requirements.txt (line 13)) (0.6.1)\n",
            "Requirement already satisfied: rsa<5,>=3.1.4 in /usr/local/lib/python3.7/dist-packages (from google-auth<3,>=1.6.3->tensorboard->-r requirements.txt (line 13)) (4.8)\n",
            "Requirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.7/dist-packages (from google-auth<3,>=1.6.3->tensorboard->-r requirements.txt (line 13)) (0.2.8)\n",
            "Requirement already satisfied: cachetools<5.0,>=2.0.0 in /usr/local/lib/python3.7/dist-packages (from google-auth<3,>=1.6.3->tensorboard->-r requirements.txt (line 13)) (4.2.4)\n",
            "Requirement already satisfied: requests-oauthlib>=0.7.0 in /usr/local/lib/python3.7/dist-packages (from google-auth-oauthlib<0.5,>=0.4.1->tensorboard->-r requirements.txt (line 13)) (1.3.1)\n",
            "Requirement already satisfied: importlib-metadata>=4.4 in /usr/local/lib/python3.7/dist-packages (from markdown>=2.6.8->tensorboard->-r requirements.txt (line 13)) (4.11.2)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib!=3.0.0,>=2.0.0->scikit-image->-r requirements.txt (line 6)) (1.3.2)\n",
            "Requirement already satisfied: python-dateutil>=2.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib!=3.0.0,>=2.0.0->scikit-image->-r requirements.txt (line 6)) (2.8.2)\n",
            "Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib!=3.0.0,>=2.0.0->scikit-image->-r requirements.txt (line 6)) (3.0.7)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.7/dist-packages (from matplotlib!=3.0.0,>=2.0.0->scikit-image->-r requirements.txt (line 6)) (0.11.0)\n",
            "Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests<3,>=2.21.0->tensorboard->-r requirements.txt (line 13)) (2.10)\n",
            "Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests<3,>=2.21.0->tensorboard->-r requirements.txt (line 13)) (1.24.3)\n",
            "Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests<3,>=2.21.0->tensorboard->-r requirements.txt (line 13)) (3.0.4)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests<3,>=2.21.0->tensorboard->-r requirements.txt (line 13)) (2021.10.8)\n",
            "Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata>=4.4->markdown>=2.6.8->tensorboard->-r requirements.txt (line 13)) (3.7.0)\n",
            "Requirement already satisfied: pyasn1<0.5.0,>=0.4.6 in /usr/local/lib/python3.7/dist-packages (from pyasn1-modules>=0.2.1->google-auth<3,>=1.6.3->tensorboard->-r requirements.txt (line 13)) (0.4.8)\n",
            "Requirement already satisfied: oauthlib>=3.0.0 in /usr/local/lib/python3.7/dist-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib<0.5,>=0.4.1->tensorboard->-r requirements.txt (line 13)) (3.2.0)\n",
            "Building wheels for collected packages: onnx-simplifier\n",
            "  Building wheel for onnx-simplifier (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for onnx-simplifier: filename=onnx_simplifier-0.3.5-py3-none-any.whl size=12878 sha256=e3f699aee1ca9f6314b79f2ac185353b70d46f683c2a2f8f6e83bcf7a39d9a27\n",
            "  Stored in directory: /root/.cache/pip/wheels/8a/b4/1b/6acdd4eb854b215cd4aa1c18ca79399f9d34728edaff47ecce\n",
            "Successfully built onnx-simplifier\n",
            "Installing collected packages: ninja, loguru, thop, onnxruntime, onnx, onnxoptimizer, onnx-simplifier\n",
            "Successfully installed loguru-0.6.0 ninja-1.10.2.3 onnx-1.8.1 onnx-simplifier-0.3.5 onnxoptimizer-0.2.6 onnxruntime-1.8.0 thop-0.0.31.post2005241907\n",
            "\u001b[33mWARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv\u001b[0m\u001b[33m\n",
            "\u001b[0mUsing pip 22.0.4 from /usr/local/lib/python3.7/dist-packages/pip (python 3.7)\n",
            "Obtaining file:///content/YOLOX\n",
            "  Running command python setup.py egg_info\n",
            "  running egg_info\n",
            "  creating /tmp/pip-pip-egg-info-kzppijn2/yolox.egg-info\n",
            "  writing /tmp/pip-pip-egg-info-kzppijn2/yolox.egg-info/PKG-INFO\n",
            "  writing dependency_links to /tmp/pip-pip-egg-info-kzppijn2/yolox.egg-info/dependency_links.txt\n",
            "  writing top-level names to /tmp/pip-pip-egg-info-kzppijn2/yolox.egg-info/top_level.txt\n",
            "  writing manifest file '/tmp/pip-pip-egg-info-kzppijn2/yolox.egg-info/SOURCES.txt'\n",
            "  adding license file 'LICENSE'\n",
            "  writing manifest file '/tmp/pip-pip-egg-info-kzppijn2/yolox.egg-info/SOURCES.txt'\n",
            "  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "Installing collected packages: yolox\n",
            "  Running setup.py develop for yolox\n",
            "    Running command python setup.py develop\n",
            "    running develop\n",
            "    running egg_info\n",
            "    creating yolox.egg-info\n",
            "    writing yolox.egg-info/PKG-INFO\n",
            "    writing dependency_links to yolox.egg-info/dependency_links.txt\n",
            "    writing top-level names to yolox.egg-info/top_level.txt\n",
            "    writing manifest file 'yolox.egg-info/SOURCES.txt'\n",
            "    adding license file 'LICENSE'\n",
            "    writing manifest file 'yolox.egg-info/SOURCES.txt'\n",
            "    running build_ext\n",
            "    building 'yolox._C' extension\n",
            "    creating /content/YOLOX/build\n",
            "    creating /content/YOLOX/build/temp.linux-x86_64-3.7\n",
            "    creating /content/YOLOX/build/temp.linux-x86_64-3.7/content\n",
            "    creating /content/YOLOX/build/temp.linux-x86_64-3.7/content/YOLOX\n",
            "    creating /content/YOLOX/build/temp.linux-x86_64-3.7/content/YOLOX/yolox\n",
            "    creating /content/YOLOX/build/temp.linux-x86_64-3.7/content/YOLOX/yolox/layers\n",
            "    creating /content/YOLOX/build/temp.linux-x86_64-3.7/content/YOLOX/yolox/layers/csrc\n",
            "    creating /content/YOLOX/build/temp.linux-x86_64-3.7/content/YOLOX/yolox/layers/csrc/cocoeval\n",
            "    Emitting ninja build file /content/YOLOX/build/temp.linux-x86_64-3.7/build.ninja...\n",
            "    Compiling objects...\n",
            "    Allowing ninja to set a default number of workers... (overridable by setting the environment variable MAX_JOBS=N)\n",
            "    [1/2] c++ -MMD -MF /content/YOLOX/build/temp.linux-x86_64-3.7/content/YOLOX/yolox/layers/csrc/cocoeval/cocoeval.o.d -pthread -Wno-unused-result -Wsign-compare -DNDEBUG -g -fwrapv -O2 -Wall -g -fdebug-prefix-map=/build/python3.7-pX47U3/python3.7-3.7.12=. -fstack-protector-strong -Wformat -Werror=format-security -g -fdebug-prefix-map=/build/python3.7-pX47U3/python3.7-3.7.12=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fPIC -I/content/YOLOX/yolox/layers/csrc -I/usr/local/lib/python3.7/dist-packages/torch/include -I/usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include -I/usr/local/lib/python3.7/dist-packages/torch/include/TH -I/usr/local/lib/python3.7/dist-packages/torch/include/THC -I/usr/include/python3.7m -c -c /content/YOLOX/yolox/layers/csrc/cocoeval/cocoeval.cpp -o /content/YOLOX/build/temp.linux-x86_64-3.7/content/YOLOX/yolox/layers/csrc/cocoeval/cocoeval.o -O3 -DTORCH_API_INCLUDE_EXTENSION_H '-DPYBIND11_COMPILER_TYPE=\"_gcc\"' '-DPYBIND11_STDLIB=\"_libstdcpp\"' '-DPYBIND11_BUILD_ABI=\"_cxxabi1011\"' -DTORCH_EXTENSION_NAME=_C -D_GLIBCXX_USE_CXX11_ABI=0 -std=c++14\n",
            "    [2/2] c++ -MMD -MF /content/YOLOX/build/temp.linux-x86_64-3.7/content/YOLOX/yolox/layers/csrc/vision.o.d -pthread -Wno-unused-result -Wsign-compare -DNDEBUG -g -fwrapv -O2 -Wall -g -fdebug-prefix-map=/build/python3.7-pX47U3/python3.7-3.7.12=. -fstack-protector-strong -Wformat -Werror=format-security -g -fdebug-prefix-map=/build/python3.7-pX47U3/python3.7-3.7.12=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fPIC -I/content/YOLOX/yolox/layers/csrc -I/usr/local/lib/python3.7/dist-packages/torch/include -I/usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include -I/usr/local/lib/python3.7/dist-packages/torch/include/TH -I/usr/local/lib/python3.7/dist-packages/torch/include/THC -I/usr/include/python3.7m -c -c /content/YOLOX/yolox/layers/csrc/vision.cpp -o /content/YOLOX/build/temp.linux-x86_64-3.7/content/YOLOX/yolox/layers/csrc/vision.o -O3 -DTORCH_API_INCLUDE_EXTENSION_H '-DPYBIND11_COMPILER_TYPE=\"_gcc\"' '-DPYBIND11_STDLIB=\"_libstdcpp\"' '-DPYBIND11_BUILD_ABI=\"_cxxabi1011\"' -DTORCH_EXTENSION_NAME=_C -D_GLIBCXX_USE_CXX11_ABI=0 -std=c++14\n",
            "    creating build/lib.linux-x86_64-3.7\n",
            "    creating build/lib.linux-x86_64-3.7/yolox\n",
            "    x86_64-linux-gnu-g++ -pthread -shared -Wl,-O1 -Wl,-Bsymbolic-functions -Wl,-Bsymbolic-functions -Wl,-z,relro -Wl,-Bsymbolic-functions -Wl,-z,relro -g -fdebug-prefix-map=/build/python3.7-pX47U3/python3.7-3.7.12=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 /content/YOLOX/build/temp.linux-x86_64-3.7/content/YOLOX/yolox/layers/csrc/vision.o /content/YOLOX/build/temp.linux-x86_64-3.7/content/YOLOX/yolox/layers/csrc/cocoeval/cocoeval.o -L/usr/local/lib/python3.7/dist-packages/torch/lib -lc10 -ltorch -ltorch_cpu -ltorch_python -o build/lib.linux-x86_64-3.7/yolox/_C.cpython-37m-x86_64-linux-gnu.so\n",
            "    copying build/lib.linux-x86_64-3.7/yolox/_C.cpython-37m-x86_64-linux-gnu.so -> yolox\n",
            "    Creating /usr/local/lib/python3.7/dist-packages/yolox.egg-link (link to .)\n",
            "    Adding yolox 0.1.0 to easy-install.pth file\n",
            "\n",
            "    Installed /content/YOLOX\n",
            "Successfully installed yolox-0.1.0\n",
            "\u001b[33mWARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv\u001b[0m\u001b[33m\n",
            "\u001b[0mFound existing installation: torch 1.10.0+cu111\n",
            "Uninstalling torch-1.10.0+cu111:\n",
            "  Successfully uninstalled torch-1.10.0+cu111\n",
            "Found existing installation: torchvision 0.11.1+cu111\n",
            "Uninstalling torchvision-0.11.1+cu111:\n",
            "  Successfully uninstalled torchvision-0.11.1+cu111\n",
            "Found existing installation: torchaudio 0.10.0+cu111\n",
            "Uninstalling torchaudio-0.10.0+cu111:\n",
            "  Successfully uninstalled torchaudio-0.10.0+cu111\n",
            "\u001b[33mWARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv\u001b[0m\u001b[33m\n",
            "\u001b[0mLooking in links: https://download.pytorch.org/whl/torch_stable.html\n",
            "Collecting torch==1.8.0+cu111\n",
            "  Downloading https://download.pytorch.org/whl/cu111/torch-1.8.0%2Bcu111-cp37-cp37m-linux_x86_64.whl (1982.2 MB)\n",
            "\u001b[2K     \u001b[91m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[91m╸\u001b[0m \u001b[32m2.0/2.0 GB\u001b[0m \u001b[31m115.5 MB/s\u001b[0m eta \u001b[36m0:00:01\u001b[0mtcmalloc: large alloc 1982251008 bytes == 0x560724a12000 @  0x7f2a6c5bf1e7 0x560722cca5d7 0x560722c943bc 0x560722d7518a 0x560722c971cd 0x560722d89b3d 0x560722d0b458 0x560722d0602f 0x560722c98aba 0x560722d07108 0x560722d0602f 0x560722c98aba 0x560722d07108 0x560722d0602f 0x560722c98aba 0x560722d07108 0x560722d0602f 0x560722c98aba 0x560722d07108 0x560722d0602f 0x560722c98aba 0x560722d07108 0x560722c989da 0x560722d07108 0x560722d0602f 0x560722c98aba 0x560722d07cd4 0x560722d0602f 0x560722c98aba 0x560722d07108 0x560722d0602f\n",
            "\u001b[2K     \u001b[91m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[91m╸\u001b[0m \u001b[32m2.0/2.0 GB\u001b[0m \u001b[31m110.3 MB/s\u001b[0m eta \u001b[36m0:00:01\u001b[0mtcmalloc: large alloc 2477817856 bytes == 0x56079ac7e000 @  0x7f2a6c5c0615 0x560722c943bc 0x560722d7518a 0x560722c971cd 0x560722d89b3d 0x560722d0b458 0x560722d0602f 0x560722c98aba 0x560722d07108 0x560722d0602f 0x560722c98aba 0x560722d07108 0x560722d0602f 0x560722c98aba 0x560722d07108 0x560722d0602f 0x560722c98aba 0x560722d07108 0x560722d0602f 0x560722c98aba 0x560722d07108 0x560722c989da 0x560722d07108 0x560722d0602f 0x560722c98aba 0x560722d07cd4 0x560722d0602f 0x560722c98aba 0x560722d07108 0x560722d0602f 0x560722c99151\n",
            "tcmalloc: large alloc 1982251008 bytes == 0x560724a12000 @  0x7f2a6c5bf1e7 0x560722cc9518 0x560722c93d17 0x560722c95d00 0x560722c971cd 0x560722d89b3d 0x560722d0b458 0x560722d0602f 0x560722c98aba 0x560722d07108 0x560722d0602f 0x560722c99151 0x560722c99571 0x560722e09442 0x560722c97b32 0x560722d0ba6d 0x560722c989da 0x560722d0b2c0 0x560722d0602f 0x560722c98aba 0x560722d0b2c0 0x560722d0602f 0x560722c98aba 0x560722d07cd4 0x560722d8a986 0x560722d07350 0x560722d8a986 0x560722d07350 0x560722d8a986 0x560722d07350 0x560722c98f19\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.0/2.0 GB\u001b[0m \u001b[31m868.2 kB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hCollecting torchvision==0.9.0+cu111\n",
            "  Downloading https://download.pytorch.org/whl/cu111/torchvision-0.9.0%2Bcu111-cp37-cp37m-linux_x86_64.whl (17.6 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m17.6/17.6 MB\u001b[0m \u001b[31m28.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hCollecting torchaudio==0.8.0\n",
            "  Downloading torchaudio-0.8.0-cp37-cp37m-manylinux1_x86_64.whl (1.9 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.9/1.9 MB\u001b[0m \u001b[31m23.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: typing-extensions in /usr/local/lib/python3.7/dist-packages (from torch==1.8.0+cu111) (3.10.0.2)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (from torch==1.8.0+cu111) (1.21.5)\n",
            "Requirement already satisfied: pillow>=4.1.1 in /usr/local/lib/python3.7/dist-packages (from torchvision==0.9.0+cu111) (7.1.2)\n",
            "Installing collected packages: torch, torchvision, torchaudio\n",
            "\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n",
            "torchtext 0.11.0 requires torch==1.10.0, but you have torch 1.8.0+cu111 which is incompatible.\u001b[0m\u001b[31m\n",
            "\u001b[0mSuccessfully installed torch-1.8.0+cu111 torchaudio-0.8.0 torchvision-0.9.0+cu111\n",
            "\u001b[33mWARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv\u001b[0m\u001b[33m\n",
            "\u001b[0m"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "llsu3xhVBZYC"
      },
      "source": [
        "## Install Nvidia Apex"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ksHd57LFFMzK",
        "outputId": "2b6d1823-2b1a-4d96-df1c-90dc2bdefb8e"
      },
      "source": [
        "%cd /content/\n",
        "!git clone https://github.com/NVIDIA/apex\n",
        "%cd apex\n",
        "!pip install -v --disable-pip-version-check --no-cache-dir --global-option=\"--cpp_ext\" --global-option=\"--cuda_ext\" ./"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "/content\n",
            "Cloning into 'apex'...\n",
            "remote: Enumerating objects: 9097, done.\u001b[K\n",
            "remote: Counting objects: 100% (168/168), done.\u001b[K\n",
            "remote: Compressing objects: 100% (139/139), done.\u001b[K\n",
            "remote: Total 9097 (delta 89), reused 48 (delta 28), pack-reused 8929\u001b[K\n",
            "Receiving objects: 100% (9097/9097), 14.60 MiB | 14.13 MiB/s, done.\n",
            "Resolving deltas: 100% (6202/6202), done.\n",
            "/content/apex\n",
            "\u001b[33mWARNING: Disabling all use of wheels due to the use of --build-option / --global-option / --install-option.\u001b[0m\u001b[33m\n",
            "\u001b[0mUsing pip 22.0.4 from /usr/local/lib/python3.7/dist-packages/pip (python 3.7)\n",
            "Processing /content/apex\n",
            "  Running command python setup.py egg_info\n",
            "\n",
            "\n",
            "  torch.__version__  = 1.8.0+cu111\n",
            "\n",
            "\n",
            "  running egg_info\n",
            "  creating /tmp/pip-pip-egg-info-4m2zz6yg/apex.egg-info\n",
            "  writing /tmp/pip-pip-egg-info-4m2zz6yg/apex.egg-info/PKG-INFO\n",
            "  writing dependency_links to /tmp/pip-pip-egg-info-4m2zz6yg/apex.egg-info/dependency_links.txt\n",
            "  writing top-level names to /tmp/pip-pip-egg-info-4m2zz6yg/apex.egg-info/top_level.txt\n",
            "  writing manifest file '/tmp/pip-pip-egg-info-4m2zz6yg/apex.egg-info/SOURCES.txt'\n",
            "  adding license file 'LICENSE'\n",
            "  writing manifest file '/tmp/pip-pip-egg-info-4m2zz6yg/apex.egg-info/SOURCES.txt'\n",
            "  /content/apex/setup.py:109: UserWarning: Option --pyprof not specified. Not installing PyProf dependencies!\n",
            "    warnings.warn(\"Option --pyprof not specified. Not installing PyProf dependencies!\")\n",
            "  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "Skipping wheel build for apex, due to binaries being disabled for it.\n",
            "Installing collected packages: apex\n",
            "  Running command Running setup.py install for apex\n",
            "\n",
            "\n",
            "  torch.__version__  = 1.8.0+cu111\n",
            "\n",
            "\n",
            "  /content/apex/setup.py:109: UserWarning: Option --pyprof not specified. Not installing PyProf dependencies!\n",
            "    warnings.warn(\"Option --pyprof not specified. Not installing PyProf dependencies!\")\n",
            "\n",
            "  Compiling cuda extensions with\n",
            "  nvcc: NVIDIA (R) Cuda compiler driver\n",
            "  Copyright (c) 2005-2020 NVIDIA Corporation\n",
            "  Built on Mon_Oct_12_20:09:46_PDT_2020\n",
            "  Cuda compilation tools, release 11.1, V11.1.105\n",
            "  Build cuda_11.1.TC455_06.29190527_0\n",
            "  from /usr/local/cuda/bin\n",
            "\n",
            "  running install\n",
            "  running build\n",
            "  running build_py\n",
            "  creating build\n",
            "  creating build/lib.linux-x86_64-3.7\n",
            "  creating build/lib.linux-x86_64-3.7/apex\n",
            "  copying apex/__init__.py -> build/lib.linux-x86_64-3.7/apex\n",
            "  copying apex/_autocast_utils.py -> build/lib.linux-x86_64-3.7/apex\n",
            "  creating build/lib.linux-x86_64-3.7/apex/pyprof\n",
            "  copying apex/pyprof/__init__.py -> build/lib.linux-x86_64-3.7/apex/pyprof\n",
            "  creating build/lib.linux-x86_64-3.7/apex/optimizers\n",
            "  copying apex/optimizers/fused_adam.py -> build/lib.linux-x86_64-3.7/apex/optimizers\n",
            "  copying apex/optimizers/fused_adagrad.py -> build/lib.linux-x86_64-3.7/apex/optimizers\n",
            "  copying apex/optimizers/__init__.py -> build/lib.linux-x86_64-3.7/apex/optimizers\n",
            "  copying apex/optimizers/fused_sgd.py -> build/lib.linux-x86_64-3.7/apex/optimizers\n",
            "  copying apex/optimizers/fused_lamb.py -> build/lib.linux-x86_64-3.7/apex/optimizers\n",
            "  copying apex/optimizers/fused_novograd.py -> build/lib.linux-x86_64-3.7/apex/optimizers\n",
            "  copying apex/optimizers/fused_mixed_precision_lamb.py -> build/lib.linux-x86_64-3.7/apex/optimizers\n",
            "  creating build/lib.linux-x86_64-3.7/apex/parallel\n",
            "  copying apex/parallel/LARC.py -> build/lib.linux-x86_64-3.7/apex/parallel\n",
            "  copying apex/parallel/__init__.py -> build/lib.linux-x86_64-3.7/apex/parallel\n",
            "  copying apex/parallel/distributed.py -> build/lib.linux-x86_64-3.7/apex/parallel\n",
            "  copying apex/parallel/sync_batchnorm.py -> build/lib.linux-x86_64-3.7/apex/parallel\n",
            "  copying apex/parallel/optimized_sync_batchnorm.py -> build/lib.linux-x86_64-3.7/apex/parallel\n",
            "  copying apex/parallel/optimized_sync_batchnorm_kernel.py -> build/lib.linux-x86_64-3.7/apex/parallel\n",
            "  copying apex/parallel/multiproc.py -> build/lib.linux-x86_64-3.7/apex/parallel\n",
            "  copying apex/parallel/sync_batchnorm_kernel.py -> build/lib.linux-x86_64-3.7/apex/parallel\n",
            "  creating build/lib.linux-x86_64-3.7/apex/mlp\n",
            "  copying apex/mlp/__init__.py -> build/lib.linux-x86_64-3.7/apex/mlp\n",
            "  copying apex/mlp/mlp.py -> build/lib.linux-x86_64-3.7/apex/mlp\n",
            "  creating build/lib.linux-x86_64-3.7/apex/transformer\n",
            "  copying apex/transformer/enums.py -> build/lib.linux-x86_64-3.7/apex/transformer\n",
            "  copying apex/transformer/microbatches.py -> build/lib.linux-x86_64-3.7/apex/transformer\n",
            "  copying apex/transformer/__init__.py -> build/lib.linux-x86_64-3.7/apex/transformer\n",
            "  copying apex/transformer/log_util.py -> build/lib.linux-x86_64-3.7/apex/transformer\n",
            "  copying apex/transformer/utils.py -> build/lib.linux-x86_64-3.7/apex/transformer\n",
            "  copying apex/transformer/parallel_state.py -> build/lib.linux-x86_64-3.7/apex/transformer\n",
            "  creating build/lib.linux-x86_64-3.7/apex/normalization\n",
            "  copying apex/normalization/__init__.py -> build/lib.linux-x86_64-3.7/apex/normalization\n",
            "  copying apex/normalization/fused_layer_norm.py -> build/lib.linux-x86_64-3.7/apex/normalization\n",
            "  creating build/lib.linux-x86_64-3.7/apex/RNN\n",
            "  copying apex/RNN/__init__.py -> build/lib.linux-x86_64-3.7/apex/RNN\n",
            "  copying apex/RNN/cells.py -> build/lib.linux-x86_64-3.7/apex/RNN\n",
            "  copying apex/RNN/RNNBackend.py -> build/lib.linux-x86_64-3.7/apex/RNN\n",
            "  copying apex/RNN/models.py -> build/lib.linux-x86_64-3.7/apex/RNN\n",
            "  creating build/lib.linux-x86_64-3.7/apex/fused_dense\n",
            "  copying apex/fused_dense/__init__.py -> build/lib.linux-x86_64-3.7/apex/fused_dense\n",
            "  copying apex/fused_dense/fused_dense.py -> build/lib.linux-x86_64-3.7/apex/fused_dense\n",
            "  creating build/lib.linux-x86_64-3.7/apex/amp\n",
            "  copying apex/amp/wrap.py -> build/lib.linux-x86_64-3.7/apex/amp\n",
            "  copying apex/amp/scaler.py -> build/lib.linux-x86_64-3.7/apex/amp\n",
            "  copying apex/amp/__init__.py -> build/lib.linux-x86_64-3.7/apex/amp\n",
            "  copying apex/amp/amp.py -> build/lib.linux-x86_64-3.7/apex/amp\n",
            "  copying apex/amp/compat.py -> build/lib.linux-x86_64-3.7/apex/amp\n",
            "  copying apex/amp/frontend.py -> build/lib.linux-x86_64-3.7/apex/amp\n",
            "  copying apex/amp/utils.py -> build/lib.linux-x86_64-3.7/apex/amp\n",
            "  copying apex/amp/handle.py -> build/lib.linux-x86_64-3.7/apex/amp\n",
            "  copying apex/amp/__version__.py -> build/lib.linux-x86_64-3.7/apex/amp\n",
            "  copying apex/amp/_amp_state.py -> build/lib.linux-x86_64-3.7/apex/amp\n",
            "  copying apex/amp/opt.py -> build/lib.linux-x86_64-3.7/apex/amp\n",
            "  copying apex/amp/_initialize.py -> build/lib.linux-x86_64-3.7/apex/amp\n",
            "  copying apex/amp/rnn_compat.py -> build/lib.linux-x86_64-3.7/apex/amp\n",
            "  copying apex/amp/_process_optimizer.py -> build/lib.linux-x86_64-3.7/apex/amp\n",
            "  creating build/lib.linux-x86_64-3.7/apex/contrib\n",
            "  copying apex/contrib/__init__.py -> build/lib.linux-x86_64-3.7/apex/contrib\n",
            "  creating build/lib.linux-x86_64-3.7/apex/multi_tensor_apply\n",
            "  copying apex/multi_tensor_apply/__init__.py -> build/lib.linux-x86_64-3.7/apex/multi_tensor_apply\n",
            "  copying apex/multi_tensor_apply/multi_tensor_apply.py -> build/lib.linux-x86_64-3.7/apex/multi_tensor_apply\n",
            "  creating build/lib.linux-x86_64-3.7/apex/reparameterization\n",
            "  copying apex/reparameterization/__init__.py -> build/lib.linux-x86_64-3.7/apex/reparameterization\n",
            "  copying apex/reparameterization/weight_norm.py -> build/lib.linux-x86_64-3.7/apex/reparameterization\n",
            "  copying apex/reparameterization/reparameterization.py -> build/lib.linux-x86_64-3.7/apex/reparameterization\n",
            "  creating build/lib.linux-x86_64-3.7/apex/fp16_utils\n",
            "  copying apex/fp16_utils/__init__.py -> build/lib.linux-x86_64-3.7/apex/fp16_utils\n",
            "  copying apex/fp16_utils/fp16util.py -> build/lib.linux-x86_64-3.7/apex/fp16_utils\n",
            "  copying apex/fp16_utils/fp16_optimizer.py -> build/lib.linux-x86_64-3.7/apex/fp16_utils\n",
            "  copying apex/fp16_utils/loss_scaler.py -> build/lib.linux-x86_64-3.7/apex/fp16_utils\n",
            "  creating build/lib.linux-x86_64-3.7/apex/pyprof/prof\n",
            "  copying apex/pyprof/prof/pointwise.py -> build/lib.linux-x86_64-3.7/apex/pyprof/prof\n",
            "  copying apex/pyprof/prof/linear.py -> build/lib.linux-x86_64-3.7/apex/pyprof/prof\n",
            "  copying apex/pyprof/prof/dropout.py -> build/lib.linux-x86_64-3.7/apex/pyprof/prof\n",
            "  copying apex/pyprof/prof/blas.py -> build/lib.linux-x86_64-3.7/apex/pyprof/prof\n",
            "  copying apex/pyprof/prof/convert.py -> build/lib.linux-x86_64-3.7/apex/pyprof/prof\n",
            "  copying apex/pyprof/prof/normalization.py -> build/lib.linux-x86_64-3.7/apex/pyprof/prof\n",
            "  copying apex/pyprof/prof/__init__.py -> build/lib.linux-x86_64-3.7/apex/pyprof/prof\n",
            "  copying apex/pyprof/prof/usage.py -> build/lib.linux-x86_64-3.7/apex/pyprof/prof\n",
            "  copying apex/pyprof/prof/prof.py -> build/lib.linux-x86_64-3.7/apex/pyprof/prof\n",
            "  copying apex/pyprof/prof/data.py -> build/lib.linux-x86_64-3.7/apex/pyprof/prof\n",
            "  copying apex/pyprof/prof/recurrentCell.py -> build/lib.linux-x86_64-3.7/apex/pyprof/prof\n",
            "  copying apex/pyprof/prof/misc.py -> build/lib.linux-x86_64-3.7/apex/pyprof/prof\n",
            "  copying apex/pyprof/prof/__main__.py -> build/lib.linux-x86_64-3.7/apex/pyprof/prof\n",
            "  copying apex/pyprof/prof/activation.py -> build/lib.linux-x86_64-3.7/apex/pyprof/prof\n",
            "  copying apex/pyprof/prof/output.py -> build/lib.linux-x86_64-3.7/apex/pyprof/prof\n",
            "  copying apex/pyprof/prof/randomSample.py -> build/lib.linux-x86_64-3.7/apex/pyprof/prof\n",
            "  copying apex/pyprof/prof/optim.py -> build/lib.linux-x86_64-3.7/apex/pyprof/prof\n",
            "  copying apex/pyprof/prof/embedding.py -> build/lib.linux-x86_64-3.7/apex/pyprof/prof\n",
            "  copying apex/pyprof/prof/conv.py -> build/lib.linux-x86_64-3.7/apex/pyprof/prof\n",
            "  copying apex/pyprof/prof/reduction.py -> build/lib.linux-x86_64-3.7/apex/pyprof/prof\n",
            "  copying apex/pyprof/prof/softmax.py -> build/lib.linux-x86_64-3.7/apex/pyprof/prof\n",
            "  copying apex/pyprof/prof/loss.py -> build/lib.linux-x86_64-3.7/apex/pyprof/prof\n",
            "  copying apex/pyprof/prof/utility.py -> build/lib.linux-x86_64-3.7/apex/pyprof/prof\n",
            "  copying apex/pyprof/prof/base.py -> build/lib.linux-x86_64-3.7/apex/pyprof/prof\n",
            "  copying apex/pyprof/prof/index_slice_join_mutate.py -> build/lib.linux-x86_64-3.7/apex/pyprof/prof\n",
            "  copying apex/pyprof/prof/pooling.py -> build/lib.linux-x86_64-3.7/apex/pyprof/prof\n",
            "  creating build/lib.linux-x86_64-3.7/apex/pyprof/nvtx\n",
            "  copying apex/pyprof/nvtx/__init__.py -> build/lib.linux-x86_64-3.7/apex/pyprof/nvtx\n",
            "  copying apex/pyprof/nvtx/nvmarker.py -> build/lib.linux-x86_64-3.7/apex/pyprof/nvtx\n",
            "  creating build/lib.linux-x86_64-3.7/apex/pyprof/parse\n",
            "  copying apex/pyprof/parse/__init__.py -> build/lib.linux-x86_64-3.7/apex/pyprof/parse\n",
            "  copying apex/pyprof/parse/__main__.py -> build/lib.linux-x86_64-3.7/apex/pyprof/parse\n",
            "  copying apex/pyprof/parse/parse.py -> build/lib.linux-x86_64-3.7/apex/pyprof/parse\n",
            "  copying apex/pyprof/parse/kernel.py -> build/lib.linux-x86_64-3.7/apex/pyprof/parse\n",
            "  copying apex/pyprof/parse/nvvp.py -> build/lib.linux-x86_64-3.7/apex/pyprof/parse\n",
            "  copying apex/pyprof/parse/db.py -> build/lib.linux-x86_64-3.7/apex/pyprof/parse\n",
            "  creating build/lib.linux-x86_64-3.7/apex/transformer/pipeline_parallel\n",
            "  copying apex/transformer/pipeline_parallel/__init__.py -> build/lib.linux-x86_64-3.7/apex/transformer/pipeline_parallel\n",
            "  copying apex/transformer/pipeline_parallel/_timers.py -> build/lib.linux-x86_64-3.7/apex/transformer/pipeline_parallel\n",
            "  copying apex/transformer/pipeline_parallel/p2p_communication.py -> build/lib.linux-x86_64-3.7/apex/transformer/pipeline_parallel\n",
            "  copying apex/transformer/pipeline_parallel/utils.py -> build/lib.linux-x86_64-3.7/apex/transformer/pipeline_parallel\n",
            "  creating build/lib.linux-x86_64-3.7/apex/transformer/tensor_parallel\n",
            "  copying apex/transformer/tensor_parallel/random.py -> build/lib.linux-x86_64-3.7/apex/transformer/tensor_parallel\n",
            "  copying apex/transformer/tensor_parallel/layers.py -> build/lib.linux-x86_64-3.7/apex/transformer/tensor_parallel\n",
            "  copying apex/transformer/tensor_parallel/mappings.py -> build/lib.linux-x86_64-3.7/apex/transformer/tensor_parallel\n",
            "  copying apex/transformer/tensor_parallel/__init__.py -> build/lib.linux-x86_64-3.7/apex/transformer/tensor_parallel\n",
            "  copying apex/transformer/tensor_parallel/data.py -> build/lib.linux-x86_64-3.7/apex/transformer/tensor_parallel\n",
            "  copying apex/transformer/tensor_parallel/cross_entropy.py -> build/lib.linux-x86_64-3.7/apex/transformer/tensor_parallel\n",
            "  copying apex/transformer/tensor_parallel/utils.py -> build/lib.linux-x86_64-3.7/apex/transformer/tensor_parallel\n",
            "  copying apex/transformer/tensor_parallel/memory.py -> build/lib.linux-x86_64-3.7/apex/transformer/tensor_parallel\n",
            "  creating build/lib.linux-x86_64-3.7/apex/transformer/testing\n",
            "  copying apex/transformer/testing/commons.py -> build/lib.linux-x86_64-3.7/apex/transformer/testing\n",
            "  copying apex/transformer/testing/__init__.py -> build/lib.linux-x86_64-3.7/apex/transformer/testing\n",
            "  copying apex/transformer/testing/standalone_bert.py -> build/lib.linux-x86_64-3.7/apex/transformer/testing\n",
            "  copying apex/transformer/testing/standalone_gpt.py -> build/lib.linux-x86_64-3.7/apex/transformer/testing\n",
            "  copying apex/transformer/testing/global_vars.py -> build/lib.linux-x86_64-3.7/apex/transformer/testing\n",
            "  copying apex/transformer/testing/arguments.py -> build/lib.linux-x86_64-3.7/apex/transformer/testing\n",
            "  creating build/lib.linux-x86_64-3.7/apex/transformer/amp\n",
            "  copying apex/transformer/amp/__init__.py -> build/lib.linux-x86_64-3.7/apex/transformer/amp\n",
            "  copying apex/transformer/amp/grad_scaler.py -> build/lib.linux-x86_64-3.7/apex/transformer/amp\n",
            "  creating build/lib.linux-x86_64-3.7/apex/transformer/_data\n",
            "  copying apex/transformer/_data/__init__.py -> build/lib.linux-x86_64-3.7/apex/transformer/_data\n",
            "  copying apex/transformer/_data/_batchsampler.py -> build/lib.linux-x86_64-3.7/apex/transformer/_data\n",
            "  creating build/lib.linux-x86_64-3.7/apex/transformer/functional\n",
            "  copying apex/transformer/functional/__init__.py -> build/lib.linux-x86_64-3.7/apex/transformer/functional\n",
            "  copying apex/transformer/functional/fused_softmax.py -> build/lib.linux-x86_64-3.7/apex/transformer/functional\n",
            "  creating build/lib.linux-x86_64-3.7/apex/transformer/pipeline_parallel/schedules\n",
            "  copying apex/transformer/pipeline_parallel/schedules/fwd_bwd_pipelining_without_interleaving.py -> build/lib.linux-x86_64-3.7/apex/transformer/pipeline_parallel/schedules\n",
            "  copying apex/transformer/pipeline_parallel/schedules/fwd_bwd_pipelining_with_interleaving.py -> build/lib.linux-x86_64-3.7/apex/transformer/pipeline_parallel/schedules\n",
            "  copying apex/transformer/pipeline_parallel/schedules/__init__.py -> build/lib.linux-x86_64-3.7/apex/transformer/pipeline_parallel/schedules\n",
            "  copying apex/transformer/pipeline_parallel/schedules/common.py -> build/lib.linux-x86_64-3.7/apex/transformer/pipeline_parallel/schedules\n",
            "  copying apex/transformer/pipeline_parallel/schedules/fwd_bwd_no_pipelining.py -> build/lib.linux-x86_64-3.7/apex/transformer/pipeline_parallel/schedules\n",
            "  creating build/lib.linux-x86_64-3.7/apex/amp/lists\n",
            "  copying apex/amp/lists/__init__.py -> build/lib.linux-x86_64-3.7/apex/amp/lists\n",
            "  copying apex/amp/lists/tensor_overrides.py -> build/lib.linux-x86_64-3.7/apex/amp/lists\n",
            "  copying apex/amp/lists/torch_overrides.py -> build/lib.linux-x86_64-3.7/apex/amp/lists\n",
            "  copying apex/amp/lists/functional_overrides.py -> build/lib.linux-x86_64-3.7/apex/amp/lists\n",
            "  creating build/lib.linux-x86_64-3.7/apex/contrib/xentropy\n",
            "  copying apex/contrib/xentropy/__init__.py -> build/lib.linux-x86_64-3.7/apex/contrib/xentropy\n",
            "  copying apex/contrib/xentropy/softmax_xentropy.py -> build/lib.linux-x86_64-3.7/apex/contrib/xentropy\n",
            "  creating build/lib.linux-x86_64-3.7/apex/contrib/optimizers\n",
            "  copying apex/contrib/optimizers/fused_adam.py -> build/lib.linux-x86_64-3.7/apex/contrib/optimizers\n",
            "  copying apex/contrib/optimizers/__init__.py -> build/lib.linux-x86_64-3.7/apex/contrib/optimizers\n",
            "  copying apex/contrib/optimizers/fused_sgd.py -> build/lib.linux-x86_64-3.7/apex/contrib/optimizers\n",
            "  copying apex/contrib/optimizers/distributed_fused_lamb.py -> build/lib.linux-x86_64-3.7/apex/contrib/optimizers\n",
            "  copying apex/contrib/optimizers/fp16_optimizer.py -> build/lib.linux-x86_64-3.7/apex/contrib/optimizers\n",
            "  copying apex/contrib/optimizers/distributed_fused_adam_v3.py -> build/lib.linux-x86_64-3.7/apex/contrib/optimizers\n",
            "  copying apex/contrib/optimizers/distributed_fused_adam_v2.py -> build/lib.linux-x86_64-3.7/apex/contrib/optimizers\n",
            "  copying apex/contrib/optimizers/fused_lamb.py -> build/lib.linux-x86_64-3.7/apex/contrib/optimizers\n",
            "  copying apex/contrib/optimizers/distributed_fused_adam.py -> build/lib.linux-x86_64-3.7/apex/contrib/optimizers\n",
            "  creating build/lib.linux-x86_64-3.7/apex/contrib/transducer\n",
            "  copying apex/contrib/transducer/__init__.py -> build/lib.linux-x86_64-3.7/apex/contrib/transducer\n",
            "  copying apex/contrib/transducer/transducer.py -> build/lib.linux-x86_64-3.7/apex/contrib/transducer\n",
            "  creating build/lib.linux-x86_64-3.7/apex/contrib/layer_norm\n",
            "  copying apex/contrib/layer_norm/__init__.py -> build/lib.linux-x86_64-3.7/apex/contrib/layer_norm\n",
            "  copying apex/contrib/layer_norm/layer_norm.py -> build/lib.linux-x86_64-3.7/apex/contrib/layer_norm\n",
            "  creating build/lib.linux-x86_64-3.7/apex/contrib/multihead_attn\n",
            "  copying apex/contrib/multihead_attn/mask_softmax_dropout_func.py -> build/lib.linux-x86_64-3.7/apex/contrib/multihead_attn\n",
            "  copying apex/contrib/multihead_attn/__init__.py -> build/lib.linux-x86_64-3.7/apex/contrib/multihead_attn\n",
            "  copying apex/contrib/multihead_attn/fast_encdec_multihead_attn_norm_add_func.py -> build/lib.linux-x86_64-3.7/apex/contrib/multihead_attn\n",
            "  copying apex/contrib/multihead_attn/fast_self_multihead_attn_func.py -> build/lib.linux-x86_64-3.7/apex/contrib/multihead_attn\n",
            "  copying apex/contrib/multihead_attn/self_multihead_attn_func.py -> build/lib.linux-x86_64-3.7/apex/contrib/multihead_attn\n",
            "  copying apex/contrib/multihead_attn/fast_self_multihead_attn_norm_add_func.py -> build/lib.linux-x86_64-3.7/apex/contrib/multihead_attn\n",
            "  copying apex/contrib/multihead_attn/encdec_multihead_attn_func.py -> build/lib.linux-x86_64-3.7/apex/contrib/multihead_attn\n",
            "  copying apex/contrib/multihead_attn/fast_encdec_multihead_attn_func.py -> build/lib.linux-x86_64-3.7/apex/contrib/multihead_attn\n",
            "  copying apex/contrib/multihead_attn/encdec_multihead_attn.py -> build/lib.linux-x86_64-3.7/apex/contrib/multihead_attn\n",
            "  copying apex/contrib/multihead_attn/self_multihead_attn.py -> build/lib.linux-x86_64-3.7/apex/contrib/multihead_attn\n",
            "  creating build/lib.linux-x86_64-3.7/apex/contrib/groupbn\n",
            "  copying apex/contrib/groupbn/__init__.py -> build/lib.linux-x86_64-3.7/apex/contrib/groupbn\n",
            "  copying apex/contrib/groupbn/batch_norm.py -> build/lib.linux-x86_64-3.7/apex/contrib/groupbn\n",
            "  creating build/lib.linux-x86_64-3.7/apex/contrib/fmha\n",
            "  copying apex/contrib/fmha/__init__.py -> build/lib.linux-x86_64-3.7/apex/contrib/fmha\n",
            "  copying apex/contrib/fmha/fmha.py -> build/lib.linux-x86_64-3.7/apex/contrib/fmha\n",
            "  creating build/lib.linux-x86_64-3.7/apex/contrib/sparsity\n",
            "  copying apex/contrib/sparsity/sparse_masklib.py -> build/lib.linux-x86_64-3.7/apex/contrib/sparsity\n",
            "  copying apex/contrib/sparsity/__init__.py -> build/lib.linux-x86_64-3.7/apex/contrib/sparsity\n",
            "  copying apex/contrib/sparsity/asp.py -> build/lib.linux-x86_64-3.7/apex/contrib/sparsity\n",
            "  copying apex/contrib/sparsity/permutation_lib.py -> build/lib.linux-x86_64-3.7/apex/contrib/sparsity\n",
            "  creating build/lib.linux-x86_64-3.7/apex/contrib/bottleneck\n",
            "  copying apex/contrib/bottleneck/__init__.py -> build/lib.linux-x86_64-3.7/apex/contrib/bottleneck\n",
            "  copying apex/contrib/bottleneck/bottleneck.py -> build/lib.linux-x86_64-3.7/apex/contrib/bottleneck\n",
            "  copying apex/contrib/bottleneck/bottleneck_module_test.py -> build/lib.linux-x86_64-3.7/apex/contrib/bottleneck\n",
            "  copying apex/contrib/bottleneck/test.py -> build/lib.linux-x86_64-3.7/apex/contrib/bottleneck\n",
            "  creating build/lib.linux-x86_64-3.7/apex/contrib/sparsity/permutation_search_kernels\n",
            "  copying apex/contrib/sparsity/permutation_search_kernels/__init__.py -> build/lib.linux-x86_64-3.7/apex/contrib/sparsity/permutation_search_kernels\n",
            "  copying apex/contrib/sparsity/permutation_search_kernels/exhaustive_search.py -> build/lib.linux-x86_64-3.7/apex/contrib/sparsity/permutation_search_kernels\n",
            "  copying apex/contrib/sparsity/permutation_search_kernels/permutation_utilities.py -> build/lib.linux-x86_64-3.7/apex/contrib/sparsity/permutation_search_kernels\n",
            "  copying apex/contrib/sparsity/permutation_search_kernels/call_permutation_search_kernels.py -> build/lib.linux-x86_64-3.7/apex/contrib/sparsity/permutation_search_kernels\n",
            "  running build_ext\n",
            "  building 'apex_C' extension\n",
            "  creating /content/apex/build/temp.linux-x86_64-3.7\n",
            "  creating /content/apex/build/temp.linux-x86_64-3.7/csrc\n",
            "  Emitting ninja build file /content/apex/build/temp.linux-x86_64-3.7/build.ninja...\n",
            "  Compiling objects...\n",
            "  Allowing ninja to set a default number of workers... (overridable by setting the environment variable MAX_JOBS=N)\n",
            "  [1/1] c++ -MMD -MF /content/apex/build/temp.linux-x86_64-3.7/csrc/flatten_unflatten.o.d -pthread -Wno-unused-result -Wsign-compare -DNDEBUG -g -fwrapv -O2 -Wall -g -fdebug-prefix-map=/build/python3.7-pX47U3/python3.7-3.7.12=. -fstack-protector-strong -Wformat -Werror=format-security -g -fdebug-prefix-map=/build/python3.7-pX47U3/python3.7-3.7.12=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fPIC -I/usr/local/lib/python3.7/dist-packages/torch/include -I/usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include -I/usr/local/lib/python3.7/dist-packages/torch/include/TH -I/usr/local/lib/python3.7/dist-packages/torch/include/THC -I/usr/include/python3.7m -c -c /content/apex/csrc/flatten_unflatten.cpp -o /content/apex/build/temp.linux-x86_64-3.7/csrc/flatten_unflatten.o -DTORCH_API_INCLUDE_EXTENSION_H '-DPYBIND11_COMPILER_TYPE=\"_gcc\"' '-DPYBIND11_STDLIB=\"_libstdcpp\"' '-DPYBIND11_BUILD_ABI=\"_cxxabi1011\"' -DTORCH_EXTENSION_NAME=apex_C -D_GLIBCXX_USE_CXX11_ABI=0 -std=c++14\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Parallel.h:140:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/utils.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/nn/cloneable.h:5,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/nn.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:13,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/flatten_unflatten.cpp:1:\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ParallelOpenMP.h:83:0: warning: ignoring #pragma omp parallel [-Wunknown-pragmas]\n",
            "   #pragma omp parallel for if ((end - begin) >= grain_size)\n",
            "\n",
            "  In file included from /content/apex/csrc/flatten_unflatten.cpp:2:0:\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/utils/tensor_flatten.h: In member function ‘at::DeprecatedTypeProperties& torch::utils::TensorGroup::type()’:\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/utils/tensor_flatten.h:44:28: warning: ‘at::DeprecatedTypeProperties& at::Tensor::type() const’ is deprecated: Tensor.type() is deprecated. Instead use Tensor.options(), which in many cases (e.g. in a constructor) is a drop-in replacement. If you were using data from type(), that is now available from Tensor itself, so instead of tensor.type().scalar_type(), use tensor.scalar_type() instead and instead of tensor.type().backend() use tensor.device(). [-Wdeprecated-declarations]\n",
            "       return tensors[0].type();\n",
            "                              ^\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Tensor.h:3:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Context.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:9,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/flatten_unflatten.cpp:1:\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/core/TensorBody.h:303:30: note: declared here\n",
            "     DeprecatedTypeProperties & type() const {\n",
            "                                ^~~~\n",
            "  x86_64-linux-gnu-g++ -pthread -shared -Wl,-O1 -Wl,-Bsymbolic-functions -Wl,-Bsymbolic-functions -Wl,-z,relro -Wl,-Bsymbolic-functions -Wl,-z,relro -g -fdebug-prefix-map=/build/python3.7-pX47U3/python3.7-3.7.12=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 /content/apex/build/temp.linux-x86_64-3.7/csrc/flatten_unflatten.o -L/usr/local/lib/python3.7/dist-packages/torch/lib -lc10 -ltorch -ltorch_cpu -ltorch_python -o build/lib.linux-x86_64-3.7/apex_C.cpython-37m-x86_64-linux-gnu.so\n",
            "  building 'amp_C' extension\n",
            "  Emitting ninja build file /content/apex/build/temp.linux-x86_64-3.7/build.ninja...\n",
            "  Compiling objects...\n",
            "  Allowing ninja to set a default number of workers... (overridable by setting the environment variable MAX_JOBS=N)\n",
            "  [1/14] /usr/local/cuda/bin/nvcc --generate-dependencies-with-compile --dependency-output /content/apex/build/temp.linux-x86_64-3.7/csrc/multi_tensor_sgd_kernel.o.d -I/usr/local/lib/python3.7/dist-packages/torch/include -I/usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include -I/usr/local/lib/python3.7/dist-packages/torch/include/TH -I/usr/local/lib/python3.7/dist-packages/torch/include/THC -I/usr/local/cuda/include -I/usr/include/python3.7m -c -c /content/apex/csrc/multi_tensor_sgd_kernel.cu -o /content/apex/build/temp.linux-x86_64-3.7/csrc/multi_tensor_sgd_kernel.o -D__CUDA_NO_HALF_OPERATORS__ -D__CUDA_NO_HALF_CONVERSIONS__ -D__CUDA_NO_BFLOAT16_CONVERSIONS__ -D__CUDA_NO_HALF2_OPERATORS__ --expt-relaxed-constexpr --compiler-options ''\"'\"'-fPIC'\"'\"'' -lineinfo -O3 --use_fast_math -DVERSION_GE_1_1 -DVERSION_GE_1_3 -DVERSION_GE_1_5 -DTORCH_API_INCLUDE_EXTENSION_H '-DPYBIND11_COMPILER_TYPE=\"_gcc\"' '-DPYBIND11_STDLIB=\"_libstdcpp\"' '-DPYBIND11_BUILD_ABI=\"_cxxabi1011\"' -DTORCH_EXTENSION_NAME=amp_C -D_GLIBCXX_USE_CXX11_ABI=0 -gencode=arch=compute_75,code=compute_75 -gencode=arch=compute_75,code=sm_75 -std=c++14\n",
            "  [2/14] /usr/local/cuda/bin/nvcc --generate-dependencies-with-compile --dependency-output /content/apex/build/temp.linux-x86_64-3.7/csrc/multi_tensor_adam.o.d -I/usr/local/lib/python3.7/dist-packages/torch/include -I/usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include -I/usr/local/lib/python3.7/dist-packages/torch/include/TH -I/usr/local/lib/python3.7/dist-packages/torch/include/THC -I/usr/local/cuda/include -I/usr/include/python3.7m -c -c /content/apex/csrc/multi_tensor_adam.cu -o /content/apex/build/temp.linux-x86_64-3.7/csrc/multi_tensor_adam.o -D__CUDA_NO_HALF_OPERATORS__ -D__CUDA_NO_HALF_CONVERSIONS__ -D__CUDA_NO_BFLOAT16_CONVERSIONS__ -D__CUDA_NO_HALF2_OPERATORS__ --expt-relaxed-constexpr --compiler-options ''\"'\"'-fPIC'\"'\"'' -lineinfo -O3 --use_fast_math -DVERSION_GE_1_1 -DVERSION_GE_1_3 -DVERSION_GE_1_5 -DTORCH_API_INCLUDE_EXTENSION_H '-DPYBIND11_COMPILER_TYPE=\"_gcc\"' '-DPYBIND11_STDLIB=\"_libstdcpp\"' '-DPYBIND11_BUILD_ABI=\"_cxxabi1011\"' -DTORCH_EXTENSION_NAME=amp_C -D_GLIBCXX_USE_CXX11_ABI=0 -gencode=arch=compute_75,code=compute_75 -gencode=arch=compute_75,code=sm_75 -std=c++14\n",
            "  [3/14] /usr/local/cuda/bin/nvcc --generate-dependencies-with-compile --dependency-output /content/apex/build/temp.linux-x86_64-3.7/csrc/multi_tensor_scale_kernel.o.d -I/usr/local/lib/python3.7/dist-packages/torch/include -I/usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include -I/usr/local/lib/python3.7/dist-packages/torch/include/TH -I/usr/local/lib/python3.7/dist-packages/torch/include/THC -I/usr/local/cuda/include -I/usr/include/python3.7m -c -c /content/apex/csrc/multi_tensor_scale_kernel.cu -o /content/apex/build/temp.linux-x86_64-3.7/csrc/multi_tensor_scale_kernel.o -D__CUDA_NO_HALF_OPERATORS__ -D__CUDA_NO_HALF_CONVERSIONS__ -D__CUDA_NO_BFLOAT16_CONVERSIONS__ -D__CUDA_NO_HALF2_OPERATORS__ --expt-relaxed-constexpr --compiler-options ''\"'\"'-fPIC'\"'\"'' -lineinfo -O3 --use_fast_math -DVERSION_GE_1_1 -DVERSION_GE_1_3 -DVERSION_GE_1_5 -DTORCH_API_INCLUDE_EXTENSION_H '-DPYBIND11_COMPILER_TYPE=\"_gcc\"' '-DPYBIND11_STDLIB=\"_libstdcpp\"' '-DPYBIND11_BUILD_ABI=\"_cxxabi1011\"' -DTORCH_EXTENSION_NAME=amp_C -D_GLIBCXX_USE_CXX11_ABI=0 -gencode=arch=compute_75,code=compute_75 -gencode=arch=compute_75,code=sm_75 -std=c++14\n",
            "  [4/14] /usr/local/cuda/bin/nvcc --generate-dependencies-with-compile --dependency-output /content/apex/build/temp.linux-x86_64-3.7/csrc/multi_tensor_l2norm_kernel.o.d -I/usr/local/lib/python3.7/dist-packages/torch/include -I/usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include -I/usr/local/lib/python3.7/dist-packages/torch/include/TH -I/usr/local/lib/python3.7/dist-packages/torch/include/THC -I/usr/local/cuda/include -I/usr/include/python3.7m -c -c /content/apex/csrc/multi_tensor_l2norm_kernel.cu -o /content/apex/build/temp.linux-x86_64-3.7/csrc/multi_tensor_l2norm_kernel.o -D__CUDA_NO_HALF_OPERATORS__ -D__CUDA_NO_HALF_CONVERSIONS__ -D__CUDA_NO_BFLOAT16_CONVERSIONS__ -D__CUDA_NO_HALF2_OPERATORS__ --expt-relaxed-constexpr --compiler-options ''\"'\"'-fPIC'\"'\"'' -lineinfo -O3 --use_fast_math -DVERSION_GE_1_1 -DVERSION_GE_1_3 -DVERSION_GE_1_5 -DTORCH_API_INCLUDE_EXTENSION_H '-DPYBIND11_COMPILER_TYPE=\"_gcc\"' '-DPYBIND11_STDLIB=\"_libstdcpp\"' '-DPYBIND11_BUILD_ABI=\"_cxxabi1011\"' -DTORCH_EXTENSION_NAME=amp_C -D_GLIBCXX_USE_CXX11_ABI=0 -gencode=arch=compute_75,code=compute_75 -gencode=arch=compute_75,code=sm_75 -std=c++14\n",
            "  [5/14] /usr/local/cuda/bin/nvcc --generate-dependencies-with-compile --dependency-output /content/apex/build/temp.linux-x86_64-3.7/csrc/multi_tensor_axpby_kernel.o.d -I/usr/local/lib/python3.7/dist-packages/torch/include -I/usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include -I/usr/local/lib/python3.7/dist-packages/torch/include/TH -I/usr/local/lib/python3.7/dist-packages/torch/include/THC -I/usr/local/cuda/include -I/usr/include/python3.7m -c -c /content/apex/csrc/multi_tensor_axpby_kernel.cu -o /content/apex/build/temp.linux-x86_64-3.7/csrc/multi_tensor_axpby_kernel.o -D__CUDA_NO_HALF_OPERATORS__ -D__CUDA_NO_HALF_CONVERSIONS__ -D__CUDA_NO_BFLOAT16_CONVERSIONS__ -D__CUDA_NO_HALF2_OPERATORS__ --expt-relaxed-constexpr --compiler-options ''\"'\"'-fPIC'\"'\"'' -lineinfo -O3 --use_fast_math -DVERSION_GE_1_1 -DVERSION_GE_1_3 -DVERSION_GE_1_5 -DTORCH_API_INCLUDE_EXTENSION_H '-DPYBIND11_COMPILER_TYPE=\"_gcc\"' '-DPYBIND11_STDLIB=\"_libstdcpp\"' '-DPYBIND11_BUILD_ABI=\"_cxxabi1011\"' -DTORCH_EXTENSION_NAME=amp_C -D_GLIBCXX_USE_CXX11_ABI=0 -gencode=arch=compute_75,code=compute_75 -gencode=arch=compute_75,code=sm_75 -std=c++14\n",
            "  [6/14] c++ -MMD -MF /content/apex/build/temp.linux-x86_64-3.7/csrc/amp_C_frontend.o.d -pthread -Wno-unused-result -Wsign-compare -DNDEBUG -g -fwrapv -O2 -Wall -g -fdebug-prefix-map=/build/python3.7-pX47U3/python3.7-3.7.12=. -fstack-protector-strong -Wformat -Werror=format-security -g -fdebug-prefix-map=/build/python3.7-pX47U3/python3.7-3.7.12=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fPIC -I/usr/local/lib/python3.7/dist-packages/torch/include -I/usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include -I/usr/local/lib/python3.7/dist-packages/torch/include/TH -I/usr/local/lib/python3.7/dist-packages/torch/include/THC -I/usr/local/cuda/include -I/usr/include/python3.7m -c -c /content/apex/csrc/amp_C_frontend.cpp -o /content/apex/build/temp.linux-x86_64-3.7/csrc/amp_C_frontend.o -O3 -DVERSION_GE_1_1 -DVERSION_GE_1_3 -DVERSION_GE_1_5 -DTORCH_API_INCLUDE_EXTENSION_H '-DPYBIND11_COMPILER_TYPE=\"_gcc\"' '-DPYBIND11_STDLIB=\"_libstdcpp\"' '-DPYBIND11_BUILD_ABI=\"_cxxabi1011\"' -DTORCH_EXTENSION_NAME=amp_C -D_GLIBCXX_USE_CXX11_ABI=0 -std=c++14\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Parallel.h:140:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/utils.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/nn/cloneable.h:5,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/nn.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:13,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/amp_C_frontend.cpp:1:\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ParallelOpenMP.h:83:0: warning: ignoring #pragma omp parallel [-Wunknown-pragmas]\n",
            "   #pragma omp parallel for if ((end - begin) >= grain_size)\n",
            "\n",
            "  [7/14] /usr/local/cuda/bin/nvcc --generate-dependencies-with-compile --dependency-output /content/apex/build/temp.linux-x86_64-3.7/csrc/multi_tensor_lamb_stage_2.o.d -I/usr/local/lib/python3.7/dist-packages/torch/include -I/usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include -I/usr/local/lib/python3.7/dist-packages/torch/include/TH -I/usr/local/lib/python3.7/dist-packages/torch/include/THC -I/usr/local/cuda/include -I/usr/include/python3.7m -c -c /content/apex/csrc/multi_tensor_lamb_stage_2.cu -o /content/apex/build/temp.linux-x86_64-3.7/csrc/multi_tensor_lamb_stage_2.o -D__CUDA_NO_HALF_OPERATORS__ -D__CUDA_NO_HALF_CONVERSIONS__ -D__CUDA_NO_BFLOAT16_CONVERSIONS__ -D__CUDA_NO_HALF2_OPERATORS__ --expt-relaxed-constexpr --compiler-options ''\"'\"'-fPIC'\"'\"'' -lineinfo -O3 --use_fast_math -DVERSION_GE_1_1 -DVERSION_GE_1_3 -DVERSION_GE_1_5 -DTORCH_API_INCLUDE_EXTENSION_H '-DPYBIND11_COMPILER_TYPE=\"_gcc\"' '-DPYBIND11_STDLIB=\"_libstdcpp\"' '-DPYBIND11_BUILD_ABI=\"_cxxabi1011\"' -DTORCH_EXTENSION_NAME=amp_C -D_GLIBCXX_USE_CXX11_ABI=0 -gencode=arch=compute_75,code=compute_75 -gencode=arch=compute_75,code=sm_75 -std=c++14\n",
            "  [8/14] /usr/local/cuda/bin/nvcc --generate-dependencies-with-compile --dependency-output /content/apex/build/temp.linux-x86_64-3.7/csrc/multi_tensor_l2norm_scale_kernel.o.d -I/usr/local/lib/python3.7/dist-packages/torch/include -I/usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include -I/usr/local/lib/python3.7/dist-packages/torch/include/TH -I/usr/local/lib/python3.7/dist-packages/torch/include/THC -I/usr/local/cuda/include -I/usr/include/python3.7m -c -c /content/apex/csrc/multi_tensor_l2norm_scale_kernel.cu -o /content/apex/build/temp.linux-x86_64-3.7/csrc/multi_tensor_l2norm_scale_kernel.o -D__CUDA_NO_HALF_OPERATORS__ -D__CUDA_NO_HALF_CONVERSIONS__ -D__CUDA_NO_BFLOAT16_CONVERSIONS__ -D__CUDA_NO_HALF2_OPERATORS__ --expt-relaxed-constexpr --compiler-options ''\"'\"'-fPIC'\"'\"'' -lineinfo -O3 --use_fast_math -DVERSION_GE_1_1 -DVERSION_GE_1_3 -DVERSION_GE_1_5 -DTORCH_API_INCLUDE_EXTENSION_H '-DPYBIND11_COMPILER_TYPE=\"_gcc\"' '-DPYBIND11_STDLIB=\"_libstdcpp\"' '-DPYBIND11_BUILD_ABI=\"_cxxabi1011\"' -DTORCH_EXTENSION_NAME=amp_C -D_GLIBCXX_USE_CXX11_ABI=0 -gencode=arch=compute_75,code=compute_75 -gencode=arch=compute_75,code=sm_75 -std=c++14\n",
            "  [9/14] /usr/local/cuda/bin/nvcc --generate-dependencies-with-compile --dependency-output /content/apex/build/temp.linux-x86_64-3.7/csrc/multi_tensor_l2norm_kernel_mp.o.d -I/usr/local/lib/python3.7/dist-packages/torch/include -I/usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include -I/usr/local/lib/python3.7/dist-packages/torch/include/TH -I/usr/local/lib/python3.7/dist-packages/torch/include/THC -I/usr/local/cuda/include -I/usr/include/python3.7m -c -c /content/apex/csrc/multi_tensor_l2norm_kernel_mp.cu -o /content/apex/build/temp.linux-x86_64-3.7/csrc/multi_tensor_l2norm_kernel_mp.o -D__CUDA_NO_HALF_OPERATORS__ -D__CUDA_NO_HALF_CONVERSIONS__ -D__CUDA_NO_BFLOAT16_CONVERSIONS__ -D__CUDA_NO_HALF2_OPERATORS__ --expt-relaxed-constexpr --compiler-options ''\"'\"'-fPIC'\"'\"'' -lineinfo -O3 --use_fast_math -DVERSION_GE_1_1 -DVERSION_GE_1_3 -DVERSION_GE_1_5 -DTORCH_API_INCLUDE_EXTENSION_H '-DPYBIND11_COMPILER_TYPE=\"_gcc\"' '-DPYBIND11_STDLIB=\"_libstdcpp\"' '-DPYBIND11_BUILD_ABI=\"_cxxabi1011\"' -DTORCH_EXTENSION_NAME=amp_C -D_GLIBCXX_USE_CXX11_ABI=0 -gencode=arch=compute_75,code=compute_75 -gencode=arch=compute_75,code=sm_75 -std=c++14\n",
            "  [10/14] /usr/local/cuda/bin/nvcc --generate-dependencies-with-compile --dependency-output /content/apex/build/temp.linux-x86_64-3.7/csrc/multi_tensor_adagrad.o.d -I/usr/local/lib/python3.7/dist-packages/torch/include -I/usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include -I/usr/local/lib/python3.7/dist-packages/torch/include/TH -I/usr/local/lib/python3.7/dist-packages/torch/include/THC -I/usr/local/cuda/include -I/usr/include/python3.7m -c -c /content/apex/csrc/multi_tensor_adagrad.cu -o /content/apex/build/temp.linux-x86_64-3.7/csrc/multi_tensor_adagrad.o -D__CUDA_NO_HALF_OPERATORS__ -D__CUDA_NO_HALF_CONVERSIONS__ -D__CUDA_NO_BFLOAT16_CONVERSIONS__ -D__CUDA_NO_HALF2_OPERATORS__ --expt-relaxed-constexpr --compiler-options ''\"'\"'-fPIC'\"'\"'' -lineinfo -O3 --use_fast_math -DVERSION_GE_1_1 -DVERSION_GE_1_3 -DVERSION_GE_1_5 -DTORCH_API_INCLUDE_EXTENSION_H '-DPYBIND11_COMPILER_TYPE=\"_gcc\"' '-DPYBIND11_STDLIB=\"_libstdcpp\"' '-DPYBIND11_BUILD_ABI=\"_cxxabi1011\"' -DTORCH_EXTENSION_NAME=amp_C -D_GLIBCXX_USE_CXX11_ABI=0 -gencode=arch=compute_75,code=compute_75 -gencode=arch=compute_75,code=sm_75 -std=c++14\n",
            "  [11/14] /usr/local/cuda/bin/nvcc --generate-dependencies-with-compile --dependency-output /content/apex/build/temp.linux-x86_64-3.7/csrc/multi_tensor_lamb_stage_1.o.d -I/usr/local/lib/python3.7/dist-packages/torch/include -I/usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include -I/usr/local/lib/python3.7/dist-packages/torch/include/TH -I/usr/local/lib/python3.7/dist-packages/torch/include/THC -I/usr/local/cuda/include -I/usr/include/python3.7m -c -c /content/apex/csrc/multi_tensor_lamb_stage_1.cu -o /content/apex/build/temp.linux-x86_64-3.7/csrc/multi_tensor_lamb_stage_1.o -D__CUDA_NO_HALF_OPERATORS__ -D__CUDA_NO_HALF_CONVERSIONS__ -D__CUDA_NO_BFLOAT16_CONVERSIONS__ -D__CUDA_NO_HALF2_OPERATORS__ --expt-relaxed-constexpr --compiler-options ''\"'\"'-fPIC'\"'\"'' -lineinfo -O3 --use_fast_math -DVERSION_GE_1_1 -DVERSION_GE_1_3 -DVERSION_GE_1_5 -DTORCH_API_INCLUDE_EXTENSION_H '-DPYBIND11_COMPILER_TYPE=\"_gcc\"' '-DPYBIND11_STDLIB=\"_libstdcpp\"' '-DPYBIND11_BUILD_ABI=\"_cxxabi1011\"' -DTORCH_EXTENSION_NAME=amp_C -D_GLIBCXX_USE_CXX11_ABI=0 -gencode=arch=compute_75,code=compute_75 -gencode=arch=compute_75,code=sm_75 -std=c++14\n",
            "  [12/14] /usr/local/cuda/bin/nvcc --generate-dependencies-with-compile --dependency-output /content/apex/build/temp.linux-x86_64-3.7/csrc/multi_tensor_novograd.o.d -I/usr/local/lib/python3.7/dist-packages/torch/include -I/usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include -I/usr/local/lib/python3.7/dist-packages/torch/include/TH -I/usr/local/lib/python3.7/dist-packages/torch/include/THC -I/usr/local/cuda/include -I/usr/include/python3.7m -c -c /content/apex/csrc/multi_tensor_novograd.cu -o /content/apex/build/temp.linux-x86_64-3.7/csrc/multi_tensor_novograd.o -D__CUDA_NO_HALF_OPERATORS__ -D__CUDA_NO_HALF_CONVERSIONS__ -D__CUDA_NO_BFLOAT16_CONVERSIONS__ -D__CUDA_NO_HALF2_OPERATORS__ --expt-relaxed-constexpr --compiler-options ''\"'\"'-fPIC'\"'\"'' -lineinfo -O3 --use_fast_math -DVERSION_GE_1_1 -DVERSION_GE_1_3 -DVERSION_GE_1_5 -DTORCH_API_INCLUDE_EXTENSION_H '-DPYBIND11_COMPILER_TYPE=\"_gcc\"' '-DPYBIND11_STDLIB=\"_libstdcpp\"' '-DPYBIND11_BUILD_ABI=\"_cxxabi1011\"' -DTORCH_EXTENSION_NAME=amp_C -D_GLIBCXX_USE_CXX11_ABI=0 -gencode=arch=compute_75,code=compute_75 -gencode=arch=compute_75,code=sm_75 -std=c++14\n",
            "  [13/14] /usr/local/cuda/bin/nvcc --generate-dependencies-with-compile --dependency-output /content/apex/build/temp.linux-x86_64-3.7/csrc/multi_tensor_lamb.o.d -I/usr/local/lib/python3.7/dist-packages/torch/include -I/usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include -I/usr/local/lib/python3.7/dist-packages/torch/include/TH -I/usr/local/lib/python3.7/dist-packages/torch/include/THC -I/usr/local/cuda/include -I/usr/include/python3.7m -c -c /content/apex/csrc/multi_tensor_lamb.cu -o /content/apex/build/temp.linux-x86_64-3.7/csrc/multi_tensor_lamb.o -D__CUDA_NO_HALF_OPERATORS__ -D__CUDA_NO_HALF_CONVERSIONS__ -D__CUDA_NO_BFLOAT16_CONVERSIONS__ -D__CUDA_NO_HALF2_OPERATORS__ --expt-relaxed-constexpr --compiler-options ''\"'\"'-fPIC'\"'\"'' -lineinfo -O3 --use_fast_math -DVERSION_GE_1_1 -DVERSION_GE_1_3 -DVERSION_GE_1_5 -DTORCH_API_INCLUDE_EXTENSION_H '-DPYBIND11_COMPILER_TYPE=\"_gcc\"' '-DPYBIND11_STDLIB=\"_libstdcpp\"' '-DPYBIND11_BUILD_ABI=\"_cxxabi1011\"' -DTORCH_EXTENSION_NAME=amp_C -D_GLIBCXX_USE_CXX11_ABI=0 -gencode=arch=compute_75,code=compute_75 -gencode=arch=compute_75,code=sm_75 -std=c++14\n",
            "  [14/14] /usr/local/cuda/bin/nvcc --generate-dependencies-with-compile --dependency-output /content/apex/build/temp.linux-x86_64-3.7/csrc/multi_tensor_lamb_mp.o.d -I/usr/local/lib/python3.7/dist-packages/torch/include -I/usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include -I/usr/local/lib/python3.7/dist-packages/torch/include/TH -I/usr/local/lib/python3.7/dist-packages/torch/include/THC -I/usr/local/cuda/include -I/usr/include/python3.7m -c -c /content/apex/csrc/multi_tensor_lamb_mp.cu -o /content/apex/build/temp.linux-x86_64-3.7/csrc/multi_tensor_lamb_mp.o -D__CUDA_NO_HALF_OPERATORS__ -D__CUDA_NO_HALF_CONVERSIONS__ -D__CUDA_NO_BFLOAT16_CONVERSIONS__ -D__CUDA_NO_HALF2_OPERATORS__ --expt-relaxed-constexpr --compiler-options ''\"'\"'-fPIC'\"'\"'' -lineinfo -O3 --use_fast_math -DVERSION_GE_1_1 -DVERSION_GE_1_3 -DVERSION_GE_1_5 -DTORCH_API_INCLUDE_EXTENSION_H '-DPYBIND11_COMPILER_TYPE=\"_gcc\"' '-DPYBIND11_STDLIB=\"_libstdcpp\"' '-DPYBIND11_BUILD_ABI=\"_cxxabi1011\"' -DTORCH_EXTENSION_NAME=amp_C -D_GLIBCXX_USE_CXX11_ABI=0 -gencode=arch=compute_75,code=compute_75 -gencode=arch=compute_75,code=sm_75 -std=c++14\n",
            "  x86_64-linux-gnu-g++ -pthread -shared -Wl,-O1 -Wl,-Bsymbolic-functions -Wl,-Bsymbolic-functions -Wl,-z,relro -Wl,-Bsymbolic-functions -Wl,-z,relro -g -fdebug-prefix-map=/build/python3.7-pX47U3/python3.7-3.7.12=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 /content/apex/build/temp.linux-x86_64-3.7/csrc/amp_C_frontend.o /content/apex/build/temp.linux-x86_64-3.7/csrc/multi_tensor_sgd_kernel.o /content/apex/build/temp.linux-x86_64-3.7/csrc/multi_tensor_scale_kernel.o /content/apex/build/temp.linux-x86_64-3.7/csrc/multi_tensor_axpby_kernel.o /content/apex/build/temp.linux-x86_64-3.7/csrc/multi_tensor_l2norm_kernel.o /content/apex/build/temp.linux-x86_64-3.7/csrc/multi_tensor_l2norm_kernel_mp.o /content/apex/build/temp.linux-x86_64-3.7/csrc/multi_tensor_l2norm_scale_kernel.o /content/apex/build/temp.linux-x86_64-3.7/csrc/multi_tensor_lamb_stage_1.o /content/apex/build/temp.linux-x86_64-3.7/csrc/multi_tensor_lamb_stage_2.o /content/apex/build/temp.linux-x86_64-3.7/csrc/multi_tensor_adam.o /content/apex/build/temp.linux-x86_64-3.7/csrc/multi_tensor_adagrad.o /content/apex/build/temp.linux-x86_64-3.7/csrc/multi_tensor_novograd.o /content/apex/build/temp.linux-x86_64-3.7/csrc/multi_tensor_lamb.o /content/apex/build/temp.linux-x86_64-3.7/csrc/multi_tensor_lamb_mp.o -L/usr/local/lib/python3.7/dist-packages/torch/lib -L/usr/local/cuda/lib64 -lc10 -ltorch -ltorch_cpu -ltorch_python -lcudart -lc10_cuda -ltorch_cuda_cu -ltorch_cuda_cpp -o build/lib.linux-x86_64-3.7/amp_C.cpython-37m-x86_64-linux-gnu.so\n",
            "  building 'syncbn' extension\n",
            "  Emitting ninja build file /content/apex/build/temp.linux-x86_64-3.7/build.ninja...\n",
            "  Compiling objects...\n",
            "  Allowing ninja to set a default number of workers... (overridable by setting the environment variable MAX_JOBS=N)\n",
            "  [1/2] /usr/local/cuda/bin/nvcc --generate-dependencies-with-compile --dependency-output /content/apex/build/temp.linux-x86_64-3.7/csrc/welford.o.d -I/usr/local/lib/python3.7/dist-packages/torch/include -I/usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include -I/usr/local/lib/python3.7/dist-packages/torch/include/TH -I/usr/local/lib/python3.7/dist-packages/torch/include/THC -I/usr/local/cuda/include -I/usr/include/python3.7m -c -c /content/apex/csrc/welford.cu -o /content/apex/build/temp.linux-x86_64-3.7/csrc/welford.o -D__CUDA_NO_HALF_OPERATORS__ -D__CUDA_NO_HALF_CONVERSIONS__ -D__CUDA_NO_BFLOAT16_CONVERSIONS__ -D__CUDA_NO_HALF2_OPERATORS__ --expt-relaxed-constexpr --compiler-options ''\"'\"'-fPIC'\"'\"'' -O3 -DVERSION_GE_1_1 -DVERSION_GE_1_3 -DVERSION_GE_1_5 -DTORCH_API_INCLUDE_EXTENSION_H '-DPYBIND11_COMPILER_TYPE=\"_gcc\"' '-DPYBIND11_STDLIB=\"_libstdcpp\"' '-DPYBIND11_BUILD_ABI=\"_cxxabi1011\"' -DTORCH_EXTENSION_NAME=syncbn -D_GLIBCXX_USE_CXX11_ABI=0 -gencode=arch=compute_75,code=compute_75 -gencode=arch=compute_75,code=sm_75 -std=c++14\n",
            "  [2/2] c++ -MMD -MF /content/apex/build/temp.linux-x86_64-3.7/csrc/syncbn.o.d -pthread -Wno-unused-result -Wsign-compare -DNDEBUG -g -fwrapv -O2 -Wall -g -fdebug-prefix-map=/build/python3.7-pX47U3/python3.7-3.7.12=. -fstack-protector-strong -Wformat -Werror=format-security -g -fdebug-prefix-map=/build/python3.7-pX47U3/python3.7-3.7.12=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fPIC -I/usr/local/lib/python3.7/dist-packages/torch/include -I/usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include -I/usr/local/lib/python3.7/dist-packages/torch/include/TH -I/usr/local/lib/python3.7/dist-packages/torch/include/THC -I/usr/local/cuda/include -I/usr/include/python3.7m -c -c /content/apex/csrc/syncbn.cpp -o /content/apex/build/temp.linux-x86_64-3.7/csrc/syncbn.o -O3 -DVERSION_GE_1_1 -DVERSION_GE_1_3 -DVERSION_GE_1_5 -DTORCH_API_INCLUDE_EXTENSION_H '-DPYBIND11_COMPILER_TYPE=\"_gcc\"' '-DPYBIND11_STDLIB=\"_libstdcpp\"' '-DPYBIND11_BUILD_ABI=\"_cxxabi1011\"' -DTORCH_EXTENSION_NAME=syncbn -D_GLIBCXX_USE_CXX11_ABI=0 -std=c++14\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Parallel.h:140:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/utils.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/nn/cloneable.h:5,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/nn.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:13,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/syncbn.cpp:1:\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ParallelOpenMP.h:83:0: warning: ignoring #pragma omp parallel [-Wunknown-pragmas]\n",
            "   #pragma omp parallel for if ((end - begin) >= grain_size)\n",
            "\n",
            "  x86_64-linux-gnu-g++ -pthread -shared -Wl,-O1 -Wl,-Bsymbolic-functions -Wl,-Bsymbolic-functions -Wl,-z,relro -Wl,-Bsymbolic-functions -Wl,-z,relro -g -fdebug-prefix-map=/build/python3.7-pX47U3/python3.7-3.7.12=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 /content/apex/build/temp.linux-x86_64-3.7/csrc/syncbn.o /content/apex/build/temp.linux-x86_64-3.7/csrc/welford.o -L/usr/local/lib/python3.7/dist-packages/torch/lib -L/usr/local/cuda/lib64 -lc10 -ltorch -ltorch_cpu -ltorch_python -lcudart -lc10_cuda -ltorch_cuda_cu -ltorch_cuda_cpp -o build/lib.linux-x86_64-3.7/syncbn.cpython-37m-x86_64-linux-gnu.so\n",
            "  building 'fused_layer_norm_cuda' extension\n",
            "  Emitting ninja build file /content/apex/build/temp.linux-x86_64-3.7/build.ninja...\n",
            "  Compiling objects...\n",
            "  Allowing ninja to set a default number of workers... (overridable by setting the environment variable MAX_JOBS=N)\n",
            "  [1/2] /usr/local/cuda/bin/nvcc --generate-dependencies-with-compile --dependency-output /content/apex/build/temp.linux-x86_64-3.7/csrc/layer_norm_cuda_kernel.o.d -I/usr/local/lib/python3.7/dist-packages/torch/include -I/usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include -I/usr/local/lib/python3.7/dist-packages/torch/include/TH -I/usr/local/lib/python3.7/dist-packages/torch/include/THC -I/usr/local/cuda/include -I/usr/include/python3.7m -c -c /content/apex/csrc/layer_norm_cuda_kernel.cu -o /content/apex/build/temp.linux-x86_64-3.7/csrc/layer_norm_cuda_kernel.o -D__CUDA_NO_HALF_OPERATORS__ -D__CUDA_NO_HALF_CONVERSIONS__ -D__CUDA_NO_BFLOAT16_CONVERSIONS__ -D__CUDA_NO_HALF2_OPERATORS__ --expt-relaxed-constexpr --compiler-options ''\"'\"'-fPIC'\"'\"'' -maxrregcount=50 -O3 --use_fast_math -DVERSION_GE_1_1 -DVERSION_GE_1_3 -DVERSION_GE_1_5 -DTORCH_API_INCLUDE_EXTENSION_H '-DPYBIND11_COMPILER_TYPE=\"_gcc\"' '-DPYBIND11_STDLIB=\"_libstdcpp\"' '-DPYBIND11_BUILD_ABI=\"_cxxabi1011\"' -DTORCH_EXTENSION_NAME=fused_layer_norm_cuda -D_GLIBCXX_USE_CXX11_ABI=0 -gencode=arch=compute_75,code=compute_75 -gencode=arch=compute_75,code=sm_75 -std=c++14\n",
            "  [2/2] c++ -MMD -MF /content/apex/build/temp.linux-x86_64-3.7/csrc/layer_norm_cuda.o.d -pthread -Wno-unused-result -Wsign-compare -DNDEBUG -g -fwrapv -O2 -Wall -g -fdebug-prefix-map=/build/python3.7-pX47U3/python3.7-3.7.12=. -fstack-protector-strong -Wformat -Werror=format-security -g -fdebug-prefix-map=/build/python3.7-pX47U3/python3.7-3.7.12=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fPIC -I/usr/local/lib/python3.7/dist-packages/torch/include -I/usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include -I/usr/local/lib/python3.7/dist-packages/torch/include/TH -I/usr/local/lib/python3.7/dist-packages/torch/include/THC -I/usr/local/cuda/include -I/usr/include/python3.7m -c -c /content/apex/csrc/layer_norm_cuda.cpp -o /content/apex/build/temp.linux-x86_64-3.7/csrc/layer_norm_cuda.o -O3 -DVERSION_GE_1_1 -DVERSION_GE_1_3 -DVERSION_GE_1_5 -DTORCH_API_INCLUDE_EXTENSION_H '-DPYBIND11_COMPILER_TYPE=\"_gcc\"' '-DPYBIND11_STDLIB=\"_libstdcpp\"' '-DPYBIND11_BUILD_ABI=\"_cxxabi1011\"' -DTORCH_EXTENSION_NAME=fused_layer_norm_cuda -D_GLIBCXX_USE_CXX11_ABI=0 -std=c++14\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Parallel.h:140:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/utils.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/nn/cloneable.h:5,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/nn.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:13,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/layer_norm_cuda.cpp:1:\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ParallelOpenMP.h:83:0: warning: ignoring #pragma omp parallel [-Wunknown-pragmas]\n",
            "   #pragma omp parallel for if ((end - begin) >= grain_size)\n",
            "\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/c10/core/DeviceType.h:8:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/c10/core/Device.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/c10/core/Allocator.h:6,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:7,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/layer_norm_cuda.cpp:1:\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp: In function ‘std::vector<at::Tensor> layer_norm(at::Tensor, c10::IntArrayRef, double)’:\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:145:42: warning: ‘at::DeprecatedTypeProperties& at::Tensor::type() const’ is deprecated: Tensor.type() is deprecated. Instead use Tensor.options(), which in many cases (e.g. in a constructor) is a drop-in replacement. If you were using data from type(), that is now available from Tensor itself, so instead of tensor.type().scalar_type(), use tensor.scalar_type() instead and instead of tensor.type().backend() use tensor.device(). [-Wdeprecated-declarations]\n",
            "   #define CHECK_CUDA(x) TORCH_CHECK(x.type().is_cuda(), #x \" must be a CUDA tensor\")\n",
            "                                            ^\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/c10/macros/Macros.h:173:65: note: in definition of macro ‘C10_UNLIKELY’\n",
            "   #define C10_UNLIKELY(expr)  (__builtin_expect(static_cast<bool>(expr), 0))\n",
            "                                                                   ^~~~\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/c10/util/Exception.h:362:7: note: in expansion of macro ‘C10_UNLIKELY_OR_CONST’\n",
            "     if (C10_UNLIKELY_OR_CONST(!(cond))) {                                 \\\n",
            "         ^~~~~~~~~~~~~~~~~~~~~\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:145:23: note: in expansion of macro ‘TORCH_CHECK’\n",
            "   #define CHECK_CUDA(x) TORCH_CHECK(x.type().is_cuda(), #x \" must be a CUDA tensor\")\n",
            "                         ^~~~~~~~~~~\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:147:24: note: in expansion of macro ‘CHECK_CUDA’\n",
            "   #define CHECK_INPUT(x) CHECK_CUDA(x); CHECK_CONTIGUOUS(x)\n",
            "                          ^~~~~~~~~~\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:157:3: note: in expansion of macro ‘CHECK_INPUT’\n",
            "     CHECK_INPUT(input);\n",
            "     ^\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Tensor.h:3:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Context.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:9,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/layer_norm_cuda.cpp:1:\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/core/TensorBody.h:303:30: note: declared here\n",
            "     DeprecatedTypeProperties & type() const {\n",
            "                                ^~~~\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/c10/core/DeviceType.h:8:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/c10/core/Device.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/c10/core/Allocator.h:6,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:7,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/layer_norm_cuda.cpp:1:\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp: In function ‘std::vector<at::Tensor> layer_norm_affine(at::Tensor, c10::IntArrayRef, at::Tensor, at::Tensor, double)’:\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:145:42: warning: ‘at::DeprecatedTypeProperties& at::Tensor::type() const’ is deprecated: Tensor.type() is deprecated. Instead use Tensor.options(), which in many cases (e.g. in a constructor) is a drop-in replacement. If you were using data from type(), that is now available from Tensor itself, so instead of tensor.type().scalar_type(), use tensor.scalar_type() instead and instead of tensor.type().backend() use tensor.device(). [-Wdeprecated-declarations]\n",
            "   #define CHECK_CUDA(x) TORCH_CHECK(x.type().is_cuda(), #x \" must be a CUDA tensor\")\n",
            "                                            ^\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/c10/macros/Macros.h:173:65: note: in definition of macro ‘C10_UNLIKELY’\n",
            "   #define C10_UNLIKELY(expr)  (__builtin_expect(static_cast<bool>(expr), 0))\n",
            "                                                                   ^~~~\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/c10/util/Exception.h:362:7: note: in expansion of macro ‘C10_UNLIKELY_OR_CONST’\n",
            "     if (C10_UNLIKELY_OR_CONST(!(cond))) {                                 \\\n",
            "         ^~~~~~~~~~~~~~~~~~~~~\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:145:23: note: in expansion of macro ‘TORCH_CHECK’\n",
            "   #define CHECK_CUDA(x) TORCH_CHECK(x.type().is_cuda(), #x \" must be a CUDA tensor\")\n",
            "                         ^~~~~~~~~~~\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:147:24: note: in expansion of macro ‘CHECK_CUDA’\n",
            "   #define CHECK_INPUT(x) CHECK_CUDA(x); CHECK_CONTIGUOUS(x)\n",
            "                          ^~~~~~~~~~\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:178:3: note: in expansion of macro ‘CHECK_INPUT’\n",
            "     CHECK_INPUT(input);\n",
            "     ^\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Tensor.h:3:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Context.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:9,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/layer_norm_cuda.cpp:1:\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/core/TensorBody.h:303:30: note: declared here\n",
            "     DeprecatedTypeProperties & type() const {\n",
            "                                ^~~~\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/c10/core/DeviceType.h:8:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/c10/core/Device.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/c10/core/Allocator.h:6,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:7,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/layer_norm_cuda.cpp:1:\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:145:42: warning: ‘at::DeprecatedTypeProperties& at::Tensor::type() const’ is deprecated: Tensor.type() is deprecated. Instead use Tensor.options(), which in many cases (e.g. in a constructor) is a drop-in replacement. If you were using data from type(), that is now available from Tensor itself, so instead of tensor.type().scalar_type(), use tensor.scalar_type() instead and instead of tensor.type().backend() use tensor.device(). [-Wdeprecated-declarations]\n",
            "   #define CHECK_CUDA(x) TORCH_CHECK(x.type().is_cuda(), #x \" must be a CUDA tensor\")\n",
            "                                            ^\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/c10/macros/Macros.h:173:65: note: in definition of macro ‘C10_UNLIKELY’\n",
            "   #define C10_UNLIKELY(expr)  (__builtin_expect(static_cast<bool>(expr), 0))\n",
            "                                                                   ^~~~\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/c10/util/Exception.h:362:7: note: in expansion of macro ‘C10_UNLIKELY_OR_CONST’\n",
            "     if (C10_UNLIKELY_OR_CONST(!(cond))) {                                 \\\n",
            "         ^~~~~~~~~~~~~~~~~~~~~\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:145:23: note: in expansion of macro ‘TORCH_CHECK’\n",
            "   #define CHECK_CUDA(x) TORCH_CHECK(x.type().is_cuda(), #x \" must be a CUDA tensor\")\n",
            "                         ^~~~~~~~~~~\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:147:24: note: in expansion of macro ‘CHECK_CUDA’\n",
            "   #define CHECK_INPUT(x) CHECK_CUDA(x); CHECK_CONTIGUOUS(x)\n",
            "                          ^~~~~~~~~~\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:179:3: note: in expansion of macro ‘CHECK_INPUT’\n",
            "     CHECK_INPUT(gamma);\n",
            "     ^\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Tensor.h:3:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Context.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:9,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/layer_norm_cuda.cpp:1:\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/core/TensorBody.h:303:30: note: declared here\n",
            "     DeprecatedTypeProperties & type() const {\n",
            "                                ^~~~\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/c10/core/DeviceType.h:8:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/c10/core/Device.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/c10/core/Allocator.h:6,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:7,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/layer_norm_cuda.cpp:1:\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:145:42: warning: ‘at::DeprecatedTypeProperties& at::Tensor::type() const’ is deprecated: Tensor.type() is deprecated. Instead use Tensor.options(), which in many cases (e.g. in a constructor) is a drop-in replacement. If you were using data from type(), that is now available from Tensor itself, so instead of tensor.type().scalar_type(), use tensor.scalar_type() instead and instead of tensor.type().backend() use tensor.device(). [-Wdeprecated-declarations]\n",
            "   #define CHECK_CUDA(x) TORCH_CHECK(x.type().is_cuda(), #x \" must be a CUDA tensor\")\n",
            "                                            ^\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/c10/macros/Macros.h:173:65: note: in definition of macro ‘C10_UNLIKELY’\n",
            "   #define C10_UNLIKELY(expr)  (__builtin_expect(static_cast<bool>(expr), 0))\n",
            "                                                                   ^~~~\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/c10/util/Exception.h:362:7: note: in expansion of macro ‘C10_UNLIKELY_OR_CONST’\n",
            "     if (C10_UNLIKELY_OR_CONST(!(cond))) {                                 \\\n",
            "         ^~~~~~~~~~~~~~~~~~~~~\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:145:23: note: in expansion of macro ‘TORCH_CHECK’\n",
            "   #define CHECK_CUDA(x) TORCH_CHECK(x.type().is_cuda(), #x \" must be a CUDA tensor\")\n",
            "                         ^~~~~~~~~~~\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:147:24: note: in expansion of macro ‘CHECK_CUDA’\n",
            "   #define CHECK_INPUT(x) CHECK_CUDA(x); CHECK_CONTIGUOUS(x)\n",
            "                          ^~~~~~~~~~\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:180:3: note: in expansion of macro ‘CHECK_INPUT’\n",
            "     CHECK_INPUT(beta);\n",
            "     ^\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Tensor.h:3:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Context.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:9,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/layer_norm_cuda.cpp:1:\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/core/TensorBody.h:303:30: note: declared here\n",
            "     DeprecatedTypeProperties & type() const {\n",
            "                                ^~~~\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/c10/core/DeviceType.h:8:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/c10/core/Device.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/c10/core/Allocator.h:6,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:7,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/layer_norm_cuda.cpp:1:\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp: In function ‘std::vector<at::Tensor> layer_norm_affine_mixed_dtypes(at::Tensor, c10::IntArrayRef, at::Tensor, at::Tensor, double)’:\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:145:42: warning: ‘at::DeprecatedTypeProperties& at::Tensor::type() const’ is deprecated: Tensor.type() is deprecated. Instead use Tensor.options(), which in many cases (e.g. in a constructor) is a drop-in replacement. If you were using data from type(), that is now available from Tensor itself, so instead of tensor.type().scalar_type(), use tensor.scalar_type() instead and instead of tensor.type().backend() use tensor.device(). [-Wdeprecated-declarations]\n",
            "   #define CHECK_CUDA(x) TORCH_CHECK(x.type().is_cuda(), #x \" must be a CUDA tensor\")\n",
            "                                            ^\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/c10/macros/Macros.h:173:65: note: in definition of macro ‘C10_UNLIKELY’\n",
            "   #define C10_UNLIKELY(expr)  (__builtin_expect(static_cast<bool>(expr), 0))\n",
            "                                                                   ^~~~\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/c10/util/Exception.h:362:7: note: in expansion of macro ‘C10_UNLIKELY_OR_CONST’\n",
            "     if (C10_UNLIKELY_OR_CONST(!(cond))) {                                 \\\n",
            "         ^~~~~~~~~~~~~~~~~~~~~\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:145:23: note: in expansion of macro ‘TORCH_CHECK’\n",
            "   #define CHECK_CUDA(x) TORCH_CHECK(x.type().is_cuda(), #x \" must be a CUDA tensor\")\n",
            "                         ^~~~~~~~~~~\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:147:24: note: in expansion of macro ‘CHECK_CUDA’\n",
            "   #define CHECK_INPUT(x) CHECK_CUDA(x); CHECK_CONTIGUOUS(x)\n",
            "                          ^~~~~~~~~~\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:202:3: note: in expansion of macro ‘CHECK_INPUT’\n",
            "     CHECK_INPUT(input);\n",
            "     ^\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Tensor.h:3:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Context.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:9,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/layer_norm_cuda.cpp:1:\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/core/TensorBody.h:303:30: note: declared here\n",
            "     DeprecatedTypeProperties & type() const {\n",
            "                                ^~~~\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/c10/core/DeviceType.h:8:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/c10/core/Device.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/c10/core/Allocator.h:6,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:7,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/layer_norm_cuda.cpp:1:\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp: In function ‘at::Tensor layer_norm_gradient(at::Tensor, at::Tensor, at::Tensor, at::Tensor, c10::IntArrayRef, double)’:\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:145:42: warning: ‘at::DeprecatedTypeProperties& at::Tensor::type() const’ is deprecated: Tensor.type() is deprecated. Instead use Tensor.options(), which in many cases (e.g. in a constructor) is a drop-in replacement. If you were using data from type(), that is now available from Tensor itself, so instead of tensor.type().scalar_type(), use tensor.scalar_type() instead and instead of tensor.type().backend() use tensor.device(). [-Wdeprecated-declarations]\n",
            "   #define CHECK_CUDA(x) TORCH_CHECK(x.type().is_cuda(), #x \" must be a CUDA tensor\")\n",
            "                                            ^\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/c10/macros/Macros.h:173:65: note: in definition of macro ‘C10_UNLIKELY’\n",
            "   #define C10_UNLIKELY(expr)  (__builtin_expect(static_cast<bool>(expr), 0))\n",
            "                                                                   ^~~~\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/c10/util/Exception.h:362:7: note: in expansion of macro ‘C10_UNLIKELY_OR_CONST’\n",
            "     if (C10_UNLIKELY_OR_CONST(!(cond))) {                                 \\\n",
            "         ^~~~~~~~~~~~~~~~~~~~~\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:145:23: note: in expansion of macro ‘TORCH_CHECK’\n",
            "   #define CHECK_CUDA(x) TORCH_CHECK(x.type().is_cuda(), #x \" must be a CUDA tensor\")\n",
            "                         ^~~~~~~~~~~\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:147:24: note: in expansion of macro ‘CHECK_CUDA’\n",
            "   #define CHECK_INPUT(x) CHECK_CUDA(x); CHECK_CONTIGUOUS(x)\n",
            "                          ^~~~~~~~~~\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:244:3: note: in expansion of macro ‘CHECK_INPUT’\n",
            "     CHECK_INPUT(dout);\n",
            "     ^\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Tensor.h:3:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Context.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:9,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/layer_norm_cuda.cpp:1:\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/core/TensorBody.h:303:30: note: declared here\n",
            "     DeprecatedTypeProperties & type() const {\n",
            "                                ^~~~\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/c10/core/DeviceType.h:8:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/c10/core/Device.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/c10/core/Allocator.h:6,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:7,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/layer_norm_cuda.cpp:1:\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:145:42: warning: ‘at::DeprecatedTypeProperties& at::Tensor::type() const’ is deprecated: Tensor.type() is deprecated. Instead use Tensor.options(), which in many cases (e.g. in a constructor) is a drop-in replacement. If you were using data from type(), that is now available from Tensor itself, so instead of tensor.type().scalar_type(), use tensor.scalar_type() instead and instead of tensor.type().backend() use tensor.device(). [-Wdeprecated-declarations]\n",
            "   #define CHECK_CUDA(x) TORCH_CHECK(x.type().is_cuda(), #x \" must be a CUDA tensor\")\n",
            "                                            ^\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/c10/macros/Macros.h:173:65: note: in definition of macro ‘C10_UNLIKELY’\n",
            "   #define C10_UNLIKELY(expr)  (__builtin_expect(static_cast<bool>(expr), 0))\n",
            "                                                                   ^~~~\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/c10/util/Exception.h:362:7: note: in expansion of macro ‘C10_UNLIKELY_OR_CONST’\n",
            "     if (C10_UNLIKELY_OR_CONST(!(cond))) {                                 \\\n",
            "         ^~~~~~~~~~~~~~~~~~~~~\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:145:23: note: in expansion of macro ‘TORCH_CHECK’\n",
            "   #define CHECK_CUDA(x) TORCH_CHECK(x.type().is_cuda(), #x \" must be a CUDA tensor\")\n",
            "                         ^~~~~~~~~~~\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:147:24: note: in expansion of macro ‘CHECK_CUDA’\n",
            "   #define CHECK_INPUT(x) CHECK_CUDA(x); CHECK_CONTIGUOUS(x)\n",
            "                          ^~~~~~~~~~\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:245:3: note: in expansion of macro ‘CHECK_INPUT’\n",
            "     CHECK_INPUT(mean);\n",
            "     ^\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Tensor.h:3:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Context.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:9,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/layer_norm_cuda.cpp:1:\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/core/TensorBody.h:303:30: note: declared here\n",
            "     DeprecatedTypeProperties & type() const {\n",
            "                                ^~~~\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/c10/core/DeviceType.h:8:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/c10/core/Device.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/c10/core/Allocator.h:6,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:7,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/layer_norm_cuda.cpp:1:\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:145:42: warning: ‘at::DeprecatedTypeProperties& at::Tensor::type() const’ is deprecated: Tensor.type() is deprecated. Instead use Tensor.options(), which in many cases (e.g. in a constructor) is a drop-in replacement. If you were using data from type(), that is now available from Tensor itself, so instead of tensor.type().scalar_type(), use tensor.scalar_type() instead and instead of tensor.type().backend() use tensor.device(). [-Wdeprecated-declarations]\n",
            "   #define CHECK_CUDA(x) TORCH_CHECK(x.type().is_cuda(), #x \" must be a CUDA tensor\")\n",
            "                                            ^\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/c10/macros/Macros.h:173:65: note: in definition of macro ‘C10_UNLIKELY’\n",
            "   #define C10_UNLIKELY(expr)  (__builtin_expect(static_cast<bool>(expr), 0))\n",
            "                                                                   ^~~~\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/c10/util/Exception.h:362:7: note: in expansion of macro ‘C10_UNLIKELY_OR_CONST’\n",
            "     if (C10_UNLIKELY_OR_CONST(!(cond))) {                                 \\\n",
            "         ^~~~~~~~~~~~~~~~~~~~~\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:145:23: note: in expansion of macro ‘TORCH_CHECK’\n",
            "   #define CHECK_CUDA(x) TORCH_CHECK(x.type().is_cuda(), #x \" must be a CUDA tensor\")\n",
            "                         ^~~~~~~~~~~\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:147:24: note: in expansion of macro ‘CHECK_CUDA’\n",
            "   #define CHECK_INPUT(x) CHECK_CUDA(x); CHECK_CONTIGUOUS(x)\n",
            "                          ^~~~~~~~~~\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:246:3: note: in expansion of macro ‘CHECK_INPUT’\n",
            "     CHECK_INPUT(invvar);\n",
            "     ^\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Tensor.h:3:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Context.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:9,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/layer_norm_cuda.cpp:1:\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/core/TensorBody.h:303:30: note: declared here\n",
            "     DeprecatedTypeProperties & type() const {\n",
            "                                ^~~~\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/c10/core/DeviceType.h:8:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/c10/core/Device.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/c10/core/Allocator.h:6,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:7,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/layer_norm_cuda.cpp:1:\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:145:42: warning: ‘at::DeprecatedTypeProperties& at::Tensor::type() const’ is deprecated: Tensor.type() is deprecated. Instead use Tensor.options(), which in many cases (e.g. in a constructor) is a drop-in replacement. If you were using data from type(), that is now available from Tensor itself, so instead of tensor.type().scalar_type(), use tensor.scalar_type() instead and instead of tensor.type().backend() use tensor.device(). [-Wdeprecated-declarations]\n",
            "   #define CHECK_CUDA(x) TORCH_CHECK(x.type().is_cuda(), #x \" must be a CUDA tensor\")\n",
            "                                            ^\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/c10/macros/Macros.h:173:65: note: in definition of macro ‘C10_UNLIKELY’\n",
            "   #define C10_UNLIKELY(expr)  (__builtin_expect(static_cast<bool>(expr), 0))\n",
            "                                                                   ^~~~\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/c10/util/Exception.h:362:7: note: in expansion of macro ‘C10_UNLIKELY_OR_CONST’\n",
            "     if (C10_UNLIKELY_OR_CONST(!(cond))) {                                 \\\n",
            "         ^~~~~~~~~~~~~~~~~~~~~\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:145:23: note: in expansion of macro ‘TORCH_CHECK’\n",
            "   #define CHECK_CUDA(x) TORCH_CHECK(x.type().is_cuda(), #x \" must be a CUDA tensor\")\n",
            "                         ^~~~~~~~~~~\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:147:24: note: in expansion of macro ‘CHECK_CUDA’\n",
            "   #define CHECK_INPUT(x) CHECK_CUDA(x); CHECK_CONTIGUOUS(x)\n",
            "                          ^~~~~~~~~~\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:247:3: note: in expansion of macro ‘CHECK_INPUT’\n",
            "     CHECK_INPUT(input);\n",
            "     ^\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Tensor.h:3:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Context.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:9,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/layer_norm_cuda.cpp:1:\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/core/TensorBody.h:303:30: note: declared here\n",
            "     DeprecatedTypeProperties & type() const {\n",
            "                                ^~~~\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/c10/core/DeviceType.h:8:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/c10/core/Device.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/c10/core/Allocator.h:6,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:7,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/layer_norm_cuda.cpp:1:\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp: In function ‘std::vector<at::Tensor> layer_norm_gradient_affine(at::Tensor, at::Tensor, at::Tensor, at::Tensor, c10::IntArrayRef, at::Tensor, at::Tensor, double)’:\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:145:42: warning: ‘at::DeprecatedTypeProperties& at::Tensor::type() const’ is deprecated: Tensor.type() is deprecated. Instead use Tensor.options(), which in many cases (e.g. in a constructor) is a drop-in replacement. If you were using data from type(), that is now available from Tensor itself, so instead of tensor.type().scalar_type(), use tensor.scalar_type() instead and instead of tensor.type().backend() use tensor.device(). [-Wdeprecated-declarations]\n",
            "   #define CHECK_CUDA(x) TORCH_CHECK(x.type().is_cuda(), #x \" must be a CUDA tensor\")\n",
            "                                            ^\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/c10/macros/Macros.h:173:65: note: in definition of macro ‘C10_UNLIKELY’\n",
            "   #define C10_UNLIKELY(expr)  (__builtin_expect(static_cast<bool>(expr), 0))\n",
            "                                                                   ^~~~\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/c10/util/Exception.h:362:7: note: in expansion of macro ‘C10_UNLIKELY_OR_CONST’\n",
            "     if (C10_UNLIKELY_OR_CONST(!(cond))) {                                 \\\n",
            "         ^~~~~~~~~~~~~~~~~~~~~\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:145:23: note: in expansion of macro ‘TORCH_CHECK’\n",
            "   #define CHECK_CUDA(x) TORCH_CHECK(x.type().is_cuda(), #x \" must be a CUDA tensor\")\n",
            "                         ^~~~~~~~~~~\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:147:24: note: in expansion of macro ‘CHECK_CUDA’\n",
            "   #define CHECK_INPUT(x) CHECK_CUDA(x); CHECK_CONTIGUOUS(x)\n",
            "                          ^~~~~~~~~~\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:270:3: note: in expansion of macro ‘CHECK_INPUT’\n",
            "     CHECK_INPUT(dout);\n",
            "     ^\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Tensor.h:3:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Context.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:9,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/layer_norm_cuda.cpp:1:\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/core/TensorBody.h:303:30: note: declared here\n",
            "     DeprecatedTypeProperties & type() const {\n",
            "                                ^~~~\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/c10/core/DeviceType.h:8:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/c10/core/Device.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/c10/core/Allocator.h:6,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:7,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/layer_norm_cuda.cpp:1:\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:145:42: warning: ‘at::DeprecatedTypeProperties& at::Tensor::type() const’ is deprecated: Tensor.type() is deprecated. Instead use Tensor.options(), which in many cases (e.g. in a constructor) is a drop-in replacement. If you were using data from type(), that is now available from Tensor itself, so instead of tensor.type().scalar_type(), use tensor.scalar_type() instead and instead of tensor.type().backend() use tensor.device(). [-Wdeprecated-declarations]\n",
            "   #define CHECK_CUDA(x) TORCH_CHECK(x.type().is_cuda(), #x \" must be a CUDA tensor\")\n",
            "                                            ^\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/c10/macros/Macros.h:173:65: note: in definition of macro ‘C10_UNLIKELY’\n",
            "   #define C10_UNLIKELY(expr)  (__builtin_expect(static_cast<bool>(expr), 0))\n",
            "                                                                   ^~~~\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/c10/util/Exception.h:362:7: note: in expansion of macro ‘C10_UNLIKELY_OR_CONST’\n",
            "     if (C10_UNLIKELY_OR_CONST(!(cond))) {                                 \\\n",
            "         ^~~~~~~~~~~~~~~~~~~~~\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:145:23: note: in expansion of macro ‘TORCH_CHECK’\n",
            "   #define CHECK_CUDA(x) TORCH_CHECK(x.type().is_cuda(), #x \" must be a CUDA tensor\")\n",
            "                         ^~~~~~~~~~~\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:147:24: note: in expansion of macro ‘CHECK_CUDA’\n",
            "   #define CHECK_INPUT(x) CHECK_CUDA(x); CHECK_CONTIGUOUS(x)\n",
            "                          ^~~~~~~~~~\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:271:3: note: in expansion of macro ‘CHECK_INPUT’\n",
            "     CHECK_INPUT(mean);\n",
            "     ^\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Tensor.h:3:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Context.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:9,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/layer_norm_cuda.cpp:1:\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/core/TensorBody.h:303:30: note: declared here\n",
            "     DeprecatedTypeProperties & type() const {\n",
            "                                ^~~~\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/c10/core/DeviceType.h:8:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/c10/core/Device.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/c10/core/Allocator.h:6,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:7,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/layer_norm_cuda.cpp:1:\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:145:42: warning: ‘at::DeprecatedTypeProperties& at::Tensor::type() const’ is deprecated: Tensor.type() is deprecated. Instead use Tensor.options(), which in many cases (e.g. in a constructor) is a drop-in replacement. If you were using data from type(), that is now available from Tensor itself, so instead of tensor.type().scalar_type(), use tensor.scalar_type() instead and instead of tensor.type().backend() use tensor.device(). [-Wdeprecated-declarations]\n",
            "   #define CHECK_CUDA(x) TORCH_CHECK(x.type().is_cuda(), #x \" must be a CUDA tensor\")\n",
            "                                            ^\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/c10/macros/Macros.h:173:65: note: in definition of macro ‘C10_UNLIKELY’\n",
            "   #define C10_UNLIKELY(expr)  (__builtin_expect(static_cast<bool>(expr), 0))\n",
            "                                                                   ^~~~\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/c10/util/Exception.h:362:7: note: in expansion of macro ‘C10_UNLIKELY_OR_CONST’\n",
            "     if (C10_UNLIKELY_OR_CONST(!(cond))) {                                 \\\n",
            "         ^~~~~~~~~~~~~~~~~~~~~\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:145:23: note: in expansion of macro ‘TORCH_CHECK’\n",
            "   #define CHECK_CUDA(x) TORCH_CHECK(x.type().is_cuda(), #x \" must be a CUDA tensor\")\n",
            "                         ^~~~~~~~~~~\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:147:24: note: in expansion of macro ‘CHECK_CUDA’\n",
            "   #define CHECK_INPUT(x) CHECK_CUDA(x); CHECK_CONTIGUOUS(x)\n",
            "                          ^~~~~~~~~~\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:272:3: note: in expansion of macro ‘CHECK_INPUT’\n",
            "     CHECK_INPUT(invvar);\n",
            "     ^\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Tensor.h:3:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Context.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:9,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/layer_norm_cuda.cpp:1:\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/core/TensorBody.h:303:30: note: declared here\n",
            "     DeprecatedTypeProperties & type() const {\n",
            "                                ^~~~\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/c10/core/DeviceType.h:8:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/c10/core/Device.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/c10/core/Allocator.h:6,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:7,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/layer_norm_cuda.cpp:1:\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:145:42: warning: ‘at::DeprecatedTypeProperties& at::Tensor::type() const’ is deprecated: Tensor.type() is deprecated. Instead use Tensor.options(), which in many cases (e.g. in a constructor) is a drop-in replacement. If you were using data from type(), that is now available from Tensor itself, so instead of tensor.type().scalar_type(), use tensor.scalar_type() instead and instead of tensor.type().backend() use tensor.device(). [-Wdeprecated-declarations]\n",
            "   #define CHECK_CUDA(x) TORCH_CHECK(x.type().is_cuda(), #x \" must be a CUDA tensor\")\n",
            "                                            ^\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/c10/macros/Macros.h:173:65: note: in definition of macro ‘C10_UNLIKELY’\n",
            "   #define C10_UNLIKELY(expr)  (__builtin_expect(static_cast<bool>(expr), 0))\n",
            "                                                                   ^~~~\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/c10/util/Exception.h:362:7: note: in expansion of macro ‘C10_UNLIKELY_OR_CONST’\n",
            "     if (C10_UNLIKELY_OR_CONST(!(cond))) {                                 \\\n",
            "         ^~~~~~~~~~~~~~~~~~~~~\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:145:23: note: in expansion of macro ‘TORCH_CHECK’\n",
            "   #define CHECK_CUDA(x) TORCH_CHECK(x.type().is_cuda(), #x \" must be a CUDA tensor\")\n",
            "                         ^~~~~~~~~~~\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:147:24: note: in expansion of macro ‘CHECK_CUDA’\n",
            "   #define CHECK_INPUT(x) CHECK_CUDA(x); CHECK_CONTIGUOUS(x)\n",
            "                          ^~~~~~~~~~\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:273:3: note: in expansion of macro ‘CHECK_INPUT’\n",
            "     CHECK_INPUT(input);\n",
            "     ^\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Tensor.h:3:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Context.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:9,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/layer_norm_cuda.cpp:1:\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/core/TensorBody.h:303:30: note: declared here\n",
            "     DeprecatedTypeProperties & type() const {\n",
            "                                ^~~~\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/c10/core/DeviceType.h:8:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/c10/core/Device.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/c10/core/Allocator.h:6,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:7,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/layer_norm_cuda.cpp:1:\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:145:42: warning: ‘at::DeprecatedTypeProperties& at::Tensor::type() const’ is deprecated: Tensor.type() is deprecated. Instead use Tensor.options(), which in many cases (e.g. in a constructor) is a drop-in replacement. If you were using data from type(), that is now available from Tensor itself, so instead of tensor.type().scalar_type(), use tensor.scalar_type() instead and instead of tensor.type().backend() use tensor.device(). [-Wdeprecated-declarations]\n",
            "   #define CHECK_CUDA(x) TORCH_CHECK(x.type().is_cuda(), #x \" must be a CUDA tensor\")\n",
            "                                            ^\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/c10/macros/Macros.h:173:65: note: in definition of macro ‘C10_UNLIKELY’\n",
            "   #define C10_UNLIKELY(expr)  (__builtin_expect(static_cast<bool>(expr), 0))\n",
            "                                                                   ^~~~\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/c10/util/Exception.h:362:7: note: in expansion of macro ‘C10_UNLIKELY_OR_CONST’\n",
            "     if (C10_UNLIKELY_OR_CONST(!(cond))) {                                 \\\n",
            "         ^~~~~~~~~~~~~~~~~~~~~\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:145:23: note: in expansion of macro ‘TORCH_CHECK’\n",
            "   #define CHECK_CUDA(x) TORCH_CHECK(x.type().is_cuda(), #x \" must be a CUDA tensor\")\n",
            "                         ^~~~~~~~~~~\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:147:24: note: in expansion of macro ‘CHECK_CUDA’\n",
            "   #define CHECK_INPUT(x) CHECK_CUDA(x); CHECK_CONTIGUOUS(x)\n",
            "                          ^~~~~~~~~~\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:274:3: note: in expansion of macro ‘CHECK_INPUT’\n",
            "     CHECK_INPUT(gamma);\n",
            "     ^\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Tensor.h:3:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Context.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:9,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/layer_norm_cuda.cpp:1:\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/core/TensorBody.h:303:30: note: declared here\n",
            "     DeprecatedTypeProperties & type() const {\n",
            "                                ^~~~\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/c10/core/DeviceType.h:8:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/c10/core/Device.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/c10/core/Allocator.h:6,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:7,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/layer_norm_cuda.cpp:1:\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:145:42: warning: ‘at::DeprecatedTypeProperties& at::Tensor::type() const’ is deprecated: Tensor.type() is deprecated. Instead use Tensor.options(), which in many cases (e.g. in a constructor) is a drop-in replacement. If you were using data from type(), that is now available from Tensor itself, so instead of tensor.type().scalar_type(), use tensor.scalar_type() instead and instead of tensor.type().backend() use tensor.device(). [-Wdeprecated-declarations]\n",
            "   #define CHECK_CUDA(x) TORCH_CHECK(x.type().is_cuda(), #x \" must be a CUDA tensor\")\n",
            "                                            ^\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/c10/macros/Macros.h:173:65: note: in definition of macro ‘C10_UNLIKELY’\n",
            "   #define C10_UNLIKELY(expr)  (__builtin_expect(static_cast<bool>(expr), 0))\n",
            "                                                                   ^~~~\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/c10/util/Exception.h:362:7: note: in expansion of macro ‘C10_UNLIKELY_OR_CONST’\n",
            "     if (C10_UNLIKELY_OR_CONST(!(cond))) {                                 \\\n",
            "         ^~~~~~~~~~~~~~~~~~~~~\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:145:23: note: in expansion of macro ‘TORCH_CHECK’\n",
            "   #define CHECK_CUDA(x) TORCH_CHECK(x.type().is_cuda(), #x \" must be a CUDA tensor\")\n",
            "                         ^~~~~~~~~~~\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:147:24: note: in expansion of macro ‘CHECK_CUDA’\n",
            "   #define CHECK_INPUT(x) CHECK_CUDA(x); CHECK_CONTIGUOUS(x)\n",
            "                          ^~~~~~~~~~\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:275:3: note: in expansion of macro ‘CHECK_INPUT’\n",
            "     CHECK_INPUT(beta);\n",
            "     ^\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Tensor.h:3:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Context.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:9,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/layer_norm_cuda.cpp:1:\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/core/TensorBody.h:303:30: note: declared here\n",
            "     DeprecatedTypeProperties & type() const {\n",
            "                                ^~~~\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/c10/core/DeviceType.h:8:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/c10/core/Device.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/c10/core/Allocator.h:6,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:7,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/layer_norm_cuda.cpp:1:\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp: In function ‘std::vector<at::Tensor> rms_norm(at::Tensor, c10::IntArrayRef, double)’:\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:301:42: warning: ‘at::DeprecatedTypeProperties& at::Tensor::type() const’ is deprecated: Tensor.type() is deprecated. Instead use Tensor.options(), which in many cases (e.g. in a constructor) is a drop-in replacement. If you were using data from type(), that is now available from Tensor itself, so instead of tensor.type().scalar_type(), use tensor.scalar_type() instead and instead of tensor.type().backend() use tensor.device(). [-Wdeprecated-declarations]\n",
            "   #define CHECK_CUDA(x) TORCH_CHECK(x.type().is_cuda(), #x \" must be a CUDA tensor\")\n",
            "                                            ^\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/c10/macros/Macros.h:173:65: note: in definition of macro ‘C10_UNLIKELY’\n",
            "   #define C10_UNLIKELY(expr)  (__builtin_expect(static_cast<bool>(expr), 0))\n",
            "                                                                   ^~~~\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/c10/util/Exception.h:362:7: note: in expansion of macro ‘C10_UNLIKELY_OR_CONST’\n",
            "     if (C10_UNLIKELY_OR_CONST(!(cond))) {                                 \\\n",
            "         ^~~~~~~~~~~~~~~~~~~~~\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:301:23: note: in expansion of macro ‘TORCH_CHECK’\n",
            "   #define CHECK_CUDA(x) TORCH_CHECK(x.type().is_cuda(), #x \" must be a CUDA tensor\")\n",
            "                         ^~~~~~~~~~~\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:303:24: note: in expansion of macro ‘CHECK_CUDA’\n",
            "   #define CHECK_INPUT(x) CHECK_CUDA(x); CHECK_CONTIGUOUS(x)\n",
            "                          ^~~~~~~~~~\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:313:3: note: in expansion of macro ‘CHECK_INPUT’\n",
            "     CHECK_INPUT(input);\n",
            "     ^\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Tensor.h:3:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Context.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:9,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/layer_norm_cuda.cpp:1:\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/core/TensorBody.h:303:30: note: declared here\n",
            "     DeprecatedTypeProperties & type() const {\n",
            "                                ^~~~\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/c10/core/DeviceType.h:8:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/c10/core/Device.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/c10/core/Allocator.h:6,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:7,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/layer_norm_cuda.cpp:1:\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp: In function ‘std::vector<at::Tensor> rms_norm_affine(at::Tensor, c10::IntArrayRef, at::Tensor, double)’:\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:301:42: warning: ‘at::DeprecatedTypeProperties& at::Tensor::type() const’ is deprecated: Tensor.type() is deprecated. Instead use Tensor.options(), which in many cases (e.g. in a constructor) is a drop-in replacement. If you were using data from type(), that is now available from Tensor itself, so instead of tensor.type().scalar_type(), use tensor.scalar_type() instead and instead of tensor.type().backend() use tensor.device(). [-Wdeprecated-declarations]\n",
            "   #define CHECK_CUDA(x) TORCH_CHECK(x.type().is_cuda(), #x \" must be a CUDA tensor\")\n",
            "                                            ^\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/c10/macros/Macros.h:173:65: note: in definition of macro ‘C10_UNLIKELY’\n",
            "   #define C10_UNLIKELY(expr)  (__builtin_expect(static_cast<bool>(expr), 0))\n",
            "                                                                   ^~~~\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/c10/util/Exception.h:362:7: note: in expansion of macro ‘C10_UNLIKELY_OR_CONST’\n",
            "     if (C10_UNLIKELY_OR_CONST(!(cond))) {                                 \\\n",
            "         ^~~~~~~~~~~~~~~~~~~~~\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:301:23: note: in expansion of macro ‘TORCH_CHECK’\n",
            "   #define CHECK_CUDA(x) TORCH_CHECK(x.type().is_cuda(), #x \" must be a CUDA tensor\")\n",
            "                         ^~~~~~~~~~~\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:303:24: note: in expansion of macro ‘CHECK_CUDA’\n",
            "   #define CHECK_INPUT(x) CHECK_CUDA(x); CHECK_CONTIGUOUS(x)\n",
            "                          ^~~~~~~~~~\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:332:3: note: in expansion of macro ‘CHECK_INPUT’\n",
            "     CHECK_INPUT(input);\n",
            "     ^\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Tensor.h:3:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Context.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:9,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/layer_norm_cuda.cpp:1:\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/core/TensorBody.h:303:30: note: declared here\n",
            "     DeprecatedTypeProperties & type() const {\n",
            "                                ^~~~\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/c10/core/DeviceType.h:8:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/c10/core/Device.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/c10/core/Allocator.h:6,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:7,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/layer_norm_cuda.cpp:1:\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:301:42: warning: ‘at::DeprecatedTypeProperties& at::Tensor::type() const’ is deprecated: Tensor.type() is deprecated. Instead use Tensor.options(), which in many cases (e.g. in a constructor) is a drop-in replacement. If you were using data from type(), that is now available from Tensor itself, so instead of tensor.type().scalar_type(), use tensor.scalar_type() instead and instead of tensor.type().backend() use tensor.device(). [-Wdeprecated-declarations]\n",
            "   #define CHECK_CUDA(x) TORCH_CHECK(x.type().is_cuda(), #x \" must be a CUDA tensor\")\n",
            "                                            ^\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/c10/macros/Macros.h:173:65: note: in definition of macro ‘C10_UNLIKELY’\n",
            "   #define C10_UNLIKELY(expr)  (__builtin_expect(static_cast<bool>(expr), 0))\n",
            "                                                                   ^~~~\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/c10/util/Exception.h:362:7: note: in expansion of macro ‘C10_UNLIKELY_OR_CONST’\n",
            "     if (C10_UNLIKELY_OR_CONST(!(cond))) {                                 \\\n",
            "         ^~~~~~~~~~~~~~~~~~~~~\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:301:23: note: in expansion of macro ‘TORCH_CHECK’\n",
            "   #define CHECK_CUDA(x) TORCH_CHECK(x.type().is_cuda(), #x \" must be a CUDA tensor\")\n",
            "                         ^~~~~~~~~~~\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:303:24: note: in expansion of macro ‘CHECK_CUDA’\n",
            "   #define CHECK_INPUT(x) CHECK_CUDA(x); CHECK_CONTIGUOUS(x)\n",
            "                          ^~~~~~~~~~\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:333:3: note: in expansion of macro ‘CHECK_INPUT’\n",
            "     CHECK_INPUT(gamma);\n",
            "     ^\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Tensor.h:3:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Context.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:9,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/layer_norm_cuda.cpp:1:\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/core/TensorBody.h:303:30: note: declared here\n",
            "     DeprecatedTypeProperties & type() const {\n",
            "                                ^~~~\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/c10/core/DeviceType.h:8:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/c10/core/Device.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/c10/core/Allocator.h:6,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:7,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/layer_norm_cuda.cpp:1:\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp: In function ‘std::vector<at::Tensor> rms_norm_affine_mixed_dtypes(at::Tensor, c10::IntArrayRef, at::Tensor, double)’:\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:301:42: warning: ‘at::DeprecatedTypeProperties& at::Tensor::type() const’ is deprecated: Tensor.type() is deprecated. Instead use Tensor.options(), which in many cases (e.g. in a constructor) is a drop-in replacement. If you were using data from type(), that is now available from Tensor itself, so instead of tensor.type().scalar_type(), use tensor.scalar_type() instead and instead of tensor.type().backend() use tensor.device(). [-Wdeprecated-declarations]\n",
            "   #define CHECK_CUDA(x) TORCH_CHECK(x.type().is_cuda(), #x \" must be a CUDA tensor\")\n",
            "                                            ^\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/c10/macros/Macros.h:173:65: note: in definition of macro ‘C10_UNLIKELY’\n",
            "   #define C10_UNLIKELY(expr)  (__builtin_expect(static_cast<bool>(expr), 0))\n",
            "                                                                   ^~~~\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/c10/util/Exception.h:362:7: note: in expansion of macro ‘C10_UNLIKELY_OR_CONST’\n",
            "     if (C10_UNLIKELY_OR_CONST(!(cond))) {                                 \\\n",
            "         ^~~~~~~~~~~~~~~~~~~~~\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:301:23: note: in expansion of macro ‘TORCH_CHECK’\n",
            "   #define CHECK_CUDA(x) TORCH_CHECK(x.type().is_cuda(), #x \" must be a CUDA tensor\")\n",
            "                         ^~~~~~~~~~~\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:303:24: note: in expansion of macro ‘CHECK_CUDA’\n",
            "   #define CHECK_INPUT(x) CHECK_CUDA(x); CHECK_CONTIGUOUS(x)\n",
            "                          ^~~~~~~~~~\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:353:3: note: in expansion of macro ‘CHECK_INPUT’\n",
            "     CHECK_INPUT(input);\n",
            "     ^\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Tensor.h:3:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Context.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:9,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/layer_norm_cuda.cpp:1:\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/core/TensorBody.h:303:30: note: declared here\n",
            "     DeprecatedTypeProperties & type() const {\n",
            "                                ^~~~\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/c10/core/DeviceType.h:8:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/c10/core/Device.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/c10/core/Allocator.h:6,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:7,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/layer_norm_cuda.cpp:1:\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp: In function ‘at::Tensor rms_norm_gradient(at::Tensor, at::Tensor, at::Tensor, c10::IntArrayRef, double)’:\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:301:42: warning: ‘at::DeprecatedTypeProperties& at::Tensor::type() const’ is deprecated: Tensor.type() is deprecated. Instead use Tensor.options(), which in many cases (e.g. in a constructor) is a drop-in replacement. If you were using data from type(), that is now available from Tensor itself, so instead of tensor.type().scalar_type(), use tensor.scalar_type() instead and instead of tensor.type().backend() use tensor.device(). [-Wdeprecated-declarations]\n",
            "   #define CHECK_CUDA(x) TORCH_CHECK(x.type().is_cuda(), #x \" must be a CUDA tensor\")\n",
            "                                            ^\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/c10/macros/Macros.h:173:65: note: in definition of macro ‘C10_UNLIKELY’\n",
            "   #define C10_UNLIKELY(expr)  (__builtin_expect(static_cast<bool>(expr), 0))\n",
            "                                                                   ^~~~\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/c10/util/Exception.h:362:7: note: in expansion of macro ‘C10_UNLIKELY_OR_CONST’\n",
            "     if (C10_UNLIKELY_OR_CONST(!(cond))) {                                 \\\n",
            "         ^~~~~~~~~~~~~~~~~~~~~\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:301:23: note: in expansion of macro ‘TORCH_CHECK’\n",
            "   #define CHECK_CUDA(x) TORCH_CHECK(x.type().is_cuda(), #x \" must be a CUDA tensor\")\n",
            "                         ^~~~~~~~~~~\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:303:24: note: in expansion of macro ‘CHECK_CUDA’\n",
            "   #define CHECK_INPUT(x) CHECK_CUDA(x); CHECK_CONTIGUOUS(x)\n",
            "                          ^~~~~~~~~~\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:390:3: note: in expansion of macro ‘CHECK_INPUT’\n",
            "     CHECK_INPUT(dout);\n",
            "     ^\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Tensor.h:3:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Context.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:9,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/layer_norm_cuda.cpp:1:\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/core/TensorBody.h:303:30: note: declared here\n",
            "     DeprecatedTypeProperties & type() const {\n",
            "                                ^~~~\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/c10/core/DeviceType.h:8:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/c10/core/Device.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/c10/core/Allocator.h:6,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:7,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/layer_norm_cuda.cpp:1:\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:301:42: warning: ‘at::DeprecatedTypeProperties& at::Tensor::type() const’ is deprecated: Tensor.type() is deprecated. Instead use Tensor.options(), which in many cases (e.g. in a constructor) is a drop-in replacement. If you were using data from type(), that is now available from Tensor itself, so instead of tensor.type().scalar_type(), use tensor.scalar_type() instead and instead of tensor.type().backend() use tensor.device(). [-Wdeprecated-declarations]\n",
            "   #define CHECK_CUDA(x) TORCH_CHECK(x.type().is_cuda(), #x \" must be a CUDA tensor\")\n",
            "                                            ^\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/c10/macros/Macros.h:173:65: note: in definition of macro ‘C10_UNLIKELY’\n",
            "   #define C10_UNLIKELY(expr)  (__builtin_expect(static_cast<bool>(expr), 0))\n",
            "                                                                   ^~~~\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/c10/util/Exception.h:362:7: note: in expansion of macro ‘C10_UNLIKELY_OR_CONST’\n",
            "     if (C10_UNLIKELY_OR_CONST(!(cond))) {                                 \\\n",
            "         ^~~~~~~~~~~~~~~~~~~~~\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:301:23: note: in expansion of macro ‘TORCH_CHECK’\n",
            "   #define CHECK_CUDA(x) TORCH_CHECK(x.type().is_cuda(), #x \" must be a CUDA tensor\")\n",
            "                         ^~~~~~~~~~~\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:303:24: note: in expansion of macro ‘CHECK_CUDA’\n",
            "   #define CHECK_INPUT(x) CHECK_CUDA(x); CHECK_CONTIGUOUS(x)\n",
            "                          ^~~~~~~~~~\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:391:3: note: in expansion of macro ‘CHECK_INPUT’\n",
            "     CHECK_INPUT(invvar);\n",
            "     ^\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Tensor.h:3:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Context.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:9,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/layer_norm_cuda.cpp:1:\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/core/TensorBody.h:303:30: note: declared here\n",
            "     DeprecatedTypeProperties & type() const {\n",
            "                                ^~~~\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/c10/core/DeviceType.h:8:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/c10/core/Device.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/c10/core/Allocator.h:6,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:7,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/layer_norm_cuda.cpp:1:\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:301:42: warning: ‘at::DeprecatedTypeProperties& at::Tensor::type() const’ is deprecated: Tensor.type() is deprecated. Instead use Tensor.options(), which in many cases (e.g. in a constructor) is a drop-in replacement. If you were using data from type(), that is now available from Tensor itself, so instead of tensor.type().scalar_type(), use tensor.scalar_type() instead and instead of tensor.type().backend() use tensor.device(). [-Wdeprecated-declarations]\n",
            "   #define CHECK_CUDA(x) TORCH_CHECK(x.type().is_cuda(), #x \" must be a CUDA tensor\")\n",
            "                                            ^\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/c10/macros/Macros.h:173:65: note: in definition of macro ‘C10_UNLIKELY’\n",
            "   #define C10_UNLIKELY(expr)  (__builtin_expect(static_cast<bool>(expr), 0))\n",
            "                                                                   ^~~~\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/c10/util/Exception.h:362:7: note: in expansion of macro ‘C10_UNLIKELY_OR_CONST’\n",
            "     if (C10_UNLIKELY_OR_CONST(!(cond))) {                                 \\\n",
            "         ^~~~~~~~~~~~~~~~~~~~~\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:301:23: note: in expansion of macro ‘TORCH_CHECK’\n",
            "   #define CHECK_CUDA(x) TORCH_CHECK(x.type().is_cuda(), #x \" must be a CUDA tensor\")\n",
            "                         ^~~~~~~~~~~\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:303:24: note: in expansion of macro ‘CHECK_CUDA’\n",
            "   #define CHECK_INPUT(x) CHECK_CUDA(x); CHECK_CONTIGUOUS(x)\n",
            "                          ^~~~~~~~~~\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:392:3: note: in expansion of macro ‘CHECK_INPUT’\n",
            "     CHECK_INPUT(input);\n",
            "     ^\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Tensor.h:3:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Context.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:9,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/layer_norm_cuda.cpp:1:\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/core/TensorBody.h:303:30: note: declared here\n",
            "     DeprecatedTypeProperties & type() const {\n",
            "                                ^~~~\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/c10/core/DeviceType.h:8:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/c10/core/Device.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/c10/core/Allocator.h:6,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:7,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/layer_norm_cuda.cpp:1:\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp: In function ‘std::vector<at::Tensor> rms_norm_gradient_affine(at::Tensor, at::Tensor, at::Tensor, c10::IntArrayRef, at::Tensor, double)’:\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:301:42: warning: ‘at::DeprecatedTypeProperties& at::Tensor::type() const’ is deprecated: Tensor.type() is deprecated. Instead use Tensor.options(), which in many cases (e.g. in a constructor) is a drop-in replacement. If you were using data from type(), that is now available from Tensor itself, so instead of tensor.type().scalar_type(), use tensor.scalar_type() instead and instead of tensor.type().backend() use tensor.device(). [-Wdeprecated-declarations]\n",
            "   #define CHECK_CUDA(x) TORCH_CHECK(x.type().is_cuda(), #x \" must be a CUDA tensor\")\n",
            "                                            ^\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/c10/macros/Macros.h:173:65: note: in definition of macro ‘C10_UNLIKELY’\n",
            "   #define C10_UNLIKELY(expr)  (__builtin_expect(static_cast<bool>(expr), 0))\n",
            "                                                                   ^~~~\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/c10/util/Exception.h:362:7: note: in expansion of macro ‘C10_UNLIKELY_OR_CONST’\n",
            "     if (C10_UNLIKELY_OR_CONST(!(cond))) {                                 \\\n",
            "         ^~~~~~~~~~~~~~~~~~~~~\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:301:23: note: in expansion of macro ‘TORCH_CHECK’\n",
            "   #define CHECK_CUDA(x) TORCH_CHECK(x.type().is_cuda(), #x \" must be a CUDA tensor\")\n",
            "                         ^~~~~~~~~~~\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:303:24: note: in expansion of macro ‘CHECK_CUDA’\n",
            "   #define CHECK_INPUT(x) CHECK_CUDA(x); CHECK_CONTIGUOUS(x)\n",
            "                          ^~~~~~~~~~\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:413:3: note: in expansion of macro ‘CHECK_INPUT’\n",
            "     CHECK_INPUT(dout);\n",
            "     ^\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Tensor.h:3:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Context.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:9,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/layer_norm_cuda.cpp:1:\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/core/TensorBody.h:303:30: note: declared here\n",
            "     DeprecatedTypeProperties & type() const {\n",
            "                                ^~~~\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/c10/core/DeviceType.h:8:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/c10/core/Device.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/c10/core/Allocator.h:6,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:7,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/layer_norm_cuda.cpp:1:\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:301:42: warning: ‘at::DeprecatedTypeProperties& at::Tensor::type() const’ is deprecated: Tensor.type() is deprecated. Instead use Tensor.options(), which in many cases (e.g. in a constructor) is a drop-in replacement. If you were using data from type(), that is now available from Tensor itself, so instead of tensor.type().scalar_type(), use tensor.scalar_type() instead and instead of tensor.type().backend() use tensor.device(). [-Wdeprecated-declarations]\n",
            "   #define CHECK_CUDA(x) TORCH_CHECK(x.type().is_cuda(), #x \" must be a CUDA tensor\")\n",
            "                                            ^\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/c10/macros/Macros.h:173:65: note: in definition of macro ‘C10_UNLIKELY’\n",
            "   #define C10_UNLIKELY(expr)  (__builtin_expect(static_cast<bool>(expr), 0))\n",
            "                                                                   ^~~~\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/c10/util/Exception.h:362:7: note: in expansion of macro ‘C10_UNLIKELY_OR_CONST’\n",
            "     if (C10_UNLIKELY_OR_CONST(!(cond))) {                                 \\\n",
            "         ^~~~~~~~~~~~~~~~~~~~~\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:301:23: note: in expansion of macro ‘TORCH_CHECK’\n",
            "   #define CHECK_CUDA(x) TORCH_CHECK(x.type().is_cuda(), #x \" must be a CUDA tensor\")\n",
            "                         ^~~~~~~~~~~\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:303:24: note: in expansion of macro ‘CHECK_CUDA’\n",
            "   #define CHECK_INPUT(x) CHECK_CUDA(x); CHECK_CONTIGUOUS(x)\n",
            "                          ^~~~~~~~~~\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:414:3: note: in expansion of macro ‘CHECK_INPUT’\n",
            "     CHECK_INPUT(invvar);\n",
            "     ^\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Tensor.h:3:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Context.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:9,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/layer_norm_cuda.cpp:1:\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/core/TensorBody.h:303:30: note: declared here\n",
            "     DeprecatedTypeProperties & type() const {\n",
            "                                ^~~~\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/c10/core/DeviceType.h:8:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/c10/core/Device.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/c10/core/Allocator.h:6,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:7,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/layer_norm_cuda.cpp:1:\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:301:42: warning: ‘at::DeprecatedTypeProperties& at::Tensor::type() const’ is deprecated: Tensor.type() is deprecated. Instead use Tensor.options(), which in many cases (e.g. in a constructor) is a drop-in replacement. If you were using data from type(), that is now available from Tensor itself, so instead of tensor.type().scalar_type(), use tensor.scalar_type() instead and instead of tensor.type().backend() use tensor.device(). [-Wdeprecated-declarations]\n",
            "   #define CHECK_CUDA(x) TORCH_CHECK(x.type().is_cuda(), #x \" must be a CUDA tensor\")\n",
            "                                            ^\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/c10/macros/Macros.h:173:65: note: in definition of macro ‘C10_UNLIKELY’\n",
            "   #define C10_UNLIKELY(expr)  (__builtin_expect(static_cast<bool>(expr), 0))\n",
            "                                                                   ^~~~\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/c10/util/Exception.h:362:7: note: in expansion of macro ‘C10_UNLIKELY_OR_CONST’\n",
            "     if (C10_UNLIKELY_OR_CONST(!(cond))) {                                 \\\n",
            "         ^~~~~~~~~~~~~~~~~~~~~\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:301:23: note: in expansion of macro ‘TORCH_CHECK’\n",
            "   #define CHECK_CUDA(x) TORCH_CHECK(x.type().is_cuda(), #x \" must be a CUDA tensor\")\n",
            "                         ^~~~~~~~~~~\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:303:24: note: in expansion of macro ‘CHECK_CUDA’\n",
            "   #define CHECK_INPUT(x) CHECK_CUDA(x); CHECK_CONTIGUOUS(x)\n",
            "                          ^~~~~~~~~~\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:415:3: note: in expansion of macro ‘CHECK_INPUT’\n",
            "     CHECK_INPUT(input);\n",
            "     ^\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Tensor.h:3:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Context.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:9,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/layer_norm_cuda.cpp:1:\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/core/TensorBody.h:303:30: note: declared here\n",
            "     DeprecatedTypeProperties & type() const {\n",
            "                                ^~~~\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/c10/core/DeviceType.h:8:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/c10/core/Device.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/c10/core/Allocator.h:6,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:7,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/layer_norm_cuda.cpp:1:\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:301:42: warning: ‘at::DeprecatedTypeProperties& at::Tensor::type() const’ is deprecated: Tensor.type() is deprecated. Instead use Tensor.options(), which in many cases (e.g. in a constructor) is a drop-in replacement. If you were using data from type(), that is now available from Tensor itself, so instead of tensor.type().scalar_type(), use tensor.scalar_type() instead and instead of tensor.type().backend() use tensor.device(). [-Wdeprecated-declarations]\n",
            "   #define CHECK_CUDA(x) TORCH_CHECK(x.type().is_cuda(), #x \" must be a CUDA tensor\")\n",
            "                                            ^\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/c10/macros/Macros.h:173:65: note: in definition of macro ‘C10_UNLIKELY’\n",
            "   #define C10_UNLIKELY(expr)  (__builtin_expect(static_cast<bool>(expr), 0))\n",
            "                                                                   ^~~~\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/c10/util/Exception.h:362:7: note: in expansion of macro ‘C10_UNLIKELY_OR_CONST’\n",
            "     if (C10_UNLIKELY_OR_CONST(!(cond))) {                                 \\\n",
            "         ^~~~~~~~~~~~~~~~~~~~~\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:301:23: note: in expansion of macro ‘TORCH_CHECK’\n",
            "   #define CHECK_CUDA(x) TORCH_CHECK(x.type().is_cuda(), #x \" must be a CUDA tensor\")\n",
            "                         ^~~~~~~~~~~\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:303:24: note: in expansion of macro ‘CHECK_CUDA’\n",
            "   #define CHECK_INPUT(x) CHECK_CUDA(x); CHECK_CONTIGUOUS(x)\n",
            "                          ^~~~~~~~~~\n",
            "  /content/apex/csrc/layer_norm_cuda.cpp:416:3: note: in expansion of macro ‘CHECK_INPUT’\n",
            "     CHECK_INPUT(gamma);\n",
            "     ^\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Tensor.h:3:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Context.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:9,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/layer_norm_cuda.cpp:1:\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/core/TensorBody.h:303:30: note: declared here\n",
            "     DeprecatedTypeProperties & type() const {\n",
            "                                ^~~~\n",
            "  x86_64-linux-gnu-g++ -pthread -shared -Wl,-O1 -Wl,-Bsymbolic-functions -Wl,-Bsymbolic-functions -Wl,-z,relro -Wl,-Bsymbolic-functions -Wl,-z,relro -g -fdebug-prefix-map=/build/python3.7-pX47U3/python3.7-3.7.12=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 /content/apex/build/temp.linux-x86_64-3.7/csrc/layer_norm_cuda.o /content/apex/build/temp.linux-x86_64-3.7/csrc/layer_norm_cuda_kernel.o -L/usr/local/lib/python3.7/dist-packages/torch/lib -L/usr/local/cuda/lib64 -lc10 -ltorch -ltorch_cpu -ltorch_python -lcudart -lc10_cuda -ltorch_cuda_cu -ltorch_cuda_cpp -o build/lib.linux-x86_64-3.7/fused_layer_norm_cuda.cpython-37m-x86_64-linux-gnu.so\n",
            "  building 'mlp_cuda' extension\n",
            "  Emitting ninja build file /content/apex/build/temp.linux-x86_64-3.7/build.ninja...\n",
            "  Compiling objects...\n",
            "  Allowing ninja to set a default number of workers... (overridable by setting the environment variable MAX_JOBS=N)\n",
            "  [1/2] c++ -MMD -MF /content/apex/build/temp.linux-x86_64-3.7/csrc/mlp.o.d -pthread -Wno-unused-result -Wsign-compare -DNDEBUG -g -fwrapv -O2 -Wall -g -fdebug-prefix-map=/build/python3.7-pX47U3/python3.7-3.7.12=. -fstack-protector-strong -Wformat -Werror=format-security -g -fdebug-prefix-map=/build/python3.7-pX47U3/python3.7-3.7.12=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fPIC -I/usr/local/lib/python3.7/dist-packages/torch/include -I/usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include -I/usr/local/lib/python3.7/dist-packages/torch/include/TH -I/usr/local/lib/python3.7/dist-packages/torch/include/THC -I/usr/local/cuda/include -I/usr/include/python3.7m -c -c /content/apex/csrc/mlp.cpp -o /content/apex/build/temp.linux-x86_64-3.7/csrc/mlp.o -O3 -DVERSION_GE_1_1 -DVERSION_GE_1_3 -DVERSION_GE_1_5 -DTORCH_API_INCLUDE_EXTENSION_H '-DPYBIND11_COMPILER_TYPE=\"_gcc\"' '-DPYBIND11_STDLIB=\"_libstdcpp\"' '-DPYBIND11_BUILD_ABI=\"_cxxabi1011\"' -DTORCH_EXTENSION_NAME=mlp_cuda -D_GLIBCXX_USE_CXX11_ABI=0 -std=c++14\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Parallel.h:140:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/utils.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/nn/cloneable.h:5,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/nn.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:13,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/mlp.cpp:1:\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ParallelOpenMP.h:83:0: warning: ignoring #pragma omp parallel [-Wunknown-pragmas]\n",
            "   #pragma omp parallel for if ((end - begin) >= grain_size)\n",
            "\n",
            "  /content/apex/csrc/mlp.cpp: In function ‘std::vector<at::Tensor> mlp_forward(int, int, std::vector<at::Tensor>)’:\n",
            "  /content/apex/csrc/mlp.cpp:57:21: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]\n",
            "     for (int i = 0; i < num_layers; i++) {\n",
            "                     ~~^~~~~~~~~~~~\n",
            "  /content/apex/csrc/mlp.cpp:64:77: warning: ‘at::DeprecatedTypeProperties& at::Tensor::type() const’ is deprecated: Tensor.type() is deprecated. Instead use Tensor.options(), which in many cases (e.g. in a constructor) is a drop-in replacement. If you were using data from type(), that is now available from Tensor itself, so instead of tensor.type().scalar_type(), use tensor.scalar_type() instead and instead of tensor.type().backend() use tensor.device(). [-Wdeprecated-declarations]\n",
            "     auto out = at::empty({batch_size, output_features.back()}, inputs[0].type());\n",
            "                                                                               ^\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Tensor.h:3:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Context.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:9,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/mlp.cpp:1:\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/core/TensorBody.h:303:30: note: declared here\n",
            "     DeprecatedTypeProperties & type() const {\n",
            "                                ^~~~\n",
            "  /content/apex/csrc/mlp.cpp:65:86: warning: ‘at::DeprecatedTypeProperties& at::Tensor::type() const’ is deprecated: Tensor.type() is deprecated. Instead use Tensor.options(), which in many cases (e.g. in a constructor) is a drop-in replacement. If you were using data from type(), that is now available from Tensor itself, so instead of tensor.type().scalar_type(), use tensor.scalar_type() instead and instead of tensor.type().backend() use tensor.device(). [-Wdeprecated-declarations]\n",
            "     auto reserved_space = at::empty({static_cast<long>(reserved_size)}, inputs[0].type());\n",
            "                                                                                        ^\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Tensor.h:3:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Context.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:9,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/mlp.cpp:1:\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/core/TensorBody.h:303:30: note: declared here\n",
            "     DeprecatedTypeProperties & type() const {\n",
            "                                ^~~~\n",
            "  /content/apex/csrc/mlp.cpp:67:59: warning: ‘at::DeprecatedTypeProperties& at::Tensor::type() const’ is deprecated: Tensor.type() is deprecated. Instead use Tensor.options(), which in many cases (e.g. in a constructor) is a drop-in replacement. If you were using data from type(), that is now available from Tensor itself, so instead of tensor.type().scalar_type(), use tensor.scalar_type() instead and instead of tensor.type().backend() use tensor.device(). [-Wdeprecated-declarations]\n",
            "     auto lt_workspace = at::empty({1 << 22}, inputs[0].type());\n",
            "                                                             ^\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Tensor.h:3:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Context.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:9,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/mlp.cpp:1:\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/core/TensorBody.h:303:30: note: declared here\n",
            "     DeprecatedTypeProperties & type() const {\n",
            "                                ^~~~\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:13:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/mlp.cpp:1:\n",
            "  /content/apex/csrc/mlp.cpp: In lambda function:\n",
            "  /content/apex/csrc/mlp.cpp:69:54: warning: ‘at::DeprecatedTypeProperties& at::Tensor::type() const’ is deprecated: Tensor.type() is deprecated. Instead use Tensor.options(), which in many cases (e.g. in a constructor) is a drop-in replacement. If you were using data from type(), that is now available from Tensor itself, so instead of tensor.type().scalar_type(), use tensor.scalar_type() instead and instead of tensor.type().backend() use tensor.device(). [-Wdeprecated-declarations]\n",
            "     AT_DISPATCH_FLOATING_TYPES_AND_HALF(inputs[0].type(), \"mlp_forward\", [&] {\n",
            "                                                        ^\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:209:28: note: in definition of macro ‘AT_DISPATCH_FLOATING_TYPES_AND_HALF’\n",
            "       const auto& the_type = TYPE;                                               \\\n",
            "                              ^~~~\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Tensor.h:3:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Context.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:9,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/mlp.cpp:1:\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/core/TensorBody.h:303:30: note: declared here\n",
            "     DeprecatedTypeProperties & type() const {\n",
            "                                ^~~~\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:13:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/mlp.cpp:1:\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:211:56: warning: ‘c10::ScalarType detail::scalar_type(const at::DeprecatedTypeProperties&)’ is deprecated: passing at::DeprecatedTypeProperties to an AT_DISPATCH macro is deprecated, pass an at::ScalarType instead [-Wdeprecated-declarations]\n",
            "       at::ScalarType _st = ::detail::scalar_type(the_type);                      \\\n",
            "                                                          ^\n",
            "  /content/apex/csrc/mlp.cpp:69:3: note: in expansion of macro ‘AT_DISPATCH_FLOATING_TYPES_AND_HALF’\n",
            "     AT_DISPATCH_FLOATING_TYPES_AND_HALF(inputs[0].type(), \"mlp_forward\", [&] {\n",
            "     ^\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:109:23: note: declared here\n",
            "   inline at::ScalarType scalar_type(const at::DeprecatedTypeProperties& t) {\n",
            "                         ^~~~~~~~~~~\n",
            "  /content/apex/csrc/mlp.cpp: In lambda function:\n",
            "  /content/apex/csrc/mlp.cpp:72:23: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]\n",
            "       for (int i = 0; i < num_layers; i++) {\n",
            "                       ~~^~~\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:56:12: note: in definition of macro ‘AT_PRIVATE_CASE_TYPE_USING_HINT’\n",
            "       return __VA_ARGS__();                                                        \\\n",
            "              ^~~~~~~~~~~\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:214:7: note: in expansion of macro ‘AT_PRIVATE_CASE_TYPE’\n",
            "         AT_PRIVATE_CASE_TYPE(NAME, at::ScalarType::Double, double, __VA_ARGS__)  \\\n",
            "         ^~~~~~~~~~~~~~~~~~~~\n",
            "  /content/apex/csrc/mlp.cpp:69:3: note: in expansion of macro ‘AT_DISPATCH_FLOATING_TYPES_AND_HALF’\n",
            "     AT_DISPATCH_FLOATING_TYPES_AND_HALF(inputs[0].type(), \"mlp_forward\", [&] {\n",
            "     ^\n",
            "  /content/apex/csrc/mlp.cpp:78:10: warning: unused variable ‘result’ [-Wunused-variable]\n",
            "       auto result = mlp_fp<scalar_t>(\n",
            "            ^\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:56:12: note: in definition of macro ‘AT_PRIVATE_CASE_TYPE_USING_HINT’\n",
            "       return __VA_ARGS__();                                                        \\\n",
            "              ^~~~~~~~~~~\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:214:7: note: in expansion of macro ‘AT_PRIVATE_CASE_TYPE’\n",
            "         AT_PRIVATE_CASE_TYPE(NAME, at::ScalarType::Double, double, __VA_ARGS__)  \\\n",
            "         ^~~~~~~~~~~~~~~~~~~~\n",
            "  /content/apex/csrc/mlp.cpp:69:3: note: in expansion of macro ‘AT_DISPATCH_FLOATING_TYPES_AND_HALF’\n",
            "     AT_DISPATCH_FLOATING_TYPES_AND_HALF(inputs[0].type(), \"mlp_forward\", [&] {\n",
            "     ^\n",
            "  /content/apex/csrc/mlp.cpp: In lambda function:\n",
            "  /content/apex/csrc/mlp.cpp:72:23: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]\n",
            "       for (int i = 0; i < num_layers; i++) {\n",
            "                       ~~^~~\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:56:12: note: in definition of macro ‘AT_PRIVATE_CASE_TYPE_USING_HINT’\n",
            "       return __VA_ARGS__();                                                        \\\n",
            "              ^~~~~~~~~~~\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:215:7: note: in expansion of macro ‘AT_PRIVATE_CASE_TYPE’\n",
            "         AT_PRIVATE_CASE_TYPE(NAME, at::ScalarType::Float, float, __VA_ARGS__)    \\\n",
            "         ^~~~~~~~~~~~~~~~~~~~\n",
            "  /content/apex/csrc/mlp.cpp:69:3: note: in expansion of macro ‘AT_DISPATCH_FLOATING_TYPES_AND_HALF’\n",
            "     AT_DISPATCH_FLOATING_TYPES_AND_HALF(inputs[0].type(), \"mlp_forward\", [&] {\n",
            "     ^\n",
            "  /content/apex/csrc/mlp.cpp:78:10: warning: unused variable ‘result’ [-Wunused-variable]\n",
            "       auto result = mlp_fp<scalar_t>(\n",
            "            ^\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:56:12: note: in definition of macro ‘AT_PRIVATE_CASE_TYPE_USING_HINT’\n",
            "       return __VA_ARGS__();                                                        \\\n",
            "              ^~~~~~~~~~~\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:215:7: note: in expansion of macro ‘AT_PRIVATE_CASE_TYPE’\n",
            "         AT_PRIVATE_CASE_TYPE(NAME, at::ScalarType::Float, float, __VA_ARGS__)    \\\n",
            "         ^~~~~~~~~~~~~~~~~~~~\n",
            "  /content/apex/csrc/mlp.cpp:69:3: note: in expansion of macro ‘AT_DISPATCH_FLOATING_TYPES_AND_HALF’\n",
            "     AT_DISPATCH_FLOATING_TYPES_AND_HALF(inputs[0].type(), \"mlp_forward\", [&] {\n",
            "     ^\n",
            "  /content/apex/csrc/mlp.cpp: In lambda function:\n",
            "  /content/apex/csrc/mlp.cpp:72:23: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]\n",
            "       for (int i = 0; i < num_layers; i++) {\n",
            "                       ~~^~~\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:56:12: note: in definition of macro ‘AT_PRIVATE_CASE_TYPE_USING_HINT’\n",
            "       return __VA_ARGS__();                                                        \\\n",
            "              ^~~~~~~~~~~\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:216:7: note: in expansion of macro ‘AT_PRIVATE_CASE_TYPE’\n",
            "         AT_PRIVATE_CASE_TYPE(NAME, at::ScalarType::Half, at::Half, __VA_ARGS__)  \\\n",
            "         ^~~~~~~~~~~~~~~~~~~~\n",
            "  /content/apex/csrc/mlp.cpp:69:3: note: in expansion of macro ‘AT_DISPATCH_FLOATING_TYPES_AND_HALF’\n",
            "     AT_DISPATCH_FLOATING_TYPES_AND_HALF(inputs[0].type(), \"mlp_forward\", [&] {\n",
            "     ^\n",
            "  /content/apex/csrc/mlp.cpp:78:10: warning: unused variable ‘result’ [-Wunused-variable]\n",
            "       auto result = mlp_fp<scalar_t>(\n",
            "            ^\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:56:12: note: in definition of macro ‘AT_PRIVATE_CASE_TYPE_USING_HINT’\n",
            "       return __VA_ARGS__();                                                        \\\n",
            "              ^~~~~~~~~~~\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:216:7: note: in expansion of macro ‘AT_PRIVATE_CASE_TYPE’\n",
            "         AT_PRIVATE_CASE_TYPE(NAME, at::ScalarType::Half, at::Half, __VA_ARGS__)  \\\n",
            "         ^~~~~~~~~~~~~~~~~~~~\n",
            "  /content/apex/csrc/mlp.cpp:69:3: note: in expansion of macro ‘AT_DISPATCH_FLOATING_TYPES_AND_HALF’\n",
            "     AT_DISPATCH_FLOATING_TYPES_AND_HALF(inputs[0].type(), \"mlp_forward\", [&] {\n",
            "     ^\n",
            "  /content/apex/csrc/mlp.cpp: In function ‘std::vector<at::Tensor> mlp_backward(int, int, at::Tensor, std::vector<at::Tensor>, std::vector<at::Tensor>)’:\n",
            "  /content/apex/csrc/mlp.cpp:115:21: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]\n",
            "     for (int i = 0; i < num_layers; i++) {\n",
            "                     ~~^~~~~~~~~~~~\n",
            "  /content/apex/csrc/mlp.cpp:120:21: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]\n",
            "     for (int i = 0; i < inputs.size(); i++) {\n",
            "                     ~~^~~~~~~~~~~~~~~\n",
            "  /content/apex/csrc/mlp.cpp:121:67: warning: ‘at::DeprecatedTypeProperties& at::Tensor::type() const’ is deprecated: Tensor.type() is deprecated. Instead use Tensor.options(), which in many cases (e.g. in a constructor) is a drop-in replacement. If you were using data from type(), that is now available from Tensor itself, so instead of tensor.type().scalar_type(), use tensor.scalar_type() instead and instead of tensor.type().backend() use tensor.device(). [-Wdeprecated-declarations]\n",
            "       outputs.push_back(at::empty(inputs[i].sizes(), inputs[i].type()));  // clone for testing now\n",
            "                                                                     ^\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Tensor.h:3:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Context.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:9,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/mlp.cpp:1:\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/core/TensorBody.h:303:30: note: declared here\n",
            "     DeprecatedTypeProperties & type() const {\n",
            "                                ^~~~\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:13:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/mlp.cpp:1:\n",
            "  /content/apex/csrc/mlp.cpp: In lambda function:\n",
            "  /content/apex/csrc/mlp.cpp:124:54: warning: ‘at::DeprecatedTypeProperties& at::Tensor::type() const’ is deprecated: Tensor.type() is deprecated. Instead use Tensor.options(), which in many cases (e.g. in a constructor) is a drop-in replacement. If you were using data from type(), that is now available from Tensor itself, so instead of tensor.type().scalar_type(), use tensor.scalar_type() instead and instead of tensor.type().backend() use tensor.device(). [-Wdeprecated-declarations]\n",
            "     AT_DISPATCH_FLOATING_TYPES_AND_HALF(inputs[0].type(), \"mlp_backward\", [&] {\n",
            "                                                        ^\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:209:28: note: in definition of macro ‘AT_DISPATCH_FLOATING_TYPES_AND_HALF’\n",
            "       const auto& the_type = TYPE;                                               \\\n",
            "                              ^~~~\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Tensor.h:3:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Context.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:9,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/mlp.cpp:1:\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/core/TensorBody.h:303:30: note: declared here\n",
            "     DeprecatedTypeProperties & type() const {\n",
            "                                ^~~~\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:13:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/mlp.cpp:1:\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:211:56: warning: ‘c10::ScalarType detail::scalar_type(const at::DeprecatedTypeProperties&)’ is deprecated: passing at::DeprecatedTypeProperties to an AT_DISPATCH macro is deprecated, pass an at::ScalarType instead [-Wdeprecated-declarations]\n",
            "       at::ScalarType _st = ::detail::scalar_type(the_type);                      \\\n",
            "                                                          ^\n",
            "  /content/apex/csrc/mlp.cpp:124:3: note: in expansion of macro ‘AT_DISPATCH_FLOATING_TYPES_AND_HALF’\n",
            "     AT_DISPATCH_FLOATING_TYPES_AND_HALF(inputs[0].type(), \"mlp_backward\", [&] {\n",
            "     ^\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:109:23: note: declared here\n",
            "   inline at::ScalarType scalar_type(const at::DeprecatedTypeProperties& t) {\n",
            "                         ^~~~~~~~~~~\n",
            "  /content/apex/csrc/mlp.cpp: In lambda function:\n",
            "  /content/apex/csrc/mlp.cpp:126:23: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]\n",
            "       for (int i = 0; i < num_layers; i++) {\n",
            "                       ~~^~~\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:56:12: note: in definition of macro ‘AT_PRIVATE_CASE_TYPE_USING_HINT’\n",
            "       return __VA_ARGS__();                                                        \\\n",
            "              ^~~~~~~~~~~\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:214:7: note: in expansion of macro ‘AT_PRIVATE_CASE_TYPE’\n",
            "         AT_PRIVATE_CASE_TYPE(NAME, at::ScalarType::Double, double, __VA_ARGS__)  \\\n",
            "         ^~~~~~~~~~~~~~~~~~~~\n",
            "  /content/apex/csrc/mlp.cpp:124:3: note: in expansion of macro ‘AT_DISPATCH_FLOATING_TYPES_AND_HALF’\n",
            "     AT_DISPATCH_FLOATING_TYPES_AND_HALF(inputs[0].type(), \"mlp_backward\", [&] {\n",
            "     ^\n",
            "  /content/apex/csrc/mlp.cpp:130:23: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]\n",
            "       for (int i = 0; i < inputs.size(); i++) {\n",
            "                       ~~^~~~~~~~~~~~~~~\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:56:12: note: in definition of macro ‘AT_PRIVATE_CASE_TYPE_USING_HINT’\n",
            "       return __VA_ARGS__();                                                        \\\n",
            "              ^~~~~~~~~~~\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:214:7: note: in expansion of macro ‘AT_PRIVATE_CASE_TYPE’\n",
            "         AT_PRIVATE_CASE_TYPE(NAME, at::ScalarType::Double, double, __VA_ARGS__)  \\\n",
            "         ^~~~~~~~~~~~~~~~~~~~\n",
            "  /content/apex/csrc/mlp.cpp:124:3: note: in expansion of macro ‘AT_DISPATCH_FLOATING_TYPES_AND_HALF’\n",
            "     AT_DISPATCH_FLOATING_TYPES_AND_HALF(inputs[0].type(), \"mlp_backward\", [&] {\n",
            "     ^\n",
            "  /content/apex/csrc/mlp.cpp:138:99: warning: ‘at::DeprecatedTypeProperties& at::Tensor::type() const’ is deprecated: Tensor.type() is deprecated. Instead use Tensor.options(), which in many cases (e.g. in a constructor) is a drop-in replacement. If you were using data from type(), that is now available from Tensor itself, so instead of tensor.type().scalar_type(), use tensor.scalar_type() instead and instead of tensor.type().backend() use tensor.device(). [-Wdeprecated-declarations]\n",
            "       auto work_space = at::empty({static_cast<long>(work_size / sizeof(scalar_t))}, inputs[0].type());\n",
            "                                                                                                     ^\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:56:12: note: in definition of macro ‘AT_PRIVATE_CASE_TYPE_USING_HINT’\n",
            "       return __VA_ARGS__();                                                        \\\n",
            "              ^~~~~~~~~~~\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:214:7: note: in expansion of macro ‘AT_PRIVATE_CASE_TYPE’\n",
            "         AT_PRIVATE_CASE_TYPE(NAME, at::ScalarType::Double, double, __VA_ARGS__)  \\\n",
            "         ^~~~~~~~~~~~~~~~~~~~\n",
            "  /content/apex/csrc/mlp.cpp:124:3: note: in expansion of macro ‘AT_DISPATCH_FLOATING_TYPES_AND_HALF’\n",
            "     AT_DISPATCH_FLOATING_TYPES_AND_HALF(inputs[0].type(), \"mlp_backward\", [&] {\n",
            "     ^\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Tensor.h:3:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Context.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:9,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/mlp.cpp:1:\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/core/TensorBody.h:303:30: note: declared here\n",
            "     DeprecatedTypeProperties & type() const {\n",
            "                                ^~~~\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:13:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/mlp.cpp:1:\n",
            "  /content/apex/csrc/mlp.cpp:140:10: warning: unused variable ‘result’ [-Wunused-variable]\n",
            "       auto result = mlp_bp<scalar_t>(\n",
            "            ^\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:56:12: note: in definition of macro ‘AT_PRIVATE_CASE_TYPE_USING_HINT’\n",
            "       return __VA_ARGS__();                                                        \\\n",
            "              ^~~~~~~~~~~\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:214:7: note: in expansion of macro ‘AT_PRIVATE_CASE_TYPE’\n",
            "         AT_PRIVATE_CASE_TYPE(NAME, at::ScalarType::Double, double, __VA_ARGS__)  \\\n",
            "         ^~~~~~~~~~~~~~~~~~~~\n",
            "  /content/apex/csrc/mlp.cpp:124:3: note: in expansion of macro ‘AT_DISPATCH_FLOATING_TYPES_AND_HALF’\n",
            "     AT_DISPATCH_FLOATING_TYPES_AND_HALF(inputs[0].type(), \"mlp_backward\", [&] {\n",
            "     ^\n",
            "  /content/apex/csrc/mlp.cpp: In lambda function:\n",
            "  /content/apex/csrc/mlp.cpp:126:23: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]\n",
            "       for (int i = 0; i < num_layers; i++) {\n",
            "                       ~~^~~\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:56:12: note: in definition of macro ‘AT_PRIVATE_CASE_TYPE_USING_HINT’\n",
            "       return __VA_ARGS__();                                                        \\\n",
            "              ^~~~~~~~~~~\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:215:7: note: in expansion of macro ‘AT_PRIVATE_CASE_TYPE’\n",
            "         AT_PRIVATE_CASE_TYPE(NAME, at::ScalarType::Float, float, __VA_ARGS__)    \\\n",
            "         ^~~~~~~~~~~~~~~~~~~~\n",
            "  /content/apex/csrc/mlp.cpp:124:3: note: in expansion of macro ‘AT_DISPATCH_FLOATING_TYPES_AND_HALF’\n",
            "     AT_DISPATCH_FLOATING_TYPES_AND_HALF(inputs[0].type(), \"mlp_backward\", [&] {\n",
            "     ^\n",
            "  /content/apex/csrc/mlp.cpp:130:23: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]\n",
            "       for (int i = 0; i < inputs.size(); i++) {\n",
            "                       ~~^~~~~~~~~~~~~~~\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:56:12: note: in definition of macro ‘AT_PRIVATE_CASE_TYPE_USING_HINT’\n",
            "       return __VA_ARGS__();                                                        \\\n",
            "              ^~~~~~~~~~~\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:215:7: note: in expansion of macro ‘AT_PRIVATE_CASE_TYPE’\n",
            "         AT_PRIVATE_CASE_TYPE(NAME, at::ScalarType::Float, float, __VA_ARGS__)    \\\n",
            "         ^~~~~~~~~~~~~~~~~~~~\n",
            "  /content/apex/csrc/mlp.cpp:124:3: note: in expansion of macro ‘AT_DISPATCH_FLOATING_TYPES_AND_HALF’\n",
            "     AT_DISPATCH_FLOATING_TYPES_AND_HALF(inputs[0].type(), \"mlp_backward\", [&] {\n",
            "     ^\n",
            "  /content/apex/csrc/mlp.cpp:138:99: warning: ‘at::DeprecatedTypeProperties& at::Tensor::type() const’ is deprecated: Tensor.type() is deprecated. Instead use Tensor.options(), which in many cases (e.g. in a constructor) is a drop-in replacement. If you were using data from type(), that is now available from Tensor itself, so instead of tensor.type().scalar_type(), use tensor.scalar_type() instead and instead of tensor.type().backend() use tensor.device(). [-Wdeprecated-declarations]\n",
            "       auto work_space = at::empty({static_cast<long>(work_size / sizeof(scalar_t))}, inputs[0].type());\n",
            "                                                                                                     ^\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:56:12: note: in definition of macro ‘AT_PRIVATE_CASE_TYPE_USING_HINT’\n",
            "       return __VA_ARGS__();                                                        \\\n",
            "              ^~~~~~~~~~~\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:215:7: note: in expansion of macro ‘AT_PRIVATE_CASE_TYPE’\n",
            "         AT_PRIVATE_CASE_TYPE(NAME, at::ScalarType::Float, float, __VA_ARGS__)    \\\n",
            "         ^~~~~~~~~~~~~~~~~~~~\n",
            "  /content/apex/csrc/mlp.cpp:124:3: note: in expansion of macro ‘AT_DISPATCH_FLOATING_TYPES_AND_HALF’\n",
            "     AT_DISPATCH_FLOATING_TYPES_AND_HALF(inputs[0].type(), \"mlp_backward\", [&] {\n",
            "     ^\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Tensor.h:3:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Context.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:9,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/mlp.cpp:1:\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/core/TensorBody.h:303:30: note: declared here\n",
            "     DeprecatedTypeProperties & type() const {\n",
            "                                ^~~~\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:13:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/mlp.cpp:1:\n",
            "  /content/apex/csrc/mlp.cpp:140:10: warning: unused variable ‘result’ [-Wunused-variable]\n",
            "       auto result = mlp_bp<scalar_t>(\n",
            "            ^\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:56:12: note: in definition of macro ‘AT_PRIVATE_CASE_TYPE_USING_HINT’\n",
            "       return __VA_ARGS__();                                                        \\\n",
            "              ^~~~~~~~~~~\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:215:7: note: in expansion of macro ‘AT_PRIVATE_CASE_TYPE’\n",
            "         AT_PRIVATE_CASE_TYPE(NAME, at::ScalarType::Float, float, __VA_ARGS__)    \\\n",
            "         ^~~~~~~~~~~~~~~~~~~~\n",
            "  /content/apex/csrc/mlp.cpp:124:3: note: in expansion of macro ‘AT_DISPATCH_FLOATING_TYPES_AND_HALF’\n",
            "     AT_DISPATCH_FLOATING_TYPES_AND_HALF(inputs[0].type(), \"mlp_backward\", [&] {\n",
            "     ^\n",
            "  /content/apex/csrc/mlp.cpp: In lambda function:\n",
            "  /content/apex/csrc/mlp.cpp:126:23: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]\n",
            "       for (int i = 0; i < num_layers; i++) {\n",
            "                       ~~^~~\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:56:12: note: in definition of macro ‘AT_PRIVATE_CASE_TYPE_USING_HINT’\n",
            "       return __VA_ARGS__();                                                        \\\n",
            "              ^~~~~~~~~~~\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:216:7: note: in expansion of macro ‘AT_PRIVATE_CASE_TYPE’\n",
            "         AT_PRIVATE_CASE_TYPE(NAME, at::ScalarType::Half, at::Half, __VA_ARGS__)  \\\n",
            "         ^~~~~~~~~~~~~~~~~~~~\n",
            "  /content/apex/csrc/mlp.cpp:124:3: note: in expansion of macro ‘AT_DISPATCH_FLOATING_TYPES_AND_HALF’\n",
            "     AT_DISPATCH_FLOATING_TYPES_AND_HALF(inputs[0].type(), \"mlp_backward\", [&] {\n",
            "     ^\n",
            "  /content/apex/csrc/mlp.cpp:130:23: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]\n",
            "       for (int i = 0; i < inputs.size(); i++) {\n",
            "                       ~~^~~~~~~~~~~~~~~\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:56:12: note: in definition of macro ‘AT_PRIVATE_CASE_TYPE_USING_HINT’\n",
            "       return __VA_ARGS__();                                                        \\\n",
            "              ^~~~~~~~~~~\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:216:7: note: in expansion of macro ‘AT_PRIVATE_CASE_TYPE’\n",
            "         AT_PRIVATE_CASE_TYPE(NAME, at::ScalarType::Half, at::Half, __VA_ARGS__)  \\\n",
            "         ^~~~~~~~~~~~~~~~~~~~\n",
            "  /content/apex/csrc/mlp.cpp:124:3: note: in expansion of macro ‘AT_DISPATCH_FLOATING_TYPES_AND_HALF’\n",
            "     AT_DISPATCH_FLOATING_TYPES_AND_HALF(inputs[0].type(), \"mlp_backward\", [&] {\n",
            "     ^\n",
            "  /content/apex/csrc/mlp.cpp:138:99: warning: ‘at::DeprecatedTypeProperties& at::Tensor::type() const’ is deprecated: Tensor.type() is deprecated. Instead use Tensor.options(), which in many cases (e.g. in a constructor) is a drop-in replacement. If you were using data from type(), that is now available from Tensor itself, so instead of tensor.type().scalar_type(), use tensor.scalar_type() instead and instead of tensor.type().backend() use tensor.device(). [-Wdeprecated-declarations]\n",
            "       auto work_space = at::empty({static_cast<long>(work_size / sizeof(scalar_t))}, inputs[0].type());\n",
            "                                                                                                     ^\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:56:12: note: in definition of macro ‘AT_PRIVATE_CASE_TYPE_USING_HINT’\n",
            "       return __VA_ARGS__();                                                        \\\n",
            "              ^~~~~~~~~~~\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:216:7: note: in expansion of macro ‘AT_PRIVATE_CASE_TYPE’\n",
            "         AT_PRIVATE_CASE_TYPE(NAME, at::ScalarType::Half, at::Half, __VA_ARGS__)  \\\n",
            "         ^~~~~~~~~~~~~~~~~~~~\n",
            "  /content/apex/csrc/mlp.cpp:124:3: note: in expansion of macro ‘AT_DISPATCH_FLOATING_TYPES_AND_HALF’\n",
            "     AT_DISPATCH_FLOATING_TYPES_AND_HALF(inputs[0].type(), \"mlp_backward\", [&] {\n",
            "     ^\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Tensor.h:3:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Context.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:9,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/mlp.cpp:1:\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/core/TensorBody.h:303:30: note: declared here\n",
            "     DeprecatedTypeProperties & type() const {\n",
            "                                ^~~~\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:13:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/mlp.cpp:1:\n",
            "  /content/apex/csrc/mlp.cpp:140:10: warning: unused variable ‘result’ [-Wunused-variable]\n",
            "       auto result = mlp_bp<scalar_t>(\n",
            "            ^\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:56:12: note: in definition of macro ‘AT_PRIVATE_CASE_TYPE_USING_HINT’\n",
            "       return __VA_ARGS__();                                                        \\\n",
            "              ^~~~~~~~~~~\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:216:7: note: in expansion of macro ‘AT_PRIVATE_CASE_TYPE’\n",
            "         AT_PRIVATE_CASE_TYPE(NAME, at::ScalarType::Half, at::Half, __VA_ARGS__)  \\\n",
            "         ^~~~~~~~~~~~~~~~~~~~\n",
            "  /content/apex/csrc/mlp.cpp:124:3: note: in expansion of macro ‘AT_DISPATCH_FLOATING_TYPES_AND_HALF’\n",
            "     AT_DISPATCH_FLOATING_TYPES_AND_HALF(inputs[0].type(), \"mlp_backward\", [&] {\n",
            "     ^\n",
            "  [2/2] /usr/local/cuda/bin/nvcc --generate-dependencies-with-compile --dependency-output /content/apex/build/temp.linux-x86_64-3.7/csrc/mlp_cuda.o.d -I/usr/local/lib/python3.7/dist-packages/torch/include -I/usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include -I/usr/local/lib/python3.7/dist-packages/torch/include/TH -I/usr/local/lib/python3.7/dist-packages/torch/include/THC -I/usr/local/cuda/include -I/usr/include/python3.7m -c -c /content/apex/csrc/mlp_cuda.cu -o /content/apex/build/temp.linux-x86_64-3.7/csrc/mlp_cuda.o -D__CUDA_NO_HALF_OPERATORS__ -D__CUDA_NO_HALF_CONVERSIONS__ -D__CUDA_NO_BFLOAT16_CONVERSIONS__ -D__CUDA_NO_HALF2_OPERATORS__ --expt-relaxed-constexpr --compiler-options ''\"'\"'-fPIC'\"'\"'' -O3 -DVERSION_GE_1_1 -DVERSION_GE_1_3 -DVERSION_GE_1_5 -DTORCH_API_INCLUDE_EXTENSION_H '-DPYBIND11_COMPILER_TYPE=\"_gcc\"' '-DPYBIND11_STDLIB=\"_libstdcpp\"' '-DPYBIND11_BUILD_ABI=\"_cxxabi1011\"' -DTORCH_EXTENSION_NAME=mlp_cuda -D_GLIBCXX_USE_CXX11_ABI=0 -gencode=arch=compute_75,code=compute_75 -gencode=arch=compute_75,code=sm_75 -std=c++14\n",
            "  x86_64-linux-gnu-g++ -pthread -shared -Wl,-O1 -Wl,-Bsymbolic-functions -Wl,-Bsymbolic-functions -Wl,-z,relro -Wl,-Bsymbolic-functions -Wl,-z,relro -g -fdebug-prefix-map=/build/python3.7-pX47U3/python3.7-3.7.12=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 /content/apex/build/temp.linux-x86_64-3.7/csrc/mlp.o /content/apex/build/temp.linux-x86_64-3.7/csrc/mlp_cuda.o -L/usr/local/lib/python3.7/dist-packages/torch/lib -L/usr/local/cuda/lib64 -lc10 -ltorch -ltorch_cpu -ltorch_python -lcudart -lc10_cuda -ltorch_cuda_cu -ltorch_cuda_cpp -o build/lib.linux-x86_64-3.7/mlp_cuda.cpython-37m-x86_64-linux-gnu.so\n",
            "  building 'fused_dense_cuda' extension\n",
            "  Emitting ninja build file /content/apex/build/temp.linux-x86_64-3.7/build.ninja...\n",
            "  Compiling objects...\n",
            "  Allowing ninja to set a default number of workers... (overridable by setting the environment variable MAX_JOBS=N)\n",
            "  [1/2] c++ -MMD -MF /content/apex/build/temp.linux-x86_64-3.7/csrc/fused_dense.o.d -pthread -Wno-unused-result -Wsign-compare -DNDEBUG -g -fwrapv -O2 -Wall -g -fdebug-prefix-map=/build/python3.7-pX47U3/python3.7-3.7.12=. -fstack-protector-strong -Wformat -Werror=format-security -g -fdebug-prefix-map=/build/python3.7-pX47U3/python3.7-3.7.12=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fPIC -I/usr/local/lib/python3.7/dist-packages/torch/include -I/usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include -I/usr/local/lib/python3.7/dist-packages/torch/include/TH -I/usr/local/lib/python3.7/dist-packages/torch/include/THC -I/usr/local/cuda/include -I/usr/include/python3.7m -c -c /content/apex/csrc/fused_dense.cpp -o /content/apex/build/temp.linux-x86_64-3.7/csrc/fused_dense.o -O3 -DVERSION_GE_1_1 -DVERSION_GE_1_3 -DVERSION_GE_1_5 -DTORCH_API_INCLUDE_EXTENSION_H '-DPYBIND11_COMPILER_TYPE=\"_gcc\"' '-DPYBIND11_STDLIB=\"_libstdcpp\"' '-DPYBIND11_BUILD_ABI=\"_cxxabi1011\"' -DTORCH_EXTENSION_NAME=fused_dense_cuda -D_GLIBCXX_USE_CXX11_ABI=0 -std=c++14\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Parallel.h:140:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/utils.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/nn/cloneable.h:5,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/nn.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:13,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/fused_dense.cpp:1:\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ParallelOpenMP.h:83:0: warning: ignoring #pragma omp parallel [-Wunknown-pragmas]\n",
            "   #pragma omp parallel for if ((end - begin) >= grain_size)\n",
            "\n",
            "  /content/apex/csrc/fused_dense.cpp: In function ‘at::Tensor linear_bias_forward(at::Tensor, at::Tensor, at::Tensor)’:\n",
            "  /content/apex/csrc/fused_dense.cpp:30:63: warning: ‘at::DeprecatedTypeProperties& at::Tensor::type() const’ is deprecated: Tensor.type() is deprecated. Instead use Tensor.options(), which in many cases (e.g. in a constructor) is a drop-in replacement. If you were using data from type(), that is now available from Tensor itself, so instead of tensor.type().scalar_type(), use tensor.scalar_type() instead and instead of tensor.type().backend() use tensor.device(). [-Wdeprecated-declarations]\n",
            "     auto out = at::empty({batch_size, out_features}, input.type());\n",
            "                                                                 ^\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Tensor.h:3:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Context.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:9,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/fused_dense.cpp:1:\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/core/TensorBody.h:303:30: note: declared here\n",
            "     DeprecatedTypeProperties & type() const {\n",
            "                                ^~~~\n",
            "  /content/apex/csrc/fused_dense.cpp:33:55: warning: ‘at::DeprecatedTypeProperties& at::Tensor::type() const’ is deprecated: Tensor.type() is deprecated. Instead use Tensor.options(), which in many cases (e.g. in a constructor) is a drop-in replacement. If you were using data from type(), that is now available from Tensor itself, so instead of tensor.type().scalar_type(), use tensor.scalar_type() instead and instead of tensor.type().backend() use tensor.device(). [-Wdeprecated-declarations]\n",
            "     auto lt_workspace = at::empty({1 << 22}, input.type());\n",
            "                                                         ^\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Tensor.h:3:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Context.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:9,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/fused_dense.cpp:1:\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/core/TensorBody.h:303:30: note: declared here\n",
            "     DeprecatedTypeProperties & type() const {\n",
            "                                ^~~~\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:13:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/fused_dense.cpp:1:\n",
            "  /content/apex/csrc/fused_dense.cpp: In lambda function:\n",
            "  /content/apex/csrc/fused_dense.cpp:35:50: warning: ‘at::DeprecatedTypeProperties& at::Tensor::type() const’ is deprecated: Tensor.type() is deprecated. Instead use Tensor.options(), which in many cases (e.g. in a constructor) is a drop-in replacement. If you were using data from type(), that is now available from Tensor itself, so instead of tensor.type().scalar_type(), use tensor.scalar_type() instead and instead of tensor.type().backend() use tensor.device(). [-Wdeprecated-declarations]\n",
            "     AT_DISPATCH_FLOATING_TYPES_AND_HALF(input.type(), \"linear_bias_forward\", [&] {\n",
            "                                                    ^\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:209:28: note: in definition of macro ‘AT_DISPATCH_FLOATING_TYPES_AND_HALF’\n",
            "       const auto& the_type = TYPE;                                               \\\n",
            "                              ^~~~\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Tensor.h:3:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Context.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:9,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/fused_dense.cpp:1:\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/core/TensorBody.h:303:30: note: declared here\n",
            "     DeprecatedTypeProperties & type() const {\n",
            "                                ^~~~\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:13:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/fused_dense.cpp:1:\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:211:56: warning: ‘c10::ScalarType detail::scalar_type(const at::DeprecatedTypeProperties&)’ is deprecated: passing at::DeprecatedTypeProperties to an AT_DISPATCH macro is deprecated, pass an at::ScalarType instead [-Wdeprecated-declarations]\n",
            "       at::ScalarType _st = ::detail::scalar_type(the_type);                      \\\n",
            "                                                          ^\n",
            "  /content/apex/csrc/fused_dense.cpp:35:3: note: in expansion of macro ‘AT_DISPATCH_FLOATING_TYPES_AND_HALF’\n",
            "     AT_DISPATCH_FLOATING_TYPES_AND_HALF(input.type(), \"linear_bias_forward\", [&] {\n",
            "     ^\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:109:23: note: declared here\n",
            "   inline at::ScalarType scalar_type(const at::DeprecatedTypeProperties& t) {\n",
            "                         ^~~~~~~~~~~\n",
            "  /content/apex/csrc/fused_dense.cpp: In lambda function:\n",
            "  /content/apex/csrc/fused_dense.cpp:37:15: warning: unused variable ‘b_ptr’ [-Wunused-variable]\n",
            "       scalar_t* b_ptr = bias.data_ptr<scalar_t>();\n",
            "                 ^\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:56:12: note: in definition of macro ‘AT_PRIVATE_CASE_TYPE_USING_HINT’\n",
            "       return __VA_ARGS__();                                                        \\\n",
            "              ^~~~~~~~~~~\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:214:7: note: in expansion of macro ‘AT_PRIVATE_CASE_TYPE’\n",
            "         AT_PRIVATE_CASE_TYPE(NAME, at::ScalarType::Double, double, __VA_ARGS__)  \\\n",
            "         ^~~~~~~~~~~~~~~~~~~~\n",
            "  /content/apex/csrc/fused_dense.cpp:35:3: note: in expansion of macro ‘AT_DISPATCH_FLOATING_TYPES_AND_HALF’\n",
            "     AT_DISPATCH_FLOATING_TYPES_AND_HALF(input.type(), \"linear_bias_forward\", [&] {\n",
            "     ^\n",
            "  /content/apex/csrc/fused_dense.cpp:38:10: warning: unused variable ‘result’ [-Wunused-variable]\n",
            "       auto result = linear_bias_forward_cuda<scalar_t>(\n",
            "            ^\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:56:12: note: in definition of macro ‘AT_PRIVATE_CASE_TYPE_USING_HINT’\n",
            "       return __VA_ARGS__();                                                        \\\n",
            "              ^~~~~~~~~~~\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:214:7: note: in expansion of macro ‘AT_PRIVATE_CASE_TYPE’\n",
            "         AT_PRIVATE_CASE_TYPE(NAME, at::ScalarType::Double, double, __VA_ARGS__)  \\\n",
            "         ^~~~~~~~~~~~~~~~~~~~\n",
            "  /content/apex/csrc/fused_dense.cpp:35:3: note: in expansion of macro ‘AT_DISPATCH_FLOATING_TYPES_AND_HALF’\n",
            "     AT_DISPATCH_FLOATING_TYPES_AND_HALF(input.type(), \"linear_bias_forward\", [&] {\n",
            "     ^\n",
            "  /content/apex/csrc/fused_dense.cpp: In lambda function:\n",
            "  /content/apex/csrc/fused_dense.cpp:37:15: warning: unused variable ‘b_ptr’ [-Wunused-variable]\n",
            "       scalar_t* b_ptr = bias.data_ptr<scalar_t>();\n",
            "                 ^\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:56:12: note: in definition of macro ‘AT_PRIVATE_CASE_TYPE_USING_HINT’\n",
            "       return __VA_ARGS__();                                                        \\\n",
            "              ^~~~~~~~~~~\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:215:7: note: in expansion of macro ‘AT_PRIVATE_CASE_TYPE’\n",
            "         AT_PRIVATE_CASE_TYPE(NAME, at::ScalarType::Float, float, __VA_ARGS__)    \\\n",
            "         ^~~~~~~~~~~~~~~~~~~~\n",
            "  /content/apex/csrc/fused_dense.cpp:35:3: note: in expansion of macro ‘AT_DISPATCH_FLOATING_TYPES_AND_HALF’\n",
            "     AT_DISPATCH_FLOATING_TYPES_AND_HALF(input.type(), \"linear_bias_forward\", [&] {\n",
            "     ^\n",
            "  /content/apex/csrc/fused_dense.cpp:38:10: warning: unused variable ‘result’ [-Wunused-variable]\n",
            "       auto result = linear_bias_forward_cuda<scalar_t>(\n",
            "            ^\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:56:12: note: in definition of macro ‘AT_PRIVATE_CASE_TYPE_USING_HINT’\n",
            "       return __VA_ARGS__();                                                        \\\n",
            "              ^~~~~~~~~~~\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:215:7: note: in expansion of macro ‘AT_PRIVATE_CASE_TYPE’\n",
            "         AT_PRIVATE_CASE_TYPE(NAME, at::ScalarType::Float, float, __VA_ARGS__)    \\\n",
            "         ^~~~~~~~~~~~~~~~~~~~\n",
            "  /content/apex/csrc/fused_dense.cpp:35:3: note: in expansion of macro ‘AT_DISPATCH_FLOATING_TYPES_AND_HALF’\n",
            "     AT_DISPATCH_FLOATING_TYPES_AND_HALF(input.type(), \"linear_bias_forward\", [&] {\n",
            "     ^\n",
            "  /content/apex/csrc/fused_dense.cpp: In lambda function:\n",
            "  /content/apex/csrc/fused_dense.cpp:37:15: warning: unused variable ‘b_ptr’ [-Wunused-variable]\n",
            "       scalar_t* b_ptr = bias.data_ptr<scalar_t>();\n",
            "                 ^\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:56:12: note: in definition of macro ‘AT_PRIVATE_CASE_TYPE_USING_HINT’\n",
            "       return __VA_ARGS__();                                                        \\\n",
            "              ^~~~~~~~~~~\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:216:7: note: in expansion of macro ‘AT_PRIVATE_CASE_TYPE’\n",
            "         AT_PRIVATE_CASE_TYPE(NAME, at::ScalarType::Half, at::Half, __VA_ARGS__)  \\\n",
            "         ^~~~~~~~~~~~~~~~~~~~\n",
            "  /content/apex/csrc/fused_dense.cpp:35:3: note: in expansion of macro ‘AT_DISPATCH_FLOATING_TYPES_AND_HALF’\n",
            "     AT_DISPATCH_FLOATING_TYPES_AND_HALF(input.type(), \"linear_bias_forward\", [&] {\n",
            "     ^\n",
            "  /content/apex/csrc/fused_dense.cpp:38:10: warning: unused variable ‘result’ [-Wunused-variable]\n",
            "       auto result = linear_bias_forward_cuda<scalar_t>(\n",
            "            ^\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:56:12: note: in definition of macro ‘AT_PRIVATE_CASE_TYPE_USING_HINT’\n",
            "       return __VA_ARGS__();                                                        \\\n",
            "              ^~~~~~~~~~~\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:216:7: note: in expansion of macro ‘AT_PRIVATE_CASE_TYPE’\n",
            "         AT_PRIVATE_CASE_TYPE(NAME, at::ScalarType::Half, at::Half, __VA_ARGS__)  \\\n",
            "         ^~~~~~~~~~~~~~~~~~~~\n",
            "  /content/apex/csrc/fused_dense.cpp:35:3: note: in expansion of macro ‘AT_DISPATCH_FLOATING_TYPES_AND_HALF’\n",
            "     AT_DISPATCH_FLOATING_TYPES_AND_HALF(input.type(), \"linear_bias_forward\", [&] {\n",
            "     ^\n",
            "  /content/apex/csrc/fused_dense.cpp: In function ‘std::vector<at::Tensor> linear_bias_backward(at::Tensor, at::Tensor, at::Tensor)’:\n",
            "  /content/apex/csrc/fused_dense.cpp:64:69: warning: ‘at::DeprecatedTypeProperties& at::Tensor::type() const’ is deprecated: Tensor.type() is deprecated. Instead use Tensor.options(), which in many cases (e.g. in a constructor) is a drop-in replacement. If you were using data from type(), that is now available from Tensor itself, so instead of tensor.type().scalar_type(), use tensor.scalar_type() instead and instead of tensor.type().backend() use tensor.device(). [-Wdeprecated-declarations]\n",
            "     auto d_weight = at::empty({out_features, in_features}, input.type());\n",
            "                                                                       ^\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Tensor.h:3:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Context.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:9,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/fused_dense.cpp:1:\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/core/TensorBody.h:303:30: note: declared here\n",
            "     DeprecatedTypeProperties & type() const {\n",
            "                                ^~~~\n",
            "  /content/apex/csrc/fused_dense.cpp:68:54: warning: ‘at::DeprecatedTypeProperties& at::Tensor::type() const’ is deprecated: Tensor.type() is deprecated. Instead use Tensor.options(), which in many cases (e.g. in a constructor) is a drop-in replacement. If you were using data from type(), that is now available from Tensor itself, so instead of tensor.type().scalar_type(), use tensor.scalar_type() instead and instead of tensor.type().backend() use tensor.device(). [-Wdeprecated-declarations]\n",
            "     auto d_bias = at::empty({out_features}, input.type());\n",
            "                                                        ^\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Tensor.h:3:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Context.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:9,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/fused_dense.cpp:1:\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/core/TensorBody.h:303:30: note: declared here\n",
            "     DeprecatedTypeProperties & type() const {\n",
            "                                ^~~~\n",
            "  /content/apex/csrc/fused_dense.cpp:70:66: warning: ‘at::DeprecatedTypeProperties& at::Tensor::type() const’ is deprecated: Tensor.type() is deprecated. Instead use Tensor.options(), which in many cases (e.g. in a constructor) is a drop-in replacement. If you were using data from type(), that is now available from Tensor itself, so instead of tensor.type().scalar_type(), use tensor.scalar_type() instead and instead of tensor.type().backend() use tensor.device(). [-Wdeprecated-declarations]\n",
            "     auto d_input = at::empty({batch_size, in_features}, input.type());\n",
            "                                                                    ^\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Tensor.h:3:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Context.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:9,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/fused_dense.cpp:1:\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/core/TensorBody.h:303:30: note: declared here\n",
            "     DeprecatedTypeProperties & type() const {\n",
            "                                ^~~~\n",
            "  /content/apex/csrc/fused_dense.cpp:73:55: warning: ‘at::DeprecatedTypeProperties& at::Tensor::type() const’ is deprecated: Tensor.type() is deprecated. Instead use Tensor.options(), which in many cases (e.g. in a constructor) is a drop-in replacement. If you were using data from type(), that is now available from Tensor itself, so instead of tensor.type().scalar_type(), use tensor.scalar_type() instead and instead of tensor.type().backend() use tensor.device(). [-Wdeprecated-declarations]\n",
            "     auto lt_workspace = at::empty({1 << 22}, input.type());\n",
            "                                                         ^\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Tensor.h:3:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Context.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:9,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/fused_dense.cpp:1:\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/core/TensorBody.h:303:30: note: declared here\n",
            "     DeprecatedTypeProperties & type() const {\n",
            "                                ^~~~\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:13:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/fused_dense.cpp:1:\n",
            "  /content/apex/csrc/fused_dense.cpp: In lambda function:\n",
            "  /content/apex/csrc/fused_dense.cpp:75:50: warning: ‘at::DeprecatedTypeProperties& at::Tensor::type() const’ is deprecated: Tensor.type() is deprecated. Instead use Tensor.options(), which in many cases (e.g. in a constructor) is a drop-in replacement. If you were using data from type(), that is now available from Tensor itself, so instead of tensor.type().scalar_type(), use tensor.scalar_type() instead and instead of tensor.type().backend() use tensor.device(). [-Wdeprecated-declarations]\n",
            "     AT_DISPATCH_FLOATING_TYPES_AND_HALF(input.type(), \"linear_bias_backward\", [&] {\n",
            "                                                    ^\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:209:28: note: in definition of macro ‘AT_DISPATCH_FLOATING_TYPES_AND_HALF’\n",
            "       const auto& the_type = TYPE;                                               \\\n",
            "                              ^~~~\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Tensor.h:3:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Context.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:9,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/fused_dense.cpp:1:\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/core/TensorBody.h:303:30: note: declared here\n",
            "     DeprecatedTypeProperties & type() const {\n",
            "                                ^~~~\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:13:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/fused_dense.cpp:1:\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:211:56: warning: ‘c10::ScalarType detail::scalar_type(const at::DeprecatedTypeProperties&)’ is deprecated: passing at::DeprecatedTypeProperties to an AT_DISPATCH macro is deprecated, pass an at::ScalarType instead [-Wdeprecated-declarations]\n",
            "       at::ScalarType _st = ::detail::scalar_type(the_type);                      \\\n",
            "                                                          ^\n",
            "  /content/apex/csrc/fused_dense.cpp:75:3: note: in expansion of macro ‘AT_DISPATCH_FLOATING_TYPES_AND_HALF’\n",
            "     AT_DISPATCH_FLOATING_TYPES_AND_HALF(input.type(), \"linear_bias_backward\", [&] {\n",
            "     ^\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:109:23: note: declared here\n",
            "   inline at::ScalarType scalar_type(const at::DeprecatedTypeProperties& t) {\n",
            "                         ^~~~~~~~~~~\n",
            "  /content/apex/csrc/fused_dense.cpp: In lambda function:\n",
            "  /content/apex/csrc/fused_dense.cpp:77:15: warning: unused variable ‘d_b_ptr’ [-Wunused-variable]\n",
            "       scalar_t* d_b_ptr = d_bias.data_ptr<scalar_t>();\n",
            "                 ^\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:56:12: note: in definition of macro ‘AT_PRIVATE_CASE_TYPE_USING_HINT’\n",
            "       return __VA_ARGS__();                                                        \\\n",
            "              ^~~~~~~~~~~\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:214:7: note: in expansion of macro ‘AT_PRIVATE_CASE_TYPE’\n",
            "         AT_PRIVATE_CASE_TYPE(NAME, at::ScalarType::Double, double, __VA_ARGS__)  \\\n",
            "         ^~~~~~~~~~~~~~~~~~~~\n",
            "  /content/apex/csrc/fused_dense.cpp:75:3: note: in expansion of macro ‘AT_DISPATCH_FLOATING_TYPES_AND_HALF’\n",
            "     AT_DISPATCH_FLOATING_TYPES_AND_HALF(input.type(), \"linear_bias_backward\", [&] {\n",
            "     ^\n",
            "  /content/apex/csrc/fused_dense.cpp:78:10: warning: unused variable ‘result’ [-Wunused-variable]\n",
            "       auto result = linear_bias_backward_cuda<scalar_t>(\n",
            "            ^\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:56:12: note: in definition of macro ‘AT_PRIVATE_CASE_TYPE_USING_HINT’\n",
            "       return __VA_ARGS__();                                                        \\\n",
            "              ^~~~~~~~~~~\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:214:7: note: in expansion of macro ‘AT_PRIVATE_CASE_TYPE’\n",
            "         AT_PRIVATE_CASE_TYPE(NAME, at::ScalarType::Double, double, __VA_ARGS__)  \\\n",
            "         ^~~~~~~~~~~~~~~~~~~~\n",
            "  /content/apex/csrc/fused_dense.cpp:75:3: note: in expansion of macro ‘AT_DISPATCH_FLOATING_TYPES_AND_HALF’\n",
            "     AT_DISPATCH_FLOATING_TYPES_AND_HALF(input.type(), \"linear_bias_backward\", [&] {\n",
            "     ^\n",
            "  /content/apex/csrc/fused_dense.cpp: In lambda function:\n",
            "  /content/apex/csrc/fused_dense.cpp:77:15: warning: unused variable ‘d_b_ptr’ [-Wunused-variable]\n",
            "       scalar_t* d_b_ptr = d_bias.data_ptr<scalar_t>();\n",
            "                 ^\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:56:12: note: in definition of macro ‘AT_PRIVATE_CASE_TYPE_USING_HINT’\n",
            "       return __VA_ARGS__();                                                        \\\n",
            "              ^~~~~~~~~~~\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:215:7: note: in expansion of macro ‘AT_PRIVATE_CASE_TYPE’\n",
            "         AT_PRIVATE_CASE_TYPE(NAME, at::ScalarType::Float, float, __VA_ARGS__)    \\\n",
            "         ^~~~~~~~~~~~~~~~~~~~\n",
            "  /content/apex/csrc/fused_dense.cpp:75:3: note: in expansion of macro ‘AT_DISPATCH_FLOATING_TYPES_AND_HALF’\n",
            "     AT_DISPATCH_FLOATING_TYPES_AND_HALF(input.type(), \"linear_bias_backward\", [&] {\n",
            "     ^\n",
            "  /content/apex/csrc/fused_dense.cpp:78:10: warning: unused variable ‘result’ [-Wunused-variable]\n",
            "       auto result = linear_bias_backward_cuda<scalar_t>(\n",
            "            ^\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:56:12: note: in definition of macro ‘AT_PRIVATE_CASE_TYPE_USING_HINT’\n",
            "       return __VA_ARGS__();                                                        \\\n",
            "              ^~~~~~~~~~~\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:215:7: note: in expansion of macro ‘AT_PRIVATE_CASE_TYPE’\n",
            "         AT_PRIVATE_CASE_TYPE(NAME, at::ScalarType::Float, float, __VA_ARGS__)    \\\n",
            "         ^~~~~~~~~~~~~~~~~~~~\n",
            "  /content/apex/csrc/fused_dense.cpp:75:3: note: in expansion of macro ‘AT_DISPATCH_FLOATING_TYPES_AND_HALF’\n",
            "     AT_DISPATCH_FLOATING_TYPES_AND_HALF(input.type(), \"linear_bias_backward\", [&] {\n",
            "     ^\n",
            "  /content/apex/csrc/fused_dense.cpp: In lambda function:\n",
            "  /content/apex/csrc/fused_dense.cpp:77:15: warning: unused variable ‘d_b_ptr’ [-Wunused-variable]\n",
            "       scalar_t* d_b_ptr = d_bias.data_ptr<scalar_t>();\n",
            "                 ^\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:56:12: note: in definition of macro ‘AT_PRIVATE_CASE_TYPE_USING_HINT’\n",
            "       return __VA_ARGS__();                                                        \\\n",
            "              ^~~~~~~~~~~\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:216:7: note: in expansion of macro ‘AT_PRIVATE_CASE_TYPE’\n",
            "         AT_PRIVATE_CASE_TYPE(NAME, at::ScalarType::Half, at::Half, __VA_ARGS__)  \\\n",
            "         ^~~~~~~~~~~~~~~~~~~~\n",
            "  /content/apex/csrc/fused_dense.cpp:75:3: note: in expansion of macro ‘AT_DISPATCH_FLOATING_TYPES_AND_HALF’\n",
            "     AT_DISPATCH_FLOATING_TYPES_AND_HALF(input.type(), \"linear_bias_backward\", [&] {\n",
            "     ^\n",
            "  /content/apex/csrc/fused_dense.cpp:78:10: warning: unused variable ‘result’ [-Wunused-variable]\n",
            "       auto result = linear_bias_backward_cuda<scalar_t>(\n",
            "            ^\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:56:12: note: in definition of macro ‘AT_PRIVATE_CASE_TYPE_USING_HINT’\n",
            "       return __VA_ARGS__();                                                        \\\n",
            "              ^~~~~~~~~~~\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:216:7: note: in expansion of macro ‘AT_PRIVATE_CASE_TYPE’\n",
            "         AT_PRIVATE_CASE_TYPE(NAME, at::ScalarType::Half, at::Half, __VA_ARGS__)  \\\n",
            "         ^~~~~~~~~~~~~~~~~~~~\n",
            "  /content/apex/csrc/fused_dense.cpp:75:3: note: in expansion of macro ‘AT_DISPATCH_FLOATING_TYPES_AND_HALF’\n",
            "     AT_DISPATCH_FLOATING_TYPES_AND_HALF(input.type(), \"linear_bias_backward\", [&] {\n",
            "     ^\n",
            "  /content/apex/csrc/fused_dense.cpp: In function ‘std::vector<at::Tensor> linear_gelu_linear_forward(at::Tensor, at::Tensor, at::Tensor, at::Tensor, at::Tensor)’:\n",
            "  /content/apex/csrc/fused_dense.cpp:106:70: warning: ‘at::DeprecatedTypeProperties& at::Tensor::type() const’ is deprecated: Tensor.type() is deprecated. Instead use Tensor.options(), which in many cases (e.g. in a constructor) is a drop-in replacement. If you were using data from type(), that is now available from Tensor itself, so instead of tensor.type().scalar_type(), use tensor.scalar_type() instead and instead of tensor.type().backend() use tensor.device(). [-Wdeprecated-declarations]\n",
            "     auto output1 = at::empty({batch_size, hidden_features}, input.type());\n",
            "                                                                        ^\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Tensor.h:3:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Context.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:9,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/fused_dense.cpp:1:\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/core/TensorBody.h:303:30: note: declared here\n",
            "     DeprecatedTypeProperties & type() const {\n",
            "                                ^~~~\n",
            "  /content/apex/csrc/fused_dense.cpp:107:70: warning: ‘at::DeprecatedTypeProperties& at::Tensor::type() const’ is deprecated: Tensor.type() is deprecated. Instead use Tensor.options(), which in many cases (e.g. in a constructor) is a drop-in replacement. If you were using data from type(), that is now available from Tensor itself, so instead of tensor.type().scalar_type(), use tensor.scalar_type() instead and instead of tensor.type().backend() use tensor.device(). [-Wdeprecated-declarations]\n",
            "     auto gelu_in = at::empty({batch_size, hidden_features}, input.type());\n",
            "                                                                        ^\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Tensor.h:3:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Context.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:9,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/fused_dense.cpp:1:\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/core/TensorBody.h:303:30: note: declared here\n",
            "     DeprecatedTypeProperties & type() const {\n",
            "                                ^~~~\n",
            "  /content/apex/csrc/fused_dense.cpp:108:67: warning: ‘at::DeprecatedTypeProperties& at::Tensor::type() const’ is deprecated: Tensor.type() is deprecated. Instead use Tensor.options(), which in many cases (e.g. in a constructor) is a drop-in replacement. If you were using data from type(), that is now available from Tensor itself, so instead of tensor.type().scalar_type(), use tensor.scalar_type() instead and instead of tensor.type().backend() use tensor.device(). [-Wdeprecated-declarations]\n",
            "     auto output2 = at::empty({batch_size, out_features}, input.type());\n",
            "                                                                     ^\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Tensor.h:3:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Context.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:9,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/fused_dense.cpp:1:\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/core/TensorBody.h:303:30: note: declared here\n",
            "     DeprecatedTypeProperties & type() const {\n",
            "                                ^~~~\n",
            "  /content/apex/csrc/fused_dense.cpp:111:55: warning: ‘at::DeprecatedTypeProperties& at::Tensor::type() const’ is deprecated: Tensor.type() is deprecated. Instead use Tensor.options(), which in many cases (e.g. in a constructor) is a drop-in replacement. If you were using data from type(), that is now available from Tensor itself, so instead of tensor.type().scalar_type(), use tensor.scalar_type() instead and instead of tensor.type().backend() use tensor.device(). [-Wdeprecated-declarations]\n",
            "     auto lt_workspace = at::empty({1 << 22}, input.type());\n",
            "                                                         ^\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Tensor.h:3:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Context.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:9,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/fused_dense.cpp:1:\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/core/TensorBody.h:303:30: note: declared here\n",
            "     DeprecatedTypeProperties & type() const {\n",
            "                                ^~~~\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:13:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/fused_dense.cpp:1:\n",
            "  /content/apex/csrc/fused_dense.cpp: In lambda function:\n",
            "  /content/apex/csrc/fused_dense.cpp:113:50: warning: ‘at::DeprecatedTypeProperties& at::Tensor::type() const’ is deprecated: Tensor.type() is deprecated. Instead use Tensor.options(), which in many cases (e.g. in a constructor) is a drop-in replacement. If you were using data from type(), that is now available from Tensor itself, so instead of tensor.type().scalar_type(), use tensor.scalar_type() instead and instead of tensor.type().backend() use tensor.device(). [-Wdeprecated-declarations]\n",
            "     AT_DISPATCH_FLOATING_TYPES_AND_HALF(input.type(), \"linear_gelu_linear_forward\", [&] {\n",
            "                                                    ^\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:209:28: note: in definition of macro ‘AT_DISPATCH_FLOATING_TYPES_AND_HALF’\n",
            "       const auto& the_type = TYPE;                                               \\\n",
            "                              ^~~~\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Tensor.h:3:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Context.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:9,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/fused_dense.cpp:1:\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/core/TensorBody.h:303:30: note: declared here\n",
            "     DeprecatedTypeProperties & type() const {\n",
            "                                ^~~~\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:13:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/fused_dense.cpp:1:\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:211:56: warning: ‘c10::ScalarType detail::scalar_type(const at::DeprecatedTypeProperties&)’ is deprecated: passing at::DeprecatedTypeProperties to an AT_DISPATCH macro is deprecated, pass an at::ScalarType instead [-Wdeprecated-declarations]\n",
            "       at::ScalarType _st = ::detail::scalar_type(the_type);                      \\\n",
            "                                                          ^\n",
            "  /content/apex/csrc/fused_dense.cpp:113:3: note: in expansion of macro ‘AT_DISPATCH_FLOATING_TYPES_AND_HALF’\n",
            "     AT_DISPATCH_FLOATING_TYPES_AND_HALF(input.type(), \"linear_gelu_linear_forward\", [&] {\n",
            "     ^\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:109:23: note: declared here\n",
            "   inline at::ScalarType scalar_type(const at::DeprecatedTypeProperties& t) {\n",
            "                         ^~~~~~~~~~~\n",
            "  /content/apex/csrc/fused_dense.cpp: In lambda function:\n",
            "  /content/apex/csrc/fused_dense.cpp:118:10: warning: unused variable ‘result’ [-Wunused-variable]\n",
            "       auto result = linear_gelu_linear_forward_cuda<scalar_t>(\n",
            "            ^\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:56:12: note: in definition of macro ‘AT_PRIVATE_CASE_TYPE_USING_HINT’\n",
            "       return __VA_ARGS__();                                                        \\\n",
            "              ^~~~~~~~~~~\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:214:7: note: in expansion of macro ‘AT_PRIVATE_CASE_TYPE’\n",
            "         AT_PRIVATE_CASE_TYPE(NAME, at::ScalarType::Double, double, __VA_ARGS__)  \\\n",
            "         ^~~~~~~~~~~~~~~~~~~~\n",
            "  /content/apex/csrc/fused_dense.cpp:113:3: note: in expansion of macro ‘AT_DISPATCH_FLOATING_TYPES_AND_HALF’\n",
            "     AT_DISPATCH_FLOATING_TYPES_AND_HALF(input.type(), \"linear_gelu_linear_forward\", [&] {\n",
            "     ^\n",
            "  /content/apex/csrc/fused_dense.cpp: In lambda function:\n",
            "  /content/apex/csrc/fused_dense.cpp:118:10: warning: unused variable ‘result’ [-Wunused-variable]\n",
            "       auto result = linear_gelu_linear_forward_cuda<scalar_t>(\n",
            "            ^\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:56:12: note: in definition of macro ‘AT_PRIVATE_CASE_TYPE_USING_HINT’\n",
            "       return __VA_ARGS__();                                                        \\\n",
            "              ^~~~~~~~~~~\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:215:7: note: in expansion of macro ‘AT_PRIVATE_CASE_TYPE’\n",
            "         AT_PRIVATE_CASE_TYPE(NAME, at::ScalarType::Float, float, __VA_ARGS__)    \\\n",
            "         ^~~~~~~~~~~~~~~~~~~~\n",
            "  /content/apex/csrc/fused_dense.cpp:113:3: note: in expansion of macro ‘AT_DISPATCH_FLOATING_TYPES_AND_HALF’\n",
            "     AT_DISPATCH_FLOATING_TYPES_AND_HALF(input.type(), \"linear_gelu_linear_forward\", [&] {\n",
            "     ^\n",
            "  /content/apex/csrc/fused_dense.cpp: In lambda function:\n",
            "  /content/apex/csrc/fused_dense.cpp:118:10: warning: unused variable ‘result’ [-Wunused-variable]\n",
            "       auto result = linear_gelu_linear_forward_cuda<scalar_t>(\n",
            "            ^\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:56:12: note: in definition of macro ‘AT_PRIVATE_CASE_TYPE_USING_HINT’\n",
            "       return __VA_ARGS__();                                                        \\\n",
            "              ^~~~~~~~~~~\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:216:7: note: in expansion of macro ‘AT_PRIVATE_CASE_TYPE’\n",
            "         AT_PRIVATE_CASE_TYPE(NAME, at::ScalarType::Half, at::Half, __VA_ARGS__)  \\\n",
            "         ^~~~~~~~~~~~~~~~~~~~\n",
            "  /content/apex/csrc/fused_dense.cpp:113:3: note: in expansion of macro ‘AT_DISPATCH_FLOATING_TYPES_AND_HALF’\n",
            "     AT_DISPATCH_FLOATING_TYPES_AND_HALF(input.type(), \"linear_gelu_linear_forward\", [&] {\n",
            "     ^\n",
            "  /content/apex/csrc/fused_dense.cpp: In function ‘std::vector<at::Tensor> linear_gelu_linear_backward(at::Tensor, at::Tensor, at::Tensor, at::Tensor, at::Tensor, at::Tensor)’:\n",
            "  /content/apex/csrc/fused_dense.cpp:149:73: warning: ‘at::DeprecatedTypeProperties& at::Tensor::type() const’ is deprecated: Tensor.type() is deprecated. Instead use Tensor.options(), which in many cases (e.g. in a constructor) is a drop-in replacement. If you were using data from type(), that is now available from Tensor itself, so instead of tensor.type().scalar_type(), use tensor.scalar_type() instead and instead of tensor.type().backend() use tensor.device(). [-Wdeprecated-declarations]\n",
            "     auto d_weight1 = at::empty({hidden_features, in_features}, input.type());\n",
            "                                                                           ^\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Tensor.h:3:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Context.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:9,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/fused_dense.cpp:1:\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/core/TensorBody.h:303:30: note: declared here\n",
            "     DeprecatedTypeProperties & type() const {\n",
            "                                ^~~~\n",
            "  /content/apex/csrc/fused_dense.cpp:150:74: warning: ‘at::DeprecatedTypeProperties& at::Tensor::type() const’ is deprecated: Tensor.type() is deprecated. Instead use Tensor.options(), which in many cases (e.g. in a constructor) is a drop-in replacement. If you were using data from type(), that is now available from Tensor itself, so instead of tensor.type().scalar_type(), use tensor.scalar_type() instead and instead of tensor.type().backend() use tensor.device(). [-Wdeprecated-declarations]\n",
            "     auto d_weight2 = at::empty({out_features, hidden_features}, input.type());\n",
            "                                                                            ^\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Tensor.h:3:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Context.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:9,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/fused_dense.cpp:1:\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/core/TensorBody.h:303:30: note: declared here\n",
            "     DeprecatedTypeProperties & type() const {\n",
            "                                ^~~~\n",
            "  /content/apex/csrc/fused_dense.cpp:151:58: warning: ‘at::DeprecatedTypeProperties& at::Tensor::type() const’ is deprecated: Tensor.type() is deprecated. Instead use Tensor.options(), which in many cases (e.g. in a constructor) is a drop-in replacement. If you were using data from type(), that is now available from Tensor itself, so instead of tensor.type().scalar_type(), use tensor.scalar_type() instead and instead of tensor.type().backend() use tensor.device(). [-Wdeprecated-declarations]\n",
            "     auto d_bias1 = at::empty({hidden_features}, input.type());\n",
            "                                                            ^\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Tensor.h:3:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Context.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:9,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/fused_dense.cpp:1:\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/core/TensorBody.h:303:30: note: declared here\n",
            "     DeprecatedTypeProperties & type() const {\n",
            "                                ^~~~\n",
            "  /content/apex/csrc/fused_dense.cpp:152:55: warning: ‘at::DeprecatedTypeProperties& at::Tensor::type() const’ is deprecated: Tensor.type() is deprecated. Instead use Tensor.options(), which in many cases (e.g. in a constructor) is a drop-in replacement. If you were using data from type(), that is now available from Tensor itself, so instead of tensor.type().scalar_type(), use tensor.scalar_type() instead and instead of tensor.type().backend() use tensor.device(). [-Wdeprecated-declarations]\n",
            "     auto d_bias2 = at::empty({out_features}, input.type());\n",
            "                                                         ^\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Tensor.h:3:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Context.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:9,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/fused_dense.cpp:1:\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/core/TensorBody.h:303:30: note: declared here\n",
            "     DeprecatedTypeProperties & type() const {\n",
            "                                ^~~~\n",
            "  /content/apex/csrc/fused_dense.cpp:153:66: warning: ‘at::DeprecatedTypeProperties& at::Tensor::type() const’ is deprecated: Tensor.type() is deprecated. Instead use Tensor.options(), which in many cases (e.g. in a constructor) is a drop-in replacement. If you were using data from type(), that is now available from Tensor itself, so instead of tensor.type().scalar_type(), use tensor.scalar_type() instead and instead of tensor.type().backend() use tensor.device(). [-Wdeprecated-declarations]\n",
            "     auto d_input = at::empty({batch_size, in_features}, input.type());\n",
            "                                                                    ^\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Tensor.h:3:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Context.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:9,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/fused_dense.cpp:1:\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/core/TensorBody.h:303:30: note: declared here\n",
            "     DeprecatedTypeProperties & type() const {\n",
            "                                ^~~~\n",
            "  /content/apex/csrc/fused_dense.cpp:154:72: warning: ‘at::DeprecatedTypeProperties& at::Tensor::type() const’ is deprecated: Tensor.type() is deprecated. Instead use Tensor.options(), which in many cases (e.g. in a constructor) is a drop-in replacement. If you were using data from type(), that is now available from Tensor itself, so instead of tensor.type().scalar_type(), use tensor.scalar_type() instead and instead of tensor.type().backend() use tensor.device(). [-Wdeprecated-declarations]\n",
            "     auto d_output1 = at::empty({batch_size, hidden_features}, input.type());\n",
            "                                                                          ^\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Tensor.h:3:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Context.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:9,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/fused_dense.cpp:1:\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/core/TensorBody.h:303:30: note: declared here\n",
            "     DeprecatedTypeProperties & type() const {\n",
            "                                ^~~~\n",
            "  /content/apex/csrc/fused_dense.cpp:157:55: warning: ‘at::DeprecatedTypeProperties& at::Tensor::type() const’ is deprecated: Tensor.type() is deprecated. Instead use Tensor.options(), which in many cases (e.g. in a constructor) is a drop-in replacement. If you were using data from type(), that is now available from Tensor itself, so instead of tensor.type().scalar_type(), use tensor.scalar_type() instead and instead of tensor.type().backend() use tensor.device(). [-Wdeprecated-declarations]\n",
            "     auto lt_workspace = at::empty({1 << 22}, input.type());\n",
            "                                                         ^\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Tensor.h:3:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Context.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:9,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/fused_dense.cpp:1:\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/core/TensorBody.h:303:30: note: declared here\n",
            "     DeprecatedTypeProperties & type() const {\n",
            "                                ^~~~\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:13:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/fused_dense.cpp:1:\n",
            "  /content/apex/csrc/fused_dense.cpp: In lambda function:\n",
            "  /content/apex/csrc/fused_dense.cpp:159:50: warning: ‘at::DeprecatedTypeProperties& at::Tensor::type() const’ is deprecated: Tensor.type() is deprecated. Instead use Tensor.options(), which in many cases (e.g. in a constructor) is a drop-in replacement. If you were using data from type(), that is now available from Tensor itself, so instead of tensor.type().scalar_type(), use tensor.scalar_type() instead and instead of tensor.type().backend() use tensor.device(). [-Wdeprecated-declarations]\n",
            "     AT_DISPATCH_FLOATING_TYPES_AND_HALF(input.type(), \"linear_bias_backward\", [&] {\n",
            "                                                    ^\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:209:28: note: in definition of macro ‘AT_DISPATCH_FLOATING_TYPES_AND_HALF’\n",
            "       const auto& the_type = TYPE;                                               \\\n",
            "                              ^~~~\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Tensor.h:3:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Context.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:9,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/fused_dense.cpp:1:\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/core/TensorBody.h:303:30: note: declared here\n",
            "     DeprecatedTypeProperties & type() const {\n",
            "                                ^~~~\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ATen.h:13:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/types.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/data.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:8,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/fused_dense.cpp:1:\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:211:56: warning: ‘c10::ScalarType detail::scalar_type(const at::DeprecatedTypeProperties&)’ is deprecated: passing at::DeprecatedTypeProperties to an AT_DISPATCH macro is deprecated, pass an at::ScalarType instead [-Wdeprecated-declarations]\n",
            "       at::ScalarType _st = ::detail::scalar_type(the_type);                      \\\n",
            "                                                          ^\n",
            "  /content/apex/csrc/fused_dense.cpp:159:3: note: in expansion of macro ‘AT_DISPATCH_FLOATING_TYPES_AND_HALF’\n",
            "     AT_DISPATCH_FLOATING_TYPES_AND_HALF(input.type(), \"linear_bias_backward\", [&] {\n",
            "     ^\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:109:23: note: declared here\n",
            "   inline at::ScalarType scalar_type(const at::DeprecatedTypeProperties& t) {\n",
            "                         ^~~~~~~~~~~\n",
            "  /content/apex/csrc/fused_dense.cpp: In lambda function:\n",
            "  /content/apex/csrc/fused_dense.cpp:162:10: warning: unused variable ‘result’ [-Wunused-variable]\n",
            "       auto result = linear_gelu_linear_backward_cuda<scalar_t>(\n",
            "            ^\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:56:12: note: in definition of macro ‘AT_PRIVATE_CASE_TYPE_USING_HINT’\n",
            "       return __VA_ARGS__();                                                        \\\n",
            "              ^~~~~~~~~~~\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:214:7: note: in expansion of macro ‘AT_PRIVATE_CASE_TYPE’\n",
            "         AT_PRIVATE_CASE_TYPE(NAME, at::ScalarType::Double, double, __VA_ARGS__)  \\\n",
            "         ^~~~~~~~~~~~~~~~~~~~\n",
            "  /content/apex/csrc/fused_dense.cpp:159:3: note: in expansion of macro ‘AT_DISPATCH_FLOATING_TYPES_AND_HALF’\n",
            "     AT_DISPATCH_FLOATING_TYPES_AND_HALF(input.type(), \"linear_bias_backward\", [&] {\n",
            "     ^\n",
            "  /content/apex/csrc/fused_dense.cpp: In lambda function:\n",
            "  /content/apex/csrc/fused_dense.cpp:162:10: warning: unused variable ‘result’ [-Wunused-variable]\n",
            "       auto result = linear_gelu_linear_backward_cuda<scalar_t>(\n",
            "            ^\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:56:12: note: in definition of macro ‘AT_PRIVATE_CASE_TYPE_USING_HINT’\n",
            "       return __VA_ARGS__();                                                        \\\n",
            "              ^~~~~~~~~~~\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:215:7: note: in expansion of macro ‘AT_PRIVATE_CASE_TYPE’\n",
            "         AT_PRIVATE_CASE_TYPE(NAME, at::ScalarType::Float, float, __VA_ARGS__)    \\\n",
            "         ^~~~~~~~~~~~~~~~~~~~\n",
            "  /content/apex/csrc/fused_dense.cpp:159:3: note: in expansion of macro ‘AT_DISPATCH_FLOATING_TYPES_AND_HALF’\n",
            "     AT_DISPATCH_FLOATING_TYPES_AND_HALF(input.type(), \"linear_bias_backward\", [&] {\n",
            "     ^\n",
            "  /content/apex/csrc/fused_dense.cpp: In lambda function:\n",
            "  /content/apex/csrc/fused_dense.cpp:162:10: warning: unused variable ‘result’ [-Wunused-variable]\n",
            "       auto result = linear_gelu_linear_backward_cuda<scalar_t>(\n",
            "            ^\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:56:12: note: in definition of macro ‘AT_PRIVATE_CASE_TYPE_USING_HINT’\n",
            "       return __VA_ARGS__();                                                        \\\n",
            "              ^~~~~~~~~~~\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Dispatch.h:216:7: note: in expansion of macro ‘AT_PRIVATE_CASE_TYPE’\n",
            "         AT_PRIVATE_CASE_TYPE(NAME, at::ScalarType::Half, at::Half, __VA_ARGS__)  \\\n",
            "         ^~~~~~~~~~~~~~~~~~~~\n",
            "  /content/apex/csrc/fused_dense.cpp:159:3: note: in expansion of macro ‘AT_DISPATCH_FLOATING_TYPES_AND_HALF’\n",
            "     AT_DISPATCH_FLOATING_TYPES_AND_HALF(input.type(), \"linear_bias_backward\", [&] {\n",
            "     ^\n",
            "  [2/2] /usr/local/cuda/bin/nvcc --generate-dependencies-with-compile --dependency-output /content/apex/build/temp.linux-x86_64-3.7/csrc/fused_dense_cuda.o.d -I/usr/local/lib/python3.7/dist-packages/torch/include -I/usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include -I/usr/local/lib/python3.7/dist-packages/torch/include/TH -I/usr/local/lib/python3.7/dist-packages/torch/include/THC -I/usr/local/cuda/include -I/usr/include/python3.7m -c -c /content/apex/csrc/fused_dense_cuda.cu -o /content/apex/build/temp.linux-x86_64-3.7/csrc/fused_dense_cuda.o -D__CUDA_NO_HALF_OPERATORS__ -D__CUDA_NO_HALF_CONVERSIONS__ -D__CUDA_NO_BFLOAT16_CONVERSIONS__ -D__CUDA_NO_HALF2_OPERATORS__ --expt-relaxed-constexpr --compiler-options ''\"'\"'-fPIC'\"'\"'' -O3 -DVERSION_GE_1_1 -DVERSION_GE_1_3 -DVERSION_GE_1_5 -DTORCH_API_INCLUDE_EXTENSION_H '-DPYBIND11_COMPILER_TYPE=\"_gcc\"' '-DPYBIND11_STDLIB=\"_libstdcpp\"' '-DPYBIND11_BUILD_ABI=\"_cxxabi1011\"' -DTORCH_EXTENSION_NAME=fused_dense_cuda -D_GLIBCXX_USE_CXX11_ABI=0 -gencode=arch=compute_75,code=compute_75 -gencode=arch=compute_75,code=sm_75 -std=c++14\n",
            "  /content/apex/csrc/fused_dense_cuda.cu(1148): warning: variable \"beta_zero\" was declared but never referenced\n",
            "\n",
            "  /content/apex/csrc/fused_dense_cuda.cu(1272): warning: variable \"alpha\" was declared but never referenced\n",
            "\n",
            "  /content/apex/csrc/fused_dense_cuda.cu(1273): warning: variable \"beta_zero\" was declared but never referenced\n",
            "\n",
            "  /content/apex/csrc/fused_dense_cuda.cu(1274): warning: variable \"status\" was declared but never referenced\n",
            "\n",
            "  /content/apex/csrc/fused_dense_cuda.cu(1329): warning: variable \"alpha\" was declared but never referenced\n",
            "\n",
            "  /content/apex/csrc/fused_dense_cuda.cu(1330): warning: variable \"beta_zero\" was declared but never referenced\n",
            "\n",
            "  x86_64-linux-gnu-g++ -pthread -shared -Wl,-O1 -Wl,-Bsymbolic-functions -Wl,-Bsymbolic-functions -Wl,-z,relro -Wl,-Bsymbolic-functions -Wl,-z,relro -g -fdebug-prefix-map=/build/python3.7-pX47U3/python3.7-3.7.12=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 /content/apex/build/temp.linux-x86_64-3.7/csrc/fused_dense.o /content/apex/build/temp.linux-x86_64-3.7/csrc/fused_dense_cuda.o -L/usr/local/lib/python3.7/dist-packages/torch/lib -L/usr/local/cuda/lib64 -lc10 -ltorch -ltorch_cpu -ltorch_python -lcudart -lc10_cuda -ltorch_cuda_cu -ltorch_cuda_cpp -o build/lib.linux-x86_64-3.7/fused_dense_cuda.cpython-37m-x86_64-linux-gnu.so\n",
            "  building 'scaled_upper_triang_masked_softmax_cuda' extension\n",
            "  creating /content/apex/build/temp.linux-x86_64-3.7/csrc/megatron\n",
            "  Emitting ninja build file /content/apex/build/temp.linux-x86_64-3.7/build.ninja...\n",
            "  Compiling objects...\n",
            "  Allowing ninja to set a default number of workers... (overridable by setting the environment variable MAX_JOBS=N)\n",
            "  [1/2] c++ -MMD -MF /content/apex/build/temp.linux-x86_64-3.7/csrc/megatron/scaled_upper_triang_masked_softmax.o.d -pthread -Wno-unused-result -Wsign-compare -DNDEBUG -g -fwrapv -O2 -Wall -g -fdebug-prefix-map=/build/python3.7-pX47U3/python3.7-3.7.12=. -fstack-protector-strong -Wformat -Werror=format-security -g -fdebug-prefix-map=/build/python3.7-pX47U3/python3.7-3.7.12=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fPIC -I/content/apex/csrc -I/usr/local/lib/python3.7/dist-packages/torch/include -I/usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include -I/usr/local/lib/python3.7/dist-packages/torch/include/TH -I/usr/local/lib/python3.7/dist-packages/torch/include/THC -I/usr/local/cuda/include -I/usr/include/python3.7m -c -c /content/apex/csrc/megatron/scaled_upper_triang_masked_softmax.cpp -o /content/apex/build/temp.linux-x86_64-3.7/csrc/megatron/scaled_upper_triang_masked_softmax.o -O3 -DVERSION_GE_1_1 -DVERSION_GE_1_3 -DVERSION_GE_1_5 -DTORCH_API_INCLUDE_EXTENSION_H '-DPYBIND11_COMPILER_TYPE=\"_gcc\"' '-DPYBIND11_STDLIB=\"_libstdcpp\"' '-DPYBIND11_BUILD_ABI=\"_cxxabi1011\"' -DTORCH_EXTENSION_NAME=scaled_upper_triang_masked_softmax_cuda -D_GLIBCXX_USE_CXX11_ABI=0 -std=c++14\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Parallel.h:140:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/utils.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/nn/cloneable.h:5,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/nn.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:13,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/megatron/scaled_upper_triang_masked_softmax.cpp:18:\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ParallelOpenMP.h:83:0: warning: ignoring #pragma omp parallel [-Wunknown-pragmas]\n",
            "   #pragma omp parallel for if ((end - begin) >= grain_size)\n",
            "\n",
            "  [2/2] /usr/local/cuda/bin/nvcc --generate-dependencies-with-compile --dependency-output /content/apex/build/temp.linux-x86_64-3.7/csrc/megatron/scaled_upper_triang_masked_softmax_cuda.o.d -I/content/apex/csrc -I/usr/local/lib/python3.7/dist-packages/torch/include -I/usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include -I/usr/local/lib/python3.7/dist-packages/torch/include/TH -I/usr/local/lib/python3.7/dist-packages/torch/include/THC -I/usr/local/cuda/include -I/usr/include/python3.7m -c -c /content/apex/csrc/megatron/scaled_upper_triang_masked_softmax_cuda.cu -o /content/apex/build/temp.linux-x86_64-3.7/csrc/megatron/scaled_upper_triang_masked_softmax_cuda.o -D__CUDA_NO_HALF_OPERATORS__ -D__CUDA_NO_HALF_CONVERSIONS__ -D__CUDA_NO_BFLOAT16_CONVERSIONS__ -D__CUDA_NO_HALF2_OPERATORS__ --expt-relaxed-constexpr --compiler-options ''\"'\"'-fPIC'\"'\"'' -O3 -U__CUDA_NO_HALF_OPERATORS__ -U__CUDA_NO_HALF_CONVERSIONS__ --expt-relaxed-constexpr --expt-extended-lambda -DVERSION_GE_1_1 -DVERSION_GE_1_3 -DVERSION_GE_1_5 -DTORCH_API_INCLUDE_EXTENSION_H '-DPYBIND11_COMPILER_TYPE=\"_gcc\"' '-DPYBIND11_STDLIB=\"_libstdcpp\"' '-DPYBIND11_BUILD_ABI=\"_cxxabi1011\"' -DTORCH_EXTENSION_NAME=scaled_upper_triang_masked_softmax_cuda -D_GLIBCXX_USE_CXX11_ABI=0 -gencode=arch=compute_75,code=compute_75 -gencode=arch=compute_75,code=sm_75 -std=c++14\n",
            "  x86_64-linux-gnu-g++ -pthread -shared -Wl,-O1 -Wl,-Bsymbolic-functions -Wl,-Bsymbolic-functions -Wl,-z,relro -Wl,-Bsymbolic-functions -Wl,-z,relro -g -fdebug-prefix-map=/build/python3.7-pX47U3/python3.7-3.7.12=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 /content/apex/build/temp.linux-x86_64-3.7/csrc/megatron/scaled_upper_triang_masked_softmax.o /content/apex/build/temp.linux-x86_64-3.7/csrc/megatron/scaled_upper_triang_masked_softmax_cuda.o -L/usr/local/lib/python3.7/dist-packages/torch/lib -L/usr/local/cuda/lib64 -lc10 -ltorch -ltorch_cpu -ltorch_python -lcudart -lc10_cuda -ltorch_cuda_cu -ltorch_cuda_cpp -o build/lib.linux-x86_64-3.7/scaled_upper_triang_masked_softmax_cuda.cpython-37m-x86_64-linux-gnu.so\n",
            "  building 'scaled_masked_softmax_cuda' extension\n",
            "  Emitting ninja build file /content/apex/build/temp.linux-x86_64-3.7/build.ninja...\n",
            "  Compiling objects...\n",
            "  Allowing ninja to set a default number of workers... (overridable by setting the environment variable MAX_JOBS=N)\n",
            "  [1/2] c++ -MMD -MF /content/apex/build/temp.linux-x86_64-3.7/csrc/megatron/scaled_masked_softmax.o.d -pthread -Wno-unused-result -Wsign-compare -DNDEBUG -g -fwrapv -O2 -Wall -g -fdebug-prefix-map=/build/python3.7-pX47U3/python3.7-3.7.12=. -fstack-protector-strong -Wformat -Werror=format-security -g -fdebug-prefix-map=/build/python3.7-pX47U3/python3.7-3.7.12=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fPIC -I/content/apex/csrc -I/usr/local/lib/python3.7/dist-packages/torch/include -I/usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include -I/usr/local/lib/python3.7/dist-packages/torch/include/TH -I/usr/local/lib/python3.7/dist-packages/torch/include/THC -I/usr/local/cuda/include -I/usr/include/python3.7m -c -c /content/apex/csrc/megatron/scaled_masked_softmax.cpp -o /content/apex/build/temp.linux-x86_64-3.7/csrc/megatron/scaled_masked_softmax.o -O3 -DVERSION_GE_1_1 -DVERSION_GE_1_3 -DVERSION_GE_1_5 -DTORCH_API_INCLUDE_EXTENSION_H '-DPYBIND11_COMPILER_TYPE=\"_gcc\"' '-DPYBIND11_STDLIB=\"_libstdcpp\"' '-DPYBIND11_BUILD_ABI=\"_cxxabi1011\"' -DTORCH_EXTENSION_NAME=scaled_masked_softmax_cuda -D_GLIBCXX_USE_CXX11_ABI=0 -std=c++14\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Parallel.h:140:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/utils.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/nn/cloneable.h:5,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/nn.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:13,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/megatron/scaled_masked_softmax.cpp:18:\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ParallelOpenMP.h:83:0: warning: ignoring #pragma omp parallel [-Wunknown-pragmas]\n",
            "   #pragma omp parallel for if ((end - begin) >= grain_size)\n",
            "\n",
            "  [2/2] /usr/local/cuda/bin/nvcc --generate-dependencies-with-compile --dependency-output /content/apex/build/temp.linux-x86_64-3.7/csrc/megatron/scaled_masked_softmax_cuda.o.d -I/content/apex/csrc -I/usr/local/lib/python3.7/dist-packages/torch/include -I/usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include -I/usr/local/lib/python3.7/dist-packages/torch/include/TH -I/usr/local/lib/python3.7/dist-packages/torch/include/THC -I/usr/local/cuda/include -I/usr/include/python3.7m -c -c /content/apex/csrc/megatron/scaled_masked_softmax_cuda.cu -o /content/apex/build/temp.linux-x86_64-3.7/csrc/megatron/scaled_masked_softmax_cuda.o -D__CUDA_NO_HALF_OPERATORS__ -D__CUDA_NO_HALF_CONVERSIONS__ -D__CUDA_NO_BFLOAT16_CONVERSIONS__ -D__CUDA_NO_HALF2_OPERATORS__ --expt-relaxed-constexpr --compiler-options ''\"'\"'-fPIC'\"'\"'' -O3 -U__CUDA_NO_HALF_OPERATORS__ -U__CUDA_NO_HALF_CONVERSIONS__ --expt-relaxed-constexpr --expt-extended-lambda -DVERSION_GE_1_1 -DVERSION_GE_1_3 -DVERSION_GE_1_5 -DTORCH_API_INCLUDE_EXTENSION_H '-DPYBIND11_COMPILER_TYPE=\"_gcc\"' '-DPYBIND11_STDLIB=\"_libstdcpp\"' '-DPYBIND11_BUILD_ABI=\"_cxxabi1011\"' -DTORCH_EXTENSION_NAME=scaled_masked_softmax_cuda -D_GLIBCXX_USE_CXX11_ABI=0 -gencode=arch=compute_75,code=compute_75 -gencode=arch=compute_75,code=sm_75 -std=c++14\n",
            "  x86_64-linux-gnu-g++ -pthread -shared -Wl,-O1 -Wl,-Bsymbolic-functions -Wl,-Bsymbolic-functions -Wl,-z,relro -Wl,-Bsymbolic-functions -Wl,-z,relro -g -fdebug-prefix-map=/build/python3.7-pX47U3/python3.7-3.7.12=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 /content/apex/build/temp.linux-x86_64-3.7/csrc/megatron/scaled_masked_softmax.o /content/apex/build/temp.linux-x86_64-3.7/csrc/megatron/scaled_masked_softmax_cuda.o -L/usr/local/lib/python3.7/dist-packages/torch/lib -L/usr/local/cuda/lib64 -lc10 -ltorch -ltorch_cpu -ltorch_python -lcudart -lc10_cuda -ltorch_cuda_cu -ltorch_cuda_cpp -o build/lib.linux-x86_64-3.7/scaled_masked_softmax_cuda.cpython-37m-x86_64-linux-gnu.so\n",
            "  building 'fused_weight_gradient_mlp_cuda' extension\n",
            "  Emitting ninja build file /content/apex/build/temp.linux-x86_64-3.7/build.ninja...\n",
            "  Compiling objects...\n",
            "  Allowing ninja to set a default number of workers... (overridable by setting the environment variable MAX_JOBS=N)\n",
            "  [1/3] c++ -MMD -MF /content/apex/build/temp.linux-x86_64-3.7/csrc/megatron/fused_weight_gradient_dense.o.d -pthread -Wno-unused-result -Wsign-compare -DNDEBUG -g -fwrapv -O2 -Wall -g -fdebug-prefix-map=/build/python3.7-pX47U3/python3.7-3.7.12=. -fstack-protector-strong -Wformat -Werror=format-security -g -fdebug-prefix-map=/build/python3.7-pX47U3/python3.7-3.7.12=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fPIC -I/content/apex/csrc -I/usr/local/lib/python3.7/dist-packages/torch/include -I/usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include -I/usr/local/lib/python3.7/dist-packages/torch/include/TH -I/usr/local/lib/python3.7/dist-packages/torch/include/THC -I/usr/local/cuda/include -I/usr/include/python3.7m -c -c /content/apex/csrc/megatron/fused_weight_gradient_dense.cpp -o /content/apex/build/temp.linux-x86_64-3.7/csrc/megatron/fused_weight_gradient_dense.o -O3 -DVERSION_GE_1_1 -DVERSION_GE_1_3 -DVERSION_GE_1_5 -DTORCH_API_INCLUDE_EXTENSION_H '-DPYBIND11_COMPILER_TYPE=\"_gcc\"' '-DPYBIND11_STDLIB=\"_libstdcpp\"' '-DPYBIND11_BUILD_ABI=\"_cxxabi1011\"' -DTORCH_EXTENSION_NAME=fused_weight_gradient_mlp_cuda -D_GLIBCXX_USE_CXX11_ABI=0 -std=c++14\n",
            "  In file included from /usr/local/lib/python3.7/dist-packages/torch/include/ATen/Parallel.h:140:0,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/utils.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/nn/cloneable.h:5,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/nn.h:3,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include/torch/all.h:13,\n",
            "                   from /usr/local/lib/python3.7/dist-packages/torch/include/torch/extension.h:4,\n",
            "                   from /content/apex/csrc/megatron/fused_weight_gradient_dense.cpp:1:\n",
            "  /usr/local/lib/python3.7/dist-packages/torch/include/ATen/ParallelOpenMP.h:83:0: warning: ignoring #pragma omp parallel [-Wunknown-pragmas]\n",
            "   #pragma omp parallel for if ((end - begin) >= grain_size)\n",
            "\n",
            "  [2/3] /usr/local/cuda/bin/nvcc --generate-dependencies-with-compile --dependency-output /content/apex/build/temp.linux-x86_64-3.7/csrc/megatron/fused_weight_gradient_dense_16bit_prec_cuda.o.d -I/content/apex/csrc -I/usr/local/lib/python3.7/dist-packages/torch/include -I/usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include -I/usr/local/lib/python3.7/dist-packages/torch/include/TH -I/usr/local/lib/python3.7/dist-packages/torch/include/THC -I/usr/local/cuda/include -I/usr/include/python3.7m -c -c /content/apex/csrc/megatron/fused_weight_gradient_dense_16bit_prec_cuda.cu -o /content/apex/build/temp.linux-x86_64-3.7/csrc/megatron/fused_weight_gradient_dense_16bit_prec_cuda.o -D__CUDA_NO_HALF_OPERATORS__ -D__CUDA_NO_HALF_CONVERSIONS__ -D__CUDA_NO_BFLOAT16_CONVERSIONS__ -D__CUDA_NO_HALF2_OPERATORS__ --expt-relaxed-constexpr --compiler-options ''\"'\"'-fPIC'\"'\"'' -O3 -gencode arch=compute_70,code=sm_70 -U__CUDA_NO_HALF_OPERATORS__ -U__CUDA_NO_HALF_CONVERSIONS__ --expt-relaxed-constexpr --expt-extended-lambda --use_fast_math -DVERSION_GE_1_1 -DVERSION_GE_1_3 -DVERSION_GE_1_5 -gencode arch=compute_80,code=sm_80 -gencode arch=compute_86,code=sm_86 -DTORCH_API_INCLUDE_EXTENSION_H '-DPYBIND11_COMPILER_TYPE=\"_gcc\"' '-DPYBIND11_STDLIB=\"_libstdcpp\"' '-DPYBIND11_BUILD_ABI=\"_cxxabi1011\"' -DTORCH_EXTENSION_NAME=fused_weight_gradient_mlp_cuda -D_GLIBCXX_USE_CXX11_ABI=0 -std=c++14\n",
            "  [3/3] /usr/local/cuda/bin/nvcc --generate-dependencies-with-compile --dependency-output /content/apex/build/temp.linux-x86_64-3.7/csrc/megatron/fused_weight_gradient_dense_cuda.o.d -I/content/apex/csrc -I/usr/local/lib/python3.7/dist-packages/torch/include -I/usr/local/lib/python3.7/dist-packages/torch/include/torch/csrc/api/include -I/usr/local/lib/python3.7/dist-packages/torch/include/TH -I/usr/local/lib/python3.7/dist-packages/torch/include/THC -I/usr/local/cuda/include -I/usr/include/python3.7m -c -c /content/apex/csrc/megatron/fused_weight_gradient_dense_cuda.cu -o /content/apex/build/temp.linux-x86_64-3.7/csrc/megatron/fused_weight_gradient_dense_cuda.o -D__CUDA_NO_HALF_OPERATORS__ -D__CUDA_NO_HALF_CONVERSIONS__ -D__CUDA_NO_BFLOAT16_CONVERSIONS__ -D__CUDA_NO_HALF2_OPERATORS__ --expt-relaxed-constexpr --compiler-options ''\"'\"'-fPIC'\"'\"'' -O3 -gencode arch=compute_70,code=sm_70 -U__CUDA_NO_HALF_OPERATORS__ -U__CUDA_NO_HALF_CONVERSIONS__ --expt-relaxed-constexpr --expt-extended-lambda --use_fast_math -DVERSION_GE_1_1 -DVERSION_GE_1_3 -DVERSION_GE_1_5 -gencode arch=compute_80,code=sm_80 -gencode arch=compute_86,code=sm_86 -DTORCH_API_INCLUDE_EXTENSION_H '-DPYBIND11_COMPILER_TYPE=\"_gcc\"' '-DPYBIND11_STDLIB=\"_libstdcpp\"' '-DPYBIND11_BUILD_ABI=\"_cxxabi1011\"' -DTORCH_EXTENSION_NAME=fused_weight_gradient_mlp_cuda -D_GLIBCXX_USE_CXX11_ABI=0 -std=c++14\n",
            "  x86_64-linux-gnu-g++ -pthread -shared -Wl,-O1 -Wl,-Bsymbolic-functions -Wl,-Bsymbolic-functions -Wl,-z,relro -Wl,-Bsymbolic-functions -Wl,-z,relro -g -fdebug-prefix-map=/build/python3.7-pX47U3/python3.7-3.7.12=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 /content/apex/build/temp.linux-x86_64-3.7/csrc/megatron/fused_weight_gradient_dense.o /content/apex/build/temp.linux-x86_64-3.7/csrc/megatron/fused_weight_gradient_dense_cuda.o /content/apex/build/temp.linux-x86_64-3.7/csrc/megatron/fused_weight_gradient_dense_16bit_prec_cuda.o -L/usr/local/lib/python3.7/dist-packages/torch/lib -L/usr/local/cuda/lib64 -lc10 -ltorch -ltorch_cpu -ltorch_python -lcudart -lc10_cuda -ltorch_cuda_cu -ltorch_cuda_cpp -o build/lib.linux-x86_64-3.7/fused_weight_gradient_mlp_cuda.cpython-37m-x86_64-linux-gnu.so\n",
            "  running install_lib\n",
            "  copying build/lib.linux-x86_64-3.7/scaled_upper_triang_masked_softmax_cuda.cpython-37m-x86_64-linux-gnu.so -> /usr/local/lib/python3.7/dist-packages\n",
            "  copying build/lib.linux-x86_64-3.7/syncbn.cpython-37m-x86_64-linux-gnu.so -> /usr/local/lib/python3.7/dist-packages\n",
            "  copying build/lib.linux-x86_64-3.7/fused_dense_cuda.cpython-37m-x86_64-linux-gnu.so -> /usr/local/lib/python3.7/dist-packages\n",
            "  copying build/lib.linux-x86_64-3.7/apex_C.cpython-37m-x86_64-linux-gnu.so -> /usr/local/lib/python3.7/dist-packages\n",
            "  copying build/lib.linux-x86_64-3.7/mlp_cuda.cpython-37m-x86_64-linux-gnu.so -> /usr/local/lib/python3.7/dist-packages\n",
            "  copying build/lib.linux-x86_64-3.7/scaled_masked_softmax_cuda.cpython-37m-x86_64-linux-gnu.so -> /usr/local/lib/python3.7/dist-packages\n",
            "  creating /usr/local/lib/python3.7/dist-packages/apex\n",
            "  copying build/lib.linux-x86_64-3.7/apex/__init__.py -> /usr/local/lib/python3.7/dist-packages/apex\n",
            "  creating /usr/local/lib/python3.7/dist-packages/apex/pyprof\n",
            "  copying build/lib.linux-x86_64-3.7/apex/pyprof/__init__.py -> /usr/local/lib/python3.7/dist-packages/apex/pyprof\n",
            "  creating /usr/local/lib/python3.7/dist-packages/apex/pyprof/prof\n",
            "  copying build/lib.linux-x86_64-3.7/apex/pyprof/prof/pointwise.py -> /usr/local/lib/python3.7/dist-packages/apex/pyprof/prof\n",
            "  copying build/lib.linux-x86_64-3.7/apex/pyprof/prof/linear.py -> /usr/local/lib/python3.7/dist-packages/apex/pyprof/prof\n",
            "  copying build/lib.linux-x86_64-3.7/apex/pyprof/prof/dropout.py -> /usr/local/lib/python3.7/dist-packages/apex/pyprof/prof\n",
            "  copying build/lib.linux-x86_64-3.7/apex/pyprof/prof/blas.py -> /usr/local/lib/python3.7/dist-packages/apex/pyprof/prof\n",
            "  copying build/lib.linux-x86_64-3.7/apex/pyprof/prof/convert.py -> /usr/local/lib/python3.7/dist-packages/apex/pyprof/prof\n",
            "  copying build/lib.linux-x86_64-3.7/apex/pyprof/prof/normalization.py -> /usr/local/lib/python3.7/dist-packages/apex/pyprof/prof\n",
            "  copying build/lib.linux-x86_64-3.7/apex/pyprof/prof/__init__.py -> /usr/local/lib/python3.7/dist-packages/apex/pyprof/prof\n",
            "  copying build/lib.linux-x86_64-3.7/apex/pyprof/prof/usage.py -> /usr/local/lib/python3.7/dist-packages/apex/pyprof/prof\n",
            "  copying build/lib.linux-x86_64-3.7/apex/pyprof/prof/prof.py -> /usr/local/lib/python3.7/dist-packages/apex/pyprof/prof\n",
            "  copying build/lib.linux-x86_64-3.7/apex/pyprof/prof/data.py -> /usr/local/lib/python3.7/dist-packages/apex/pyprof/prof\n",
            "  copying build/lib.linux-x86_64-3.7/apex/pyprof/prof/recurrentCell.py -> /usr/local/lib/python3.7/dist-packages/apex/pyprof/prof\n",
            "  copying build/lib.linux-x86_64-3.7/apex/pyprof/prof/misc.py -> /usr/local/lib/python3.7/dist-packages/apex/pyprof/prof\n",
            "  copying build/lib.linux-x86_64-3.7/apex/pyprof/prof/__main__.py -> /usr/local/lib/python3.7/dist-packages/apex/pyprof/prof\n",
            "  copying build/lib.linux-x86_64-3.7/apex/pyprof/prof/activation.py -> /usr/local/lib/python3.7/dist-packages/apex/pyprof/prof\n",
            "  copying build/lib.linux-x86_64-3.7/apex/pyprof/prof/output.py -> /usr/local/lib/python3.7/dist-packages/apex/pyprof/prof\n",
            "  copying build/lib.linux-x86_64-3.7/apex/pyprof/prof/randomSample.py -> /usr/local/lib/python3.7/dist-packages/apex/pyprof/prof\n",
            "  copying build/lib.linux-x86_64-3.7/apex/pyprof/prof/optim.py -> /usr/local/lib/python3.7/dist-packages/apex/pyprof/prof\n",
            "  copying build/lib.linux-x86_64-3.7/apex/pyprof/prof/embedding.py -> /usr/local/lib/python3.7/dist-packages/apex/pyprof/prof\n",
            "  copying build/lib.linux-x86_64-3.7/apex/pyprof/prof/conv.py -> /usr/local/lib/python3.7/dist-packages/apex/pyprof/prof\n",
            "  copying build/lib.linux-x86_64-3.7/apex/pyprof/prof/reduction.py -> /usr/local/lib/python3.7/dist-packages/apex/pyprof/prof\n",
            "  copying build/lib.linux-x86_64-3.7/apex/pyprof/prof/softmax.py -> /usr/local/lib/python3.7/dist-packages/apex/pyprof/prof\n",
            "  copying build/lib.linux-x86_64-3.7/apex/pyprof/prof/loss.py -> /usr/local/lib/python3.7/dist-packages/apex/pyprof/prof\n",
            "  copying build/lib.linux-x86_64-3.7/apex/pyprof/prof/utility.py -> /usr/local/lib/python3.7/dist-packages/apex/pyprof/prof\n",
            "  copying build/lib.linux-x86_64-3.7/apex/pyprof/prof/base.py -> /usr/local/lib/python3.7/dist-packages/apex/pyprof/prof\n",
            "  copying build/lib.linux-x86_64-3.7/apex/pyprof/prof/index_slice_join_mutate.py -> /usr/local/lib/python3.7/dist-packages/apex/pyprof/prof\n",
            "  copying build/lib.linux-x86_64-3.7/apex/pyprof/prof/pooling.py -> /usr/local/lib/python3.7/dist-packages/apex/pyprof/prof\n",
            "  creating /usr/local/lib/python3.7/dist-packages/apex/pyprof/nvtx\n",
            "  copying build/lib.linux-x86_64-3.7/apex/pyprof/nvtx/__init__.py -> /usr/local/lib/python3.7/dist-packages/apex/pyprof/nvtx\n",
            "  copying build/lib.linux-x86_64-3.7/apex/pyprof/nvtx/nvmarker.py -> /usr/local/lib/python3.7/dist-packages/apex/pyprof/nvtx\n",
            "  creating /usr/local/lib/python3.7/dist-packages/apex/pyprof/parse\n",
            "  copying build/lib.linux-x86_64-3.7/apex/pyprof/parse/__init__.py -> /usr/local/lib/python3.7/dist-packages/apex/pyprof/parse\n",
            "  copying build/lib.linux-x86_64-3.7/apex/pyprof/parse/__main__.py -> /usr/local/lib/python3.7/dist-packages/apex/pyprof/parse\n",
            "  copying build/lib.linux-x86_64-3.7/apex/pyprof/parse/parse.py -> /usr/local/lib/python3.7/dist-packages/apex/pyprof/parse\n",
            "  copying build/lib.linux-x86_64-3.7/apex/pyprof/parse/kernel.py -> /usr/local/lib/python3.7/dist-packages/apex/pyprof/parse\n",
            "  copying build/lib.linux-x86_64-3.7/apex/pyprof/parse/nvvp.py -> /usr/local/lib/python3.7/dist-packages/apex/pyprof/parse\n",
            "  copying build/lib.linux-x86_64-3.7/apex/pyprof/parse/db.py -> /usr/local/lib/python3.7/dist-packages/apex/pyprof/parse\n",
            "  creating /usr/local/lib/python3.7/dist-packages/apex/optimizers\n",
            "  copying build/lib.linux-x86_64-3.7/apex/optimizers/fused_adam.py -> /usr/local/lib/python3.7/dist-packages/apex/optimizers\n",
            "  copying build/lib.linux-x86_64-3.7/apex/optimizers/fused_adagrad.py -> /usr/local/lib/python3.7/dist-packages/apex/optimizers\n",
            "  copying build/lib.linux-x86_64-3.7/apex/optimizers/__init__.py -> /usr/local/lib/python3.7/dist-packages/apex/optimizers\n",
            "  copying build/lib.linux-x86_64-3.7/apex/optimizers/fused_sgd.py -> /usr/local/lib/python3.7/dist-packages/apex/optimizers\n",
            "  copying build/lib.linux-x86_64-3.7/apex/optimizers/fused_lamb.py -> /usr/local/lib/python3.7/dist-packages/apex/optimizers\n",
            "  copying build/lib.linux-x86_64-3.7/apex/optimizers/fused_novograd.py -> /usr/local/lib/python3.7/dist-packages/apex/optimizers\n",
            "  copying build/lib.linux-x86_64-3.7/apex/optimizers/fused_mixed_precision_lamb.py -> /usr/local/lib/python3.7/dist-packages/apex/optimizers\n",
            "  creating /usr/local/lib/python3.7/dist-packages/apex/parallel\n",
            "  copying build/lib.linux-x86_64-3.7/apex/parallel/LARC.py -> /usr/local/lib/python3.7/dist-packages/apex/parallel\n",
            "  copying build/lib.linux-x86_64-3.7/apex/parallel/__init__.py -> /usr/local/lib/python3.7/dist-packages/apex/parallel\n",
            "  copying build/lib.linux-x86_64-3.7/apex/parallel/distributed.py -> /usr/local/lib/python3.7/dist-packages/apex/parallel\n",
            "  copying build/lib.linux-x86_64-3.7/apex/parallel/sync_batchnorm.py -> /usr/local/lib/python3.7/dist-packages/apex/parallel\n",
            "  copying build/lib.linux-x86_64-3.7/apex/parallel/optimized_sync_batchnorm.py -> /usr/local/lib/python3.7/dist-packages/apex/parallel\n",
            "  copying build/lib.linux-x86_64-3.7/apex/parallel/optimized_sync_batchnorm_kernel.py -> /usr/local/lib/python3.7/dist-packages/apex/parallel\n",
            "  copying build/lib.linux-x86_64-3.7/apex/parallel/multiproc.py -> /usr/local/lib/python3.7/dist-packages/apex/parallel\n",
            "  copying build/lib.linux-x86_64-3.7/apex/parallel/sync_batchnorm_kernel.py -> /usr/local/lib/python3.7/dist-packages/apex/parallel\n",
            "  creating /usr/local/lib/python3.7/dist-packages/apex/mlp\n",
            "  copying build/lib.linux-x86_64-3.7/apex/mlp/__init__.py -> /usr/local/lib/python3.7/dist-packages/apex/mlp\n",
            "  copying build/lib.linux-x86_64-3.7/apex/mlp/mlp.py -> /usr/local/lib/python3.7/dist-packages/apex/mlp\n",
            "  creating /usr/local/lib/python3.7/dist-packages/apex/transformer\n",
            "  copying build/lib.linux-x86_64-3.7/apex/transformer/enums.py -> /usr/local/lib/python3.7/dist-packages/apex/transformer\n",
            "  copying build/lib.linux-x86_64-3.7/apex/transformer/microbatches.py -> /usr/local/lib/python3.7/dist-packages/apex/transformer\n",
            "  copying build/lib.linux-x86_64-3.7/apex/transformer/__init__.py -> /usr/local/lib/python3.7/dist-packages/apex/transformer\n",
            "  creating /usr/local/lib/python3.7/dist-packages/apex/transformer/pipeline_parallel\n",
            "  copying build/lib.linux-x86_64-3.7/apex/transformer/pipeline_parallel/__init__.py -> /usr/local/lib/python3.7/dist-packages/apex/transformer/pipeline_parallel\n",
            "  copying build/lib.linux-x86_64-3.7/apex/transformer/pipeline_parallel/_timers.py -> /usr/local/lib/python3.7/dist-packages/apex/transformer/pipeline_parallel\n",
            "  copying build/lib.linux-x86_64-3.7/apex/transformer/pipeline_parallel/p2p_communication.py -> /usr/local/lib/python3.7/dist-packages/apex/transformer/pipeline_parallel\n",
            "  copying build/lib.linux-x86_64-3.7/apex/transformer/pipeline_parallel/utils.py -> /usr/local/lib/python3.7/dist-packages/apex/transformer/pipeline_parallel\n",
            "  creating /usr/local/lib/python3.7/dist-packages/apex/transformer/pipeline_parallel/schedules\n",
            "  copying build/lib.linux-x86_64-3.7/apex/transformer/pipeline_parallel/schedules/fwd_bwd_pipelining_without_interleaving.py -> /usr/local/lib/python3.7/dist-packages/apex/transformer/pipeline_parallel/schedules\n",
            "  copying build/lib.linux-x86_64-3.7/apex/transformer/pipeline_parallel/schedules/fwd_bwd_pipelining_with_interleaving.py -> /usr/local/lib/python3.7/dist-packages/apex/transformer/pipeline_parallel/schedules\n",
            "  copying build/lib.linux-x86_64-3.7/apex/transformer/pipeline_parallel/schedules/__init__.py -> /usr/local/lib/python3.7/dist-packages/apex/transformer/pipeline_parallel/schedules\n",
            "  copying build/lib.linux-x86_64-3.7/apex/transformer/pipeline_parallel/schedules/common.py -> /usr/local/lib/python3.7/dist-packages/apex/transformer/pipeline_parallel/schedules\n",
            "  copying build/lib.linux-x86_64-3.7/apex/transformer/pipeline_parallel/schedules/fwd_bwd_no_pipelining.py -> /usr/local/lib/python3.7/dist-packages/apex/transformer/pipeline_parallel/schedules\n",
            "  creating /usr/local/lib/python3.7/dist-packages/apex/transformer/tensor_parallel\n",
            "  copying build/lib.linux-x86_64-3.7/apex/transformer/tensor_parallel/random.py -> /usr/local/lib/python3.7/dist-packages/apex/transformer/tensor_parallel\n",
            "  copying build/lib.linux-x86_64-3.7/apex/transformer/tensor_parallel/layers.py -> /usr/local/lib/python3.7/dist-packages/apex/transformer/tensor_parallel\n",
            "  copying build/lib.linux-x86_64-3.7/apex/transformer/tensor_parallel/mappings.py -> /usr/local/lib/python3.7/dist-packages/apex/transformer/tensor_parallel\n",
            "  copying build/lib.linux-x86_64-3.7/apex/transformer/tensor_parallel/__init__.py -> /usr/local/lib/python3.7/dist-packages/apex/transformer/tensor_parallel\n",
            "  copying build/lib.linux-x86_64-3.7/apex/transformer/tensor_parallel/data.py -> /usr/local/lib/python3.7/dist-packages/apex/transformer/tensor_parallel\n",
            "  copying build/lib.linux-x86_64-3.7/apex/transformer/tensor_parallel/cross_entropy.py -> /usr/local/lib/python3.7/dist-packages/apex/transformer/tensor_parallel\n",
            "  copying build/lib.linux-x86_64-3.7/apex/transformer/tensor_parallel/utils.py -> /usr/local/lib/python3.7/dist-packages/apex/transformer/tensor_parallel\n",
            "  copying build/lib.linux-x86_64-3.7/apex/transformer/tensor_parallel/memory.py -> /usr/local/lib/python3.7/dist-packages/apex/transformer/tensor_parallel\n",
            "  copying build/lib.linux-x86_64-3.7/apex/transformer/log_util.py -> /usr/local/lib/python3.7/dist-packages/apex/transformer\n",
            "  copying build/lib.linux-x86_64-3.7/apex/transformer/utils.py -> /usr/local/lib/python3.7/dist-packages/apex/transformer\n",
            "  creating /usr/local/lib/python3.7/dist-packages/apex/transformer/testing\n",
            "  copying build/lib.linux-x86_64-3.7/apex/transformer/testing/commons.py -> /usr/local/lib/python3.7/dist-packages/apex/transformer/testing\n",
            "  copying build/lib.linux-x86_64-3.7/apex/transformer/testing/__init__.py -> /usr/local/lib/python3.7/dist-packages/apex/transformer/testing\n",
            "  copying build/lib.linux-x86_64-3.7/apex/transformer/testing/standalone_bert.py -> /usr/local/lib/python3.7/dist-packages/apex/transformer/testing\n",
            "  copying build/lib.linux-x86_64-3.7/apex/transformer/testing/standalone_gpt.py -> /usr/local/lib/python3.7/dist-packages/apex/transformer/testing\n",
            "  copying build/lib.linux-x86_64-3.7/apex/transformer/testing/global_vars.py -> /usr/local/lib/python3.7/dist-packages/apex/transformer/testing\n",
            "  copying build/lib.linux-x86_64-3.7/apex/transformer/testing/arguments.py -> /usr/local/lib/python3.7/dist-packages/apex/transformer/testing\n",
            "  copying build/lib.linux-x86_64-3.7/apex/transformer/parallel_state.py -> /usr/local/lib/python3.7/dist-packages/apex/transformer\n",
            "  creating /usr/local/lib/python3.7/dist-packages/apex/transformer/amp\n",
            "  copying build/lib.linux-x86_64-3.7/apex/transformer/amp/__init__.py -> /usr/local/lib/python3.7/dist-packages/apex/transformer/amp\n",
            "  copying build/lib.linux-x86_64-3.7/apex/transformer/amp/grad_scaler.py -> /usr/local/lib/python3.7/dist-packages/apex/transformer/amp\n",
            "  creating /usr/local/lib/python3.7/dist-packages/apex/transformer/_data\n",
            "  copying build/lib.linux-x86_64-3.7/apex/transformer/_data/__init__.py -> /usr/local/lib/python3.7/dist-packages/apex/transformer/_data\n",
            "  copying build/lib.linux-x86_64-3.7/apex/transformer/_data/_batchsampler.py -> /usr/local/lib/python3.7/dist-packages/apex/transformer/_data\n",
            "  creating /usr/local/lib/python3.7/dist-packages/apex/transformer/functional\n",
            "  copying build/lib.linux-x86_64-3.7/apex/transformer/functional/__init__.py -> /usr/local/lib/python3.7/dist-packages/apex/transformer/functional\n",
            "  copying build/lib.linux-x86_64-3.7/apex/transformer/functional/fused_softmax.py -> /usr/local/lib/python3.7/dist-packages/apex/transformer/functional\n",
            "  creating /usr/local/lib/python3.7/dist-packages/apex/normalization\n",
            "  copying build/lib.linux-x86_64-3.7/apex/normalization/__init__.py -> /usr/local/lib/python3.7/dist-packages/apex/normalization\n",
            "  copying build/lib.linux-x86_64-3.7/apex/normalization/fused_layer_norm.py -> /usr/local/lib/python3.7/dist-packages/apex/normalization\n",
            "  creating /usr/local/lib/python3.7/dist-packages/apex/RNN\n",
            "  copying build/lib.linux-x86_64-3.7/apex/RNN/__init__.py -> /usr/local/lib/python3.7/dist-packages/apex/RNN\n",
            "  copying build/lib.linux-x86_64-3.7/apex/RNN/cells.py -> /usr/local/lib/python3.7/dist-packages/apex/RNN\n",
            "  copying build/lib.linux-x86_64-3.7/apex/RNN/RNNBackend.py -> /usr/local/lib/python3.7/dist-packages/apex/RNN\n",
            "  copying build/lib.linux-x86_64-3.7/apex/RNN/models.py -> /usr/local/lib/python3.7/dist-packages/apex/RNN\n",
            "  creating /usr/local/lib/python3.7/dist-packages/apex/fused_dense\n",
            "  copying build/lib.linux-x86_64-3.7/apex/fused_dense/__init__.py -> /usr/local/lib/python3.7/dist-packages/apex/fused_dense\n",
            "  copying build/lib.linux-x86_64-3.7/apex/fused_dense/fused_dense.py -> /usr/local/lib/python3.7/dist-packages/apex/fused_dense\n",
            "  creating /usr/local/lib/python3.7/dist-packages/apex/amp\n",
            "  copying build/lib.linux-x86_64-3.7/apex/amp/wrap.py -> /usr/local/lib/python3.7/dist-packages/apex/amp\n",
            "  copying build/lib.linux-x86_64-3.7/apex/amp/scaler.py -> /usr/local/lib/python3.7/dist-packages/apex/amp\n",
            "  copying build/lib.linux-x86_64-3.7/apex/amp/__init__.py -> /usr/local/lib/python3.7/dist-packages/apex/amp\n",
            "  copying build/lib.linux-x86_64-3.7/apex/amp/amp.py -> /usr/local/lib/python3.7/dist-packages/apex/amp\n",
            "  copying build/lib.linux-x86_64-3.7/apex/amp/compat.py -> /usr/local/lib/python3.7/dist-packages/apex/amp\n",
            "  copying build/lib.linux-x86_64-3.7/apex/amp/frontend.py -> /usr/local/lib/python3.7/dist-packages/apex/amp\n",
            "  copying build/lib.linux-x86_64-3.7/apex/amp/utils.py -> /usr/local/lib/python3.7/dist-packages/apex/amp\n",
            "  creating /usr/local/lib/python3.7/dist-packages/apex/amp/lists\n",
            "  copying build/lib.linux-x86_64-3.7/apex/amp/lists/__init__.py -> /usr/local/lib/python3.7/dist-packages/apex/amp/lists\n",
            "  copying build/lib.linux-x86_64-3.7/apex/amp/lists/tensor_overrides.py -> /usr/local/lib/python3.7/dist-packages/apex/amp/lists\n",
            "  copying build/lib.linux-x86_64-3.7/apex/amp/lists/torch_overrides.py -> /usr/local/lib/python3.7/dist-packages/apex/amp/lists\n",
            "  copying build/lib.linux-x86_64-3.7/apex/amp/lists/functional_overrides.py -> /usr/local/lib/python3.7/dist-packages/apex/amp/lists\n",
            "  copying build/lib.linux-x86_64-3.7/apex/amp/handle.py -> /usr/local/lib/python3.7/dist-packages/apex/amp\n",
            "  copying build/lib.linux-x86_64-3.7/apex/amp/__version__.py -> /usr/local/lib/python3.7/dist-packages/apex/amp\n",
            "  copying build/lib.linux-x86_64-3.7/apex/amp/_amp_state.py -> /usr/local/lib/python3.7/dist-packages/apex/amp\n",
            "  copying build/lib.linux-x86_64-3.7/apex/amp/opt.py -> /usr/local/lib/python3.7/dist-packages/apex/amp\n",
            "  copying build/lib.linux-x86_64-3.7/apex/amp/_initialize.py -> /usr/local/lib/python3.7/dist-packages/apex/amp\n",
            "  copying build/lib.linux-x86_64-3.7/apex/amp/rnn_compat.py -> /usr/local/lib/python3.7/dist-packages/apex/amp\n",
            "  copying build/lib.linux-x86_64-3.7/apex/amp/_process_optimizer.py -> /usr/local/lib/python3.7/dist-packages/apex/amp\n",
            "  creating /usr/local/lib/python3.7/dist-packages/apex/contrib\n",
            "  creating /usr/local/lib/python3.7/dist-packages/apex/contrib/xentropy\n",
            "  copying build/lib.linux-x86_64-3.7/apex/contrib/xentropy/__init__.py -> /usr/local/lib/python3.7/dist-packages/apex/contrib/xentropy\n",
            "  copying build/lib.linux-x86_64-3.7/apex/contrib/xentropy/softmax_xentropy.py -> /usr/local/lib/python3.7/dist-packages/apex/contrib/xentropy\n",
            "  copying build/lib.linux-x86_64-3.7/apex/contrib/__init__.py -> /usr/local/lib/python3.7/dist-packages/apex/contrib\n",
            "  creating /usr/local/lib/python3.7/dist-packages/apex/contrib/optimizers\n",
            "  copying build/lib.linux-x86_64-3.7/apex/contrib/optimizers/fused_adam.py -> /usr/local/lib/python3.7/dist-packages/apex/contrib/optimizers\n",
            "  copying build/lib.linux-x86_64-3.7/apex/contrib/optimizers/__init__.py -> /usr/local/lib/python3.7/dist-packages/apex/contrib/optimizers\n",
            "  copying build/lib.linux-x86_64-3.7/apex/contrib/optimizers/fused_sgd.py -> /usr/local/lib/python3.7/dist-packages/apex/contrib/optimizers\n",
            "  copying build/lib.linux-x86_64-3.7/apex/contrib/optimizers/distributed_fused_lamb.py -> /usr/local/lib/python3.7/dist-packages/apex/contrib/optimizers\n",
            "  copying build/lib.linux-x86_64-3.7/apex/contrib/optimizers/fp16_optimizer.py -> /usr/local/lib/python3.7/dist-packages/apex/contrib/optimizers\n",
            "  copying build/lib.linux-x86_64-3.7/apex/contrib/optimizers/distributed_fused_adam_v3.py -> /usr/local/lib/python3.7/dist-packages/apex/contrib/optimizers\n",
            "  copying build/lib.linux-x86_64-3.7/apex/contrib/optimizers/distributed_fused_adam_v2.py -> /usr/local/lib/python3.7/dist-packages/apex/contrib/optimizers\n",
            "  copying build/lib.linux-x86_64-3.7/apex/contrib/optimizers/fused_lamb.py -> /usr/local/lib/python3.7/dist-packages/apex/contrib/optimizers\n",
            "  copying build/lib.linux-x86_64-3.7/apex/contrib/optimizers/distributed_fused_adam.py -> /usr/local/lib/python3.7/dist-packages/apex/contrib/optimizers\n",
            "  creating /usr/local/lib/python3.7/dist-packages/apex/contrib/transducer\n",
            "  copying build/lib.linux-x86_64-3.7/apex/contrib/transducer/__init__.py -> /usr/local/lib/python3.7/dist-packages/apex/contrib/transducer\n",
            "  copying build/lib.linux-x86_64-3.7/apex/contrib/transducer/transducer.py -> /usr/local/lib/python3.7/dist-packages/apex/contrib/transducer\n",
            "  creating /usr/local/lib/python3.7/dist-packages/apex/contrib/layer_norm\n",
            "  copying build/lib.linux-x86_64-3.7/apex/contrib/layer_norm/__init__.py -> /usr/local/lib/python3.7/dist-packages/apex/contrib/layer_norm\n",
            "  copying build/lib.linux-x86_64-3.7/apex/contrib/layer_norm/layer_norm.py -> /usr/local/lib/python3.7/dist-packages/apex/contrib/layer_norm\n",
            "  creating /usr/local/lib/python3.7/dist-packages/apex/contrib/multihead_attn\n",
            "  copying build/lib.linux-x86_64-3.7/apex/contrib/multihead_attn/mask_softmax_dropout_func.py -> /usr/local/lib/python3.7/dist-packages/apex/contrib/multihead_attn\n",
            "  copying build/lib.linux-x86_64-3.7/apex/contrib/multihead_attn/__init__.py -> /usr/local/lib/python3.7/dist-packages/apex/contrib/multihead_attn\n",
            "  copying build/lib.linux-x86_64-3.7/apex/contrib/multihead_attn/fast_encdec_multihead_attn_norm_add_func.py -> /usr/local/lib/python3.7/dist-packages/apex/contrib/multihead_attn\n",
            "  copying build/lib.linux-x86_64-3.7/apex/contrib/multihead_attn/fast_self_multihead_attn_func.py -> /usr/local/lib/python3.7/dist-packages/apex/contrib/multihead_attn\n",
            "  copying build/lib.linux-x86_64-3.7/apex/contrib/multihead_attn/self_multihead_attn_func.py -> /usr/local/lib/python3.7/dist-packages/apex/contrib/multihead_attn\n",
            "  copying build/lib.linux-x86_64-3.7/apex/contrib/multihead_attn/fast_self_multihead_attn_norm_add_func.py -> /usr/local/lib/python3.7/dist-packages/apex/contrib/multihead_attn\n",
            "  copying build/lib.linux-x86_64-3.7/apex/contrib/multihead_attn/encdec_multihead_attn_func.py -> /usr/local/lib/python3.7/dist-packages/apex/contrib/multihead_attn\n",
            "  copying build/lib.linux-x86_64-3.7/apex/contrib/multihead_attn/fast_encdec_multihead_attn_func.py -> /usr/local/lib/python3.7/dist-packages/apex/contrib/multihead_attn\n",
            "  copying build/lib.linux-x86_64-3.7/apex/contrib/multihead_attn/encdec_multihead_attn.py -> /usr/local/lib/python3.7/dist-packages/apex/contrib/multihead_attn\n",
            "  copying build/lib.linux-x86_64-3.7/apex/contrib/multihead_attn/self_multihead_attn.py -> /usr/local/lib/python3.7/dist-packages/apex/contrib/multihead_attn\n",
            "  creating /usr/local/lib/python3.7/dist-packages/apex/contrib/groupbn\n",
            "  copying build/lib.linux-x86_64-3.7/apex/contrib/groupbn/__init__.py -> /usr/local/lib/python3.7/dist-packages/apex/contrib/groupbn\n",
            "  copying build/lib.linux-x86_64-3.7/apex/contrib/groupbn/batch_norm.py -> /usr/local/lib/python3.7/dist-packages/apex/contrib/groupbn\n",
            "  creating /usr/local/lib/python3.7/dist-packages/apex/contrib/fmha\n",
            "  copying build/lib.linux-x86_64-3.7/apex/contrib/fmha/__init__.py -> /usr/local/lib/python3.7/dist-packages/apex/contrib/fmha\n",
            "  copying build/lib.linux-x86_64-3.7/apex/contrib/fmha/fmha.py -> /usr/local/lib/python3.7/dist-packages/apex/contrib/fmha\n",
            "  creating /usr/local/lib/python3.7/dist-packages/apex/contrib/sparsity\n",
            "  copying build/lib.linux-x86_64-3.7/apex/contrib/sparsity/sparse_masklib.py -> /usr/local/lib/python3.7/dist-packages/apex/contrib/sparsity\n",
            "  copying build/lib.linux-x86_64-3.7/apex/contrib/sparsity/__init__.py -> /usr/local/lib/python3.7/dist-packages/apex/contrib/sparsity\n",
            "  copying build/lib.linux-x86_64-3.7/apex/contrib/sparsity/asp.py -> /usr/local/lib/python3.7/dist-packages/apex/contrib/sparsity\n",
            "  creating /usr/local/lib/python3.7/dist-packages/apex/contrib/sparsity/permutation_search_kernels\n",
            "  copying build/lib.linux-x86_64-3.7/apex/contrib/sparsity/permutation_search_kernels/__init__.py -> /usr/local/lib/python3.7/dist-packages/apex/contrib/sparsity/permutation_search_kernels\n",
            "  copying build/lib.linux-x86_64-3.7/apex/contrib/sparsity/permutation_search_kernels/exhaustive_search.py -> /usr/local/lib/python3.7/dist-packages/apex/contrib/sparsity/permutation_search_kernels\n",
            "  copying build/lib.linux-x86_64-3.7/apex/contrib/sparsity/permutation_search_kernels/permutation_utilities.py -> /usr/local/lib/python3.7/dist-packages/apex/contrib/sparsity/permutation_search_kernels\n",
            "  copying build/lib.linux-x86_64-3.7/apex/contrib/sparsity/permutation_search_kernels/call_permutation_search_kernels.py -> /usr/local/lib/python3.7/dist-packages/apex/contrib/sparsity/permutation_search_kernels\n",
            "  copying build/lib.linux-x86_64-3.7/apex/contrib/sparsity/permutation_lib.py -> /usr/local/lib/python3.7/dist-packages/apex/contrib/sparsity\n",
            "  creating /usr/local/lib/python3.7/dist-packages/apex/contrib/bottleneck\n",
            "  copying build/lib.linux-x86_64-3.7/apex/contrib/bottleneck/__init__.py -> /usr/local/lib/python3.7/dist-packages/apex/contrib/bottleneck\n",
            "  copying build/lib.linux-x86_64-3.7/apex/contrib/bottleneck/bottleneck.py -> /usr/local/lib/python3.7/dist-packages/apex/contrib/bottleneck\n",
            "  copying build/lib.linux-x86_64-3.7/apex/contrib/bottleneck/bottleneck_module_test.py -> /usr/local/lib/python3.7/dist-packages/apex/contrib/bottleneck\n",
            "  copying build/lib.linux-x86_64-3.7/apex/contrib/bottleneck/test.py -> /usr/local/lib/python3.7/dist-packages/apex/contrib/bottleneck\n",
            "  creating /usr/local/lib/python3.7/dist-packages/apex/multi_tensor_apply\n",
            "  copying build/lib.linux-x86_64-3.7/apex/multi_tensor_apply/__init__.py -> /usr/local/lib/python3.7/dist-packages/apex/multi_tensor_apply\n",
            "  copying build/lib.linux-x86_64-3.7/apex/multi_tensor_apply/multi_tensor_apply.py -> /usr/local/lib/python3.7/dist-packages/apex/multi_tensor_apply\n",
            "  creating /usr/local/lib/python3.7/dist-packages/apex/reparameterization\n",
            "  copying build/lib.linux-x86_64-3.7/apex/reparameterization/__init__.py -> /usr/local/lib/python3.7/dist-packages/apex/reparameterization\n",
            "  copying build/lib.linux-x86_64-3.7/apex/reparameterization/weight_norm.py -> /usr/local/lib/python3.7/dist-packages/apex/reparameterization\n",
            "  copying build/lib.linux-x86_64-3.7/apex/reparameterization/reparameterization.py -> /usr/local/lib/python3.7/dist-packages/apex/reparameterization\n",
            "  creating /usr/local/lib/python3.7/dist-packages/apex/fp16_utils\n",
            "  copying build/lib.linux-x86_64-3.7/apex/fp16_utils/__init__.py -> /usr/local/lib/python3.7/dist-packages/apex/fp16_utils\n",
            "  copying build/lib.linux-x86_64-3.7/apex/fp16_utils/fp16util.py -> /usr/local/lib/python3.7/dist-packages/apex/fp16_utils\n",
            "  copying build/lib.linux-x86_64-3.7/apex/fp16_utils/fp16_optimizer.py -> /usr/local/lib/python3.7/dist-packages/apex/fp16_utils\n",
            "  copying build/lib.linux-x86_64-3.7/apex/fp16_utils/loss_scaler.py -> /usr/local/lib/python3.7/dist-packages/apex/fp16_utils\n",
            "  copying build/lib.linux-x86_64-3.7/apex/_autocast_utils.py -> /usr/local/lib/python3.7/dist-packages/apex\n",
            "  copying build/lib.linux-x86_64-3.7/amp_C.cpython-37m-x86_64-linux-gnu.so -> /usr/local/lib/python3.7/dist-packages\n",
            "  copying build/lib.linux-x86_64-3.7/fused_layer_norm_cuda.cpython-37m-x86_64-linux-gnu.so -> /usr/local/lib/python3.7/dist-packages\n",
            "  copying build/lib.linux-x86_64-3.7/fused_weight_gradient_mlp_cuda.cpython-37m-x86_64-linux-gnu.so -> /usr/local/lib/python3.7/dist-packages\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/__init__.py to __init__.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/pyprof/__init__.py to __init__.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/pyprof/prof/pointwise.py to pointwise.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/pyprof/prof/linear.py to linear.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/pyprof/prof/dropout.py to dropout.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/pyprof/prof/blas.py to blas.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/pyprof/prof/convert.py to convert.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/pyprof/prof/normalization.py to normalization.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/pyprof/prof/__init__.py to __init__.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/pyprof/prof/usage.py to usage.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/pyprof/prof/prof.py to prof.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/pyprof/prof/data.py to data.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/pyprof/prof/recurrentCell.py to recurrentCell.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/pyprof/prof/misc.py to misc.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/pyprof/prof/__main__.py to __main__.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/pyprof/prof/activation.py to activation.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/pyprof/prof/output.py to output.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/pyprof/prof/randomSample.py to randomSample.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/pyprof/prof/optim.py to optim.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/pyprof/prof/embedding.py to embedding.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/pyprof/prof/conv.py to conv.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/pyprof/prof/reduction.py to reduction.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/pyprof/prof/softmax.py to softmax.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/pyprof/prof/loss.py to loss.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/pyprof/prof/utility.py to utility.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/pyprof/prof/base.py to base.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/pyprof/prof/index_slice_join_mutate.py to index_slice_join_mutate.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/pyprof/prof/pooling.py to pooling.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/pyprof/nvtx/__init__.py to __init__.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/pyprof/nvtx/nvmarker.py to nvmarker.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/pyprof/parse/__init__.py to __init__.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/pyprof/parse/__main__.py to __main__.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/pyprof/parse/parse.py to parse.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/pyprof/parse/kernel.py to kernel.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/pyprof/parse/nvvp.py to nvvp.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/pyprof/parse/db.py to db.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/optimizers/fused_adam.py to fused_adam.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/optimizers/fused_adagrad.py to fused_adagrad.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/optimizers/__init__.py to __init__.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/optimizers/fused_sgd.py to fused_sgd.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/optimizers/fused_lamb.py to fused_lamb.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/optimizers/fused_novograd.py to fused_novograd.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/optimizers/fused_mixed_precision_lamb.py to fused_mixed_precision_lamb.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/parallel/LARC.py to LARC.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/parallel/__init__.py to __init__.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/parallel/distributed.py to distributed.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/parallel/sync_batchnorm.py to sync_batchnorm.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/parallel/optimized_sync_batchnorm.py to optimized_sync_batchnorm.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/parallel/optimized_sync_batchnorm_kernel.py to optimized_sync_batchnorm_kernel.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/parallel/multiproc.py to multiproc.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/parallel/sync_batchnorm_kernel.py to sync_batchnorm_kernel.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/mlp/__init__.py to __init__.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/mlp/mlp.py to mlp.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/transformer/enums.py to enums.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/transformer/microbatches.py to microbatches.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/transformer/__init__.py to __init__.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/transformer/pipeline_parallel/__init__.py to __init__.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/transformer/pipeline_parallel/_timers.py to _timers.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/transformer/pipeline_parallel/p2p_communication.py to p2p_communication.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/transformer/pipeline_parallel/utils.py to utils.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/transformer/pipeline_parallel/schedules/fwd_bwd_pipelining_without_interleaving.py to fwd_bwd_pipelining_without_interleaving.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/transformer/pipeline_parallel/schedules/fwd_bwd_pipelining_with_interleaving.py to fwd_bwd_pipelining_with_interleaving.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/transformer/pipeline_parallel/schedules/__init__.py to __init__.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/transformer/pipeline_parallel/schedules/common.py to common.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/transformer/pipeline_parallel/schedules/fwd_bwd_no_pipelining.py to fwd_bwd_no_pipelining.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/transformer/tensor_parallel/random.py to random.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/transformer/tensor_parallel/layers.py to layers.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/transformer/tensor_parallel/mappings.py to mappings.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/transformer/tensor_parallel/__init__.py to __init__.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/transformer/tensor_parallel/data.py to data.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/transformer/tensor_parallel/cross_entropy.py to cross_entropy.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/transformer/tensor_parallel/utils.py to utils.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/transformer/tensor_parallel/memory.py to memory.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/transformer/log_util.py to log_util.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/transformer/utils.py to utils.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/transformer/testing/commons.py to commons.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/transformer/testing/__init__.py to __init__.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/transformer/testing/standalone_bert.py to standalone_bert.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/transformer/testing/standalone_gpt.py to standalone_gpt.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/transformer/testing/global_vars.py to global_vars.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/transformer/testing/arguments.py to arguments.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/transformer/parallel_state.py to parallel_state.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/transformer/amp/__init__.py to __init__.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/transformer/amp/grad_scaler.py to grad_scaler.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/transformer/_data/__init__.py to __init__.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/transformer/_data/_batchsampler.py to _batchsampler.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/transformer/functional/__init__.py to __init__.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/transformer/functional/fused_softmax.py to fused_softmax.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/normalization/__init__.py to __init__.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/normalization/fused_layer_norm.py to fused_layer_norm.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/RNN/__init__.py to __init__.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/RNN/cells.py to cells.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/RNN/RNNBackend.py to RNNBackend.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/RNN/models.py to models.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/fused_dense/__init__.py to __init__.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/fused_dense/fused_dense.py to fused_dense.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/amp/wrap.py to wrap.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/amp/scaler.py to scaler.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/amp/__init__.py to __init__.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/amp/amp.py to amp.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/amp/compat.py to compat.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/amp/frontend.py to frontend.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/amp/utils.py to utils.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/amp/lists/__init__.py to __init__.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/amp/lists/tensor_overrides.py to tensor_overrides.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/amp/lists/torch_overrides.py to torch_overrides.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/amp/lists/functional_overrides.py to functional_overrides.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/amp/handle.py to handle.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/amp/__version__.py to __version__.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/amp/_amp_state.py to _amp_state.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/amp/opt.py to opt.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/amp/_initialize.py to _initialize.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/amp/rnn_compat.py to rnn_compat.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/amp/_process_optimizer.py to _process_optimizer.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/contrib/xentropy/__init__.py to __init__.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/contrib/xentropy/softmax_xentropy.py to softmax_xentropy.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/contrib/__init__.py to __init__.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/contrib/optimizers/fused_adam.py to fused_adam.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/contrib/optimizers/__init__.py to __init__.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/contrib/optimizers/fused_sgd.py to fused_sgd.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/contrib/optimizers/distributed_fused_lamb.py to distributed_fused_lamb.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/contrib/optimizers/fp16_optimizer.py to fp16_optimizer.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/contrib/optimizers/distributed_fused_adam_v3.py to distributed_fused_adam_v3.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/contrib/optimizers/distributed_fused_adam_v2.py to distributed_fused_adam_v2.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/contrib/optimizers/fused_lamb.py to fused_lamb.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/contrib/optimizers/distributed_fused_adam.py to distributed_fused_adam.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/contrib/transducer/__init__.py to __init__.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/contrib/transducer/transducer.py to transducer.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/contrib/layer_norm/__init__.py to __init__.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/contrib/layer_norm/layer_norm.py to layer_norm.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/contrib/multihead_attn/mask_softmax_dropout_func.py to mask_softmax_dropout_func.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/contrib/multihead_attn/__init__.py to __init__.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/contrib/multihead_attn/fast_encdec_multihead_attn_norm_add_func.py to fast_encdec_multihead_attn_norm_add_func.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/contrib/multihead_attn/fast_self_multihead_attn_func.py to fast_self_multihead_attn_func.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/contrib/multihead_attn/self_multihead_attn_func.py to self_multihead_attn_func.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/contrib/multihead_attn/fast_self_multihead_attn_norm_add_func.py to fast_self_multihead_attn_norm_add_func.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/contrib/multihead_attn/encdec_multihead_attn_func.py to encdec_multihead_attn_func.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/contrib/multihead_attn/fast_encdec_multihead_attn_func.py to fast_encdec_multihead_attn_func.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/contrib/multihead_attn/encdec_multihead_attn.py to encdec_multihead_attn.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/contrib/multihead_attn/self_multihead_attn.py to self_multihead_attn.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/contrib/groupbn/__init__.py to __init__.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/contrib/groupbn/batch_norm.py to batch_norm.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/contrib/fmha/__init__.py to __init__.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/contrib/fmha/fmha.py to fmha.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/contrib/sparsity/sparse_masklib.py to sparse_masklib.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/contrib/sparsity/__init__.py to __init__.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/contrib/sparsity/asp.py to asp.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/contrib/sparsity/permutation_search_kernels/__init__.py to __init__.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/contrib/sparsity/permutation_search_kernels/exhaustive_search.py to exhaustive_search.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/contrib/sparsity/permutation_search_kernels/permutation_utilities.py to permutation_utilities.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/contrib/sparsity/permutation_search_kernels/call_permutation_search_kernels.py to call_permutation_search_kernels.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/contrib/sparsity/permutation_lib.py to permutation_lib.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/contrib/bottleneck/__init__.py to __init__.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/contrib/bottleneck/bottleneck.py to bottleneck.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/contrib/bottleneck/bottleneck_module_test.py to bottleneck_module_test.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/contrib/bottleneck/test.py to test.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/multi_tensor_apply/__init__.py to __init__.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/multi_tensor_apply/multi_tensor_apply.py to multi_tensor_apply.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/reparameterization/__init__.py to __init__.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/reparameterization/weight_norm.py to weight_norm.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/reparameterization/reparameterization.py to reparameterization.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/fp16_utils/__init__.py to __init__.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/fp16_utils/fp16util.py to fp16util.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/fp16_utils/fp16_optimizer.py to fp16_optimizer.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/fp16_utils/loss_scaler.py to loss_scaler.cpython-37.pyc\n",
            "  byte-compiling /usr/local/lib/python3.7/dist-packages/apex/_autocast_utils.py to _autocast_utils.cpython-37.pyc\n",
            "  running install_egg_info\n",
            "  running egg_info\n",
            "  creating apex.egg-info\n",
            "  writing apex.egg-info/PKG-INFO\n",
            "  writing dependency_links to apex.egg-info/dependency_links.txt\n",
            "  writing top-level names to apex.egg-info/top_level.txt\n",
            "  writing manifest file 'apex.egg-info/SOURCES.txt'\n",
            "  adding license file 'LICENSE'\n",
            "  writing manifest file 'apex.egg-info/SOURCES.txt'\n",
            "  Copying apex.egg-info to /usr/local/lib/python3.7/dist-packages/apex-0.1-py3.7.egg-info\n",
            "  running install_scripts\n",
            "  writing list of installed files to '/tmp/pip-record-114odnj4/install-record.txt'\n",
            "  Running setup.py install for apex ... \u001b[?25l\u001b[?25hdone\n",
            "Successfully installed apex-0.1\n",
            "\u001b[33mWARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv\u001b[0m\u001b[33m\n",
            "\u001b[0m"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "oc-EidleBfeB"
      },
      "source": [
        "## Install PyCocoTools"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JwuWoBOxFV6v",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1bbc9165-4ab9-4c11-e5e8-7056bb88968b"
      },
      "source": [
        "!pip3 install cython; pip3 install 'git+https://github.com/cocodataset/cocoapi.git#subdirectory=PythonAPI'"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: cython in /usr/local/lib/python3.7/dist-packages (0.29.28)\n",
            "\u001b[33mWARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv\u001b[0m\u001b[33m\n",
            "\u001b[0mCollecting git+https://github.com/cocodataset/cocoapi.git#subdirectory=PythonAPI\n",
            "  Cloning https://github.com/cocodataset/cocoapi.git to /tmp/pip-req-build-47qk7ub8\n",
            "  Running command git clone --filter=blob:none --quiet https://github.com/cocodataset/cocoapi.git /tmp/pip-req-build-47qk7ub8\n",
            "  Resolved https://github.com/cocodataset/cocoapi.git to commit 8c9bcc3cf640524c4c20a9c40e89cb6a2f2fa0e9\n",
            "  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "Requirement already satisfied: setuptools>=18.0 in /usr/local/lib/python3.7/dist-packages (from pycocotools==2.0) (57.4.0)\n",
            "Requirement already satisfied: cython>=0.27.3 in /usr/local/lib/python3.7/dist-packages (from pycocotools==2.0) (0.29.28)\n",
            "Requirement already satisfied: matplotlib>=2.1.0 in /usr/local/lib/python3.7/dist-packages (from pycocotools==2.0) (3.2.2)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.7/dist-packages (from matplotlib>=2.1.0->pycocotools==2.0) (0.11.0)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib>=2.1.0->pycocotools==2.0) (1.3.2)\n",
            "Requirement already satisfied: numpy>=1.11 in /usr/local/lib/python3.7/dist-packages (from matplotlib>=2.1.0->pycocotools==2.0) (1.21.5)\n",
            "Requirement already satisfied: python-dateutil>=2.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib>=2.1.0->pycocotools==2.0) (2.8.2)\n",
            "Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib>=2.1.0->pycocotools==2.0) (3.0.7)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil>=2.1->matplotlib>=2.1.0->pycocotools==2.0) (1.15.0)\n",
            "Building wheels for collected packages: pycocotools\n",
            "  Building wheel for pycocotools (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for pycocotools: filename=pycocotools-2.0-cp37-cp37m-linux_x86_64.whl size=264362 sha256=f8f636b98868d56ec773f19acdfb484cfdb7634407285f6bc62412434d20d801\n",
            "  Stored in directory: /tmp/pip-ephem-wheel-cache-49eljcow/wheels/e2/6b/1d/344ac773c7495ea0b85eb228bc66daec7400a143a92d36b7b1\n",
            "Successfully built pycocotools\n",
            "Installing collected packages: pycocotools\n",
            "  Attempting uninstall: pycocotools\n",
            "    Found existing installation: pycocotools 2.0.4\n",
            "    Uninstalling pycocotools-2.0.4:\n",
            "      Successfully uninstalled pycocotools-2.0.4\n",
            "Successfully installed pycocotools-2.0\n",
            "\u001b[33mWARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv\u001b[0m\u001b[33m\n",
            "\u001b[0m"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UEdiT0rJBmRA"
      },
      "source": [
        "# Download your Data\n",
        "\n",
        "We'll download our dataset from Roboflow. Use the \"**Pascal VOC**\" export format.\n",
        "\n",
        "To get your data into Roboflow, follow the [Getting Started Guide](https://blog.roboflow.ai/getting-started-with-roboflow/).\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zJkU0eH-VgCn",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "32846e9e-65d2-4ad5-e222-ed4340d10dec"
      },
      "source": [
        "#to get your roboflow code below please follow the link output by this cell\n",
        "!pip -q install roboflow\n",
        "from roboflow import Roboflow\n",
        "rf = Roboflow(model_format=\"voc\", notebook=\"yolox\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m178.7/178.7 KB\u001b[0m \u001b[31m5.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m145.5/145.5 KB\u001b[0m \u001b[31m17.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.1/1.1 MB\u001b[0m \u001b[31m30.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m67.8/67.8 KB\u001b[0m \u001b[31m9.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m138.5/138.5 KB\u001b[0m \u001b[31m18.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m596.3/596.3 KB\u001b[0m \u001b[31m47.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m63.1/63.1 KB\u001b[0m \u001b[31m8.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25h  Building wheel for wget (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n",
            "torchtext 0.11.0 requires torch==1.10.0, but you have torch 1.8.0+cu111 which is incompatible.\n",
            "google-colab 1.0.0 requires requests~=2.23.0, but you have requests 2.27.1 which is incompatible.\n",
            "datascience 0.10.6 requires folium==0.2.1, but you have folium 0.8.3 which is incompatible.\n",
            "albumentations 0.1.12 requires imgaug<0.2.7,>=0.2.5, but you have imgaug 0.2.9 which is incompatible.\u001b[0m\u001b[31m\n",
            "\u001b[0m\u001b[33mWARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv\u001b[0m\u001b[33m\n",
            "\u001b[0mupload and label your dataset, and get an API KEY here: https://app.roboflow.com/?model=voc&ref=yolox\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gp1L8zdwGo_j",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e576b6ff-09db-4921-beb5-6cfd2cd07008"
      },
      "source": [
        "%cd /content/\n",
        "!curl -L \"https://public.roboflow.com/ds/ZbKt4sSlCH?key=tw4jYznrDR\" > roboflow.zip; unzip roboflow.zip; rm roboflow.zip\n",
        "#from roboflow import Roboflow\n",
        "#rf = Roboflow(api_key=\"YOUR_API_KEY\", model_format=\"voc\")\n",
        "#project = rf.workspace().project(\"YOUR_PROJECT\")\n",
        "#dataset = project.version(\"YOUR_VERSION\").download(\"voc\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "/content\n",
            "  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n",
            "                                 Dload  Upload   Total   Spent    Left  Speed\n",
            "100   886  100   886    0     0   1240      0 --:--:-- --:--:-- --:--:--  1242\n",
            "100 8891k  100 8891k    0     0  4806k      0  0:00:01  0:00:01 --:--:-- 22.2M\n",
            "Archive:  roboflow.zip\n",
            " extracting: README.dataset.txt      \n",
            " extracting: README.roboflow.txt     \n",
            "   creating: test/\n",
            " extracting: test/BloodImage_00038_jpg.rf.63d04b5c9db95f32fa7669f72e4903ca.jpg  \n",
            " extracting: test/BloodImage_00038_jpg.rf.63d04b5c9db95f32fa7669f72e4903ca.xml  \n",
            " extracting: test/BloodImage_00044_jpg.rf.589ee3d351cb6d9a3f7b7a942da5370a.jpg  \n",
            " extracting: test/BloodImage_00044_jpg.rf.589ee3d351cb6d9a3f7b7a942da5370a.xml  \n",
            " extracting: test/BloodImage_00062_jpg.rf.1cecc20a21ac39cb54cf532081a1e893.jpg  \n",
            " extracting: test/BloodImage_00062_jpg.rf.1cecc20a21ac39cb54cf532081a1e893.xml  \n",
            " extracting: test/BloodImage_00090_jpg.rf.5267690cb6a13608d39b0424bef3c9b4.jpg  \n",
            " extracting: test/BloodImage_00090_jpg.rf.5267690cb6a13608d39b0424bef3c9b4.xml  \n",
            " extracting: test/BloodImage_00099_jpg.rf.744666666386a07e242e214e041945ba.jpg  \n",
            " extracting: test/BloodImage_00099_jpg.rf.744666666386a07e242e214e041945ba.xml  \n",
            " extracting: test/BloodImage_00112_jpg.rf.e4b507506c4a70882bb23cb743061a66.jpg  \n",
            " extracting: test/BloodImage_00112_jpg.rf.e4b507506c4a70882bb23cb743061a66.xml  \n",
            " extracting: test/BloodImage_00113_jpg.rf.250f3f0288ad89f4f961529434d99713.jpg  \n",
            " extracting: test/BloodImage_00113_jpg.rf.250f3f0288ad89f4f961529434d99713.xml  \n",
            " extracting: test/BloodImage_00120_jpg.rf.01566ae891eda007b18994a74255367c.jpg  \n",
            " extracting: test/BloodImage_00120_jpg.rf.01566ae891eda007b18994a74255367c.xml  \n",
            " extracting: test/BloodImage_00133_jpg.rf.4f9b4435c673ed96c9deeb985c805d24.jpg  \n",
            " extracting: test/BloodImage_00133_jpg.rf.4f9b4435c673ed96c9deeb985c805d24.xml  \n",
            " extracting: test/BloodImage_00134_jpg.rf.f026a98ce4257048a617a01c70aac485.jpg  \n",
            " extracting: test/BloodImage_00134_jpg.rf.f026a98ce4257048a617a01c70aac485.xml  \n",
            " extracting: test/BloodImage_00154_jpg.rf.c2a4d782d9505a7e89d4a71cdb38461e.jpg  \n",
            " extracting: test/BloodImage_00154_jpg.rf.c2a4d782d9505a7e89d4a71cdb38461e.xml  \n",
            " extracting: test/BloodImage_00160_jpg.rf.63a1db217fa927dad3f2d2488b5e7862.jpg  \n",
            " extracting: test/BloodImage_00160_jpg.rf.63a1db217fa927dad3f2d2488b5e7862.xml  \n",
            " extracting: test/BloodImage_00190_jpg.rf.257a9f96afccdbed515a290b694f4c15.jpg  \n",
            " extracting: test/BloodImage_00190_jpg.rf.257a9f96afccdbed515a290b694f4c15.xml  \n",
            " extracting: test/BloodImage_00191_jpg.rf.9fecdaf56689fc80d667ef8d8da6bc27.jpg  \n",
            " extracting: test/BloodImage_00191_jpg.rf.9fecdaf56689fc80d667ef8d8da6bc27.xml  \n",
            " extracting: test/BloodImage_00204_jpg.rf.0555bc62812f0987a35f05f0960dd7c4.jpg  \n",
            " extracting: test/BloodImage_00204_jpg.rf.0555bc62812f0987a35f05f0960dd7c4.xml  \n",
            " extracting: test/BloodImage_00227_jpg.rf.816711b066fae3bdf16851eaebc13eb5.jpg  \n",
            " extracting: test/BloodImage_00227_jpg.rf.816711b066fae3bdf16851eaebc13eb5.xml  \n",
            " extracting: test/BloodImage_00235_jpg.rf.6028248c6b2b38ea0d4045d289d56ca3.jpg  \n",
            " extracting: test/BloodImage_00235_jpg.rf.6028248c6b2b38ea0d4045d289d56ca3.xml  \n",
            " extracting: test/BloodImage_00241_jpg.rf.00d6593ca59122287542bf819f62fb43.jpg  \n",
            " extracting: test/BloodImage_00241_jpg.rf.00d6593ca59122287542bf819f62fb43.xml  \n",
            " extracting: test/BloodImage_00254_jpg.rf.3783a73c7c92da8010897e8fb9d14448.jpg  \n",
            " extracting: test/BloodImage_00254_jpg.rf.3783a73c7c92da8010897e8fb9d14448.xml  \n",
            " extracting: test/BloodImage_00265_jpg.rf.acdcdc5c22ee42608c69240af0c5d732.jpg  \n",
            " extracting: test/BloodImage_00265_jpg.rf.acdcdc5c22ee42608c69240af0c5d732.xml  \n",
            " extracting: test/BloodImage_00266_jpg.rf.ec59f2e7492adb14ff2eb59f3c94c92f.jpg  \n",
            " extracting: test/BloodImage_00266_jpg.rf.ec59f2e7492adb14ff2eb59f3c94c92f.xml  \n",
            " extracting: test/BloodImage_00275_jpg.rf.850c4258ce35168b019485bf3b0229ee.jpg  \n",
            " extracting: test/BloodImage_00275_jpg.rf.850c4258ce35168b019485bf3b0229ee.xml  \n",
            " extracting: test/BloodImage_00278_jpg.rf.c271aa5245a39cc10463d8d5f9ee4bf8.jpg  \n",
            " extracting: test/BloodImage_00278_jpg.rf.c271aa5245a39cc10463d8d5f9ee4bf8.xml  \n",
            " extracting: test/BloodImage_00284_jpg.rf.fb0089e655be201ea27173598ef30825.jpg  \n",
            " extracting: test/BloodImage_00284_jpg.rf.fb0089e655be201ea27173598ef30825.xml  \n",
            " extracting: test/BloodImage_00289_jpg.rf.e4e288486cea56079f9a7c913d4b450b.jpg  \n",
            " extracting: test/BloodImage_00289_jpg.rf.e4e288486cea56079f9a7c913d4b450b.xml  \n",
            " extracting: test/BloodImage_00301_jpg.rf.105fe61dd7143cb22960ed9829c67727.jpg  \n",
            " extracting: test/BloodImage_00301_jpg.rf.105fe61dd7143cb22960ed9829c67727.xml  \n",
            " extracting: test/BloodImage_00302_jpg.rf.9a22d757ab1acdd7ac35da2a8a0a2586.jpg  \n",
            " extracting: test/BloodImage_00302_jpg.rf.9a22d757ab1acdd7ac35da2a8a0a2586.xml  \n",
            " extracting: test/BloodImage_00325_jpg.rf.5aaa15454be96e1334cc7e22399bbee4.jpg  \n",
            " extracting: test/BloodImage_00325_jpg.rf.5aaa15454be96e1334cc7e22399bbee4.xml  \n",
            " extracting: test/BloodImage_00334_jpg.rf.5f7249b59c3c4a0043325619a929116f.jpg  \n",
            " extracting: test/BloodImage_00334_jpg.rf.5f7249b59c3c4a0043325619a929116f.xml  \n",
            " extracting: test/BloodImage_00336_jpg.rf.0c43658168a0602346cb8c597cde2cb4.jpg  \n",
            " extracting: test/BloodImage_00336_jpg.rf.0c43658168a0602346cb8c597cde2cb4.xml  \n",
            " extracting: test/BloodImage_00337_jpg.rf.fe254f7319162b61c5fbf7ce0cb0f534.jpg  \n",
            " extracting: test/BloodImage_00337_jpg.rf.fe254f7319162b61c5fbf7ce0cb0f534.xml  \n",
            " extracting: test/BloodImage_00350_jpg.rf.db4df841149322ca365bda6df243a4c8.jpg  \n",
            " extracting: test/BloodImage_00350_jpg.rf.db4df841149322ca365bda6df243a4c8.xml  \n",
            " extracting: test/BloodImage_00359_jpg.rf.56ffe9f91e22e7d456aa886ce6ca117d.jpg  \n",
            " extracting: test/BloodImage_00359_jpg.rf.56ffe9f91e22e7d456aa886ce6ca117d.xml  \n",
            " extracting: test/BloodImage_00369_jpg.rf.49cee9c3a29b86001acadc99962652d6.jpg  \n",
            " extracting: test/BloodImage_00369_jpg.rf.49cee9c3a29b86001acadc99962652d6.xml  \n",
            " extracting: test/BloodImage_00385_jpg.rf.3b93195bce5adeae2a3d6d5cb9d12033.jpg  \n",
            " extracting: test/BloodImage_00385_jpg.rf.3b93195bce5adeae2a3d6d5cb9d12033.xml  \n",
            " extracting: test/BloodImage_00386_jpg.rf.30a456d560fcbb4662900a288de765c3.jpg  \n",
            " extracting: test/BloodImage_00386_jpg.rf.30a456d560fcbb4662900a288de765c3.xml  \n",
            "   creating: train/\n",
            " extracting: train/BloodImage_00001_jpg.rf.d702f2b1212a2ed897b5607804109acf.jpg  \n",
            " extracting: train/BloodImage_00001_jpg.rf.d702f2b1212a2ed897b5607804109acf.xml  \n",
            " extracting: train/BloodImage_00002_jpg.rf.c10bc2092c5ffbbb18f5d8db2e5a00b7.jpg  \n",
            " extracting: train/BloodImage_00002_jpg.rf.c10bc2092c5ffbbb18f5d8db2e5a00b7.xml  \n",
            " extracting: train/BloodImage_00003_jpg.rf.4c25ef46042b85efe0700671af1fba87.jpg  \n",
            " extracting: train/BloodImage_00003_jpg.rf.4c25ef46042b85efe0700671af1fba87.xml  \n",
            " extracting: train/BloodImage_00005_jpg.rf.5b7970d683a751cab17ed07b190488c3.jpg  \n",
            " extracting: train/BloodImage_00005_jpg.rf.5b7970d683a751cab17ed07b190488c3.xml  \n",
            " extracting: train/BloodImage_00006_jpg.rf.5843ee9ebfa219fd22679db5ecee8035.jpg  \n",
            " extracting: train/BloodImage_00006_jpg.rf.5843ee9ebfa219fd22679db5ecee8035.xml  \n",
            " extracting: train/BloodImage_00007_jpg.rf.7f3cae9502e84fc765fadf5c2c003c14.jpg  \n",
            " extracting: train/BloodImage_00007_jpg.rf.7f3cae9502e84fc765fadf5c2c003c14.xml  \n",
            " extracting: train/BloodImage_00008_jpg.rf.1c8b2fef1372ccd864dc23b6fe935a8e.jpg  \n",
            " extracting: train/BloodImage_00008_jpg.rf.1c8b2fef1372ccd864dc23b6fe935a8e.xml  \n",
            " extracting: train/BloodImage_00009_jpg.rf.0c18d19d1e59d1fe3e53f7a18380cc6b.jpg  \n",
            " extracting: train/BloodImage_00009_jpg.rf.0c18d19d1e59d1fe3e53f7a18380cc6b.xml  \n",
            " extracting: train/BloodImage_00010_jpg.rf.720639748c66ecb094ef9e4f0413f4e1.jpg  \n",
            " extracting: train/BloodImage_00010_jpg.rf.720639748c66ecb094ef9e4f0413f4e1.xml  \n",
            " extracting: train/BloodImage_00011_jpg.rf.36cb18cf5e06d50c880aa1485bf91e51.jpg  \n",
            " extracting: train/BloodImage_00011_jpg.rf.36cb18cf5e06d50c880aa1485bf91e51.xml  \n",
            " extracting: train/BloodImage_00013_jpg.rf.2d36bc6975822a7799b350b580a946c2.jpg  \n",
            " extracting: train/BloodImage_00013_jpg.rf.2d36bc6975822a7799b350b580a946c2.xml  \n",
            " extracting: train/BloodImage_00014_jpg.rf.c079cb4d4b27bd90cf2b456109d906c5.jpg  \n",
            " extracting: train/BloodImage_00014_jpg.rf.c079cb4d4b27bd90cf2b456109d906c5.xml  \n",
            " extracting: train/BloodImage_00015_jpg.rf.ccb967d23f035411d36b337cb8d7fe93.jpg  \n",
            " extracting: train/BloodImage_00015_jpg.rf.ccb967d23f035411d36b337cb8d7fe93.xml  \n",
            " extracting: train/BloodImage_00016_jpg.rf.04c8657ee6b0eb3fd19c804baa1e27c0.jpg  \n",
            " extracting: train/BloodImage_00016_jpg.rf.04c8657ee6b0eb3fd19c804baa1e27c0.xml  \n",
            " extracting: train/BloodImage_00018_jpg.rf.2bd85354fc1b2e42446be452727a71a0.jpg  \n",
            " extracting: train/BloodImage_00018_jpg.rf.2bd85354fc1b2e42446be452727a71a0.xml  \n",
            " extracting: train/BloodImage_00019_jpg.rf.e0d51910e182dca5b4e6afae15cf35a7.jpg  \n",
            " extracting: train/BloodImage_00019_jpg.rf.e0d51910e182dca5b4e6afae15cf35a7.xml  \n",
            " extracting: train/BloodImage_00020_jpg.rf.5be1260f16e85f6d3b3f940a38cd7392.jpg  \n",
            " extracting: train/BloodImage_00020_jpg.rf.5be1260f16e85f6d3b3f940a38cd7392.xml  \n",
            " extracting: train/BloodImage_00022_jpg.rf.acc5dc23d9f1e5c53981a2eda2cd9827.jpg  \n",
            " extracting: train/BloodImage_00022_jpg.rf.acc5dc23d9f1e5c53981a2eda2cd9827.xml  \n",
            " extracting: train/BloodImage_00023_jpg.rf.6dea1d883100d129b1b7ded9add2c24f.jpg  \n",
            " extracting: train/BloodImage_00023_jpg.rf.6dea1d883100d129b1b7ded9add2c24f.xml  \n",
            " extracting: train/BloodImage_00024_jpg.rf.323c51bbfa65bf029bef80b250107268.jpg  \n",
            " extracting: train/BloodImage_00024_jpg.rf.323c51bbfa65bf029bef80b250107268.xml  \n",
            " extracting: train/BloodImage_00028_jpg.rf.1a054fd7ba2ad7f7b3e3245212a14792.jpg  \n",
            " extracting: train/BloodImage_00028_jpg.rf.1a054fd7ba2ad7f7b3e3245212a14792.xml  \n",
            " extracting: train/BloodImage_00029_jpg.rf.9d8e026ce7b048d2d094f2f7f229f368.jpg  \n",
            " extracting: train/BloodImage_00029_jpg.rf.9d8e026ce7b048d2d094f2f7f229f368.xml  \n",
            " extracting: train/BloodImage_00030_jpg.rf.71385416b4e288babd3e52de3941fc6b.jpg  \n",
            " extracting: train/BloodImage_00030_jpg.rf.71385416b4e288babd3e52de3941fc6b.xml  \n",
            " extracting: train/BloodImage_00031_jpg.rf.bcce96daec2fe43241ed711e793cb3d4.jpg  \n",
            " extracting: train/BloodImage_00031_jpg.rf.bcce96daec2fe43241ed711e793cb3d4.xml  \n",
            " extracting: train/BloodImage_00032_jpg.rf.99717e8579fd0c8d1fb28dfb5e96dae0.jpg  \n",
            " extracting: train/BloodImage_00032_jpg.rf.99717e8579fd0c8d1fb28dfb5e96dae0.xml  \n",
            " extracting: train/BloodImage_00033_jpg.rf.ed29a91d8384959065269d3584e4acb7.jpg  \n",
            " extracting: train/BloodImage_00033_jpg.rf.ed29a91d8384959065269d3584e4acb7.xml  \n",
            " extracting: train/BloodImage_00034_jpg.rf.2ffb51d919ecc92d369cffbfe88f41c3.jpg  \n",
            " extracting: train/BloodImage_00034_jpg.rf.2ffb51d919ecc92d369cffbfe88f41c3.xml  \n",
            " extracting: train/BloodImage_00035_jpg.rf.ac506be1c23d0f3a09d8e340a008f885.jpg  \n",
            " extracting: train/BloodImage_00035_jpg.rf.ac506be1c23d0f3a09d8e340a008f885.xml  \n",
            " extracting: train/BloodImage_00036_jpg.rf.f9b3f1851acea0c511bdbb05aa0e4200.jpg  \n",
            " extracting: train/BloodImage_00036_jpg.rf.f9b3f1851acea0c511bdbb05aa0e4200.xml  \n",
            " extracting: train/BloodImage_00037_jpg.rf.f10b2a6625522717d70040e245a43103.jpg  \n",
            " extracting: train/BloodImage_00037_jpg.rf.f10b2a6625522717d70040e245a43103.xml  \n",
            " extracting: train/BloodImage_00039_jpg.rf.e52773eb869d63407dac92ddc09aa183.jpg  \n",
            " extracting: train/BloodImage_00039_jpg.rf.e52773eb869d63407dac92ddc09aa183.xml  \n",
            " extracting: train/BloodImage_00040_jpg.rf.954258c34647369f74e3a37e1e675acb.jpg  \n",
            " extracting: train/BloodImage_00040_jpg.rf.954258c34647369f74e3a37e1e675acb.xml  \n",
            " extracting: train/BloodImage_00041_jpg.rf.80dc89cfe56e555cef5aa8742dec9ed7.jpg  \n",
            " extracting: train/BloodImage_00041_jpg.rf.80dc89cfe56e555cef5aa8742dec9ed7.xml  \n",
            " extracting: train/BloodImage_00042_jpg.rf.e0e7f2299512850aa9e1496cc40b35a0.jpg  \n",
            " extracting: train/BloodImage_00042_jpg.rf.e0e7f2299512850aa9e1496cc40b35a0.xml  \n",
            " extracting: train/BloodImage_00043_jpg.rf.f11aab205044a15d8585d565a04bec19.jpg  \n",
            " extracting: train/BloodImage_00043_jpg.rf.f11aab205044a15d8585d565a04bec19.xml  \n",
            " extracting: train/BloodImage_00045_jpg.rf.293583cdffcb84f3c126ad5fb0a5c10e.jpg  \n",
            " extracting: train/BloodImage_00045_jpg.rf.293583cdffcb84f3c126ad5fb0a5c10e.xml  \n",
            " extracting: train/BloodImage_00046_jpg.rf.fc4a2bb5179e91b09d0667faf7e6dfa3.jpg  \n",
            " extracting: train/BloodImage_00046_jpg.rf.fc4a2bb5179e91b09d0667faf7e6dfa3.xml  \n",
            " extracting: train/BloodImage_00047_jpg.rf.8398043d05fecb77cf4e650d2208fb0d.jpg  \n",
            " extracting: train/BloodImage_00047_jpg.rf.8398043d05fecb77cf4e650d2208fb0d.xml  \n",
            " extracting: train/BloodImage_00048_jpg.rf.728c77ec6eebf109593bfdb9597ea65f.jpg  \n",
            " extracting: train/BloodImage_00048_jpg.rf.728c77ec6eebf109593bfdb9597ea65f.xml  \n",
            " extracting: train/BloodImage_00049_jpg.rf.d34eff6d6dde615eeae0515a9f94ea88.jpg  \n",
            " extracting: train/BloodImage_00049_jpg.rf.d34eff6d6dde615eeae0515a9f94ea88.xml  \n",
            " extracting: train/BloodImage_00052_jpg.rf.8b1cb0fdfb126b5629795cd4c7dca0b2.jpg  \n",
            " extracting: train/BloodImage_00052_jpg.rf.8b1cb0fdfb126b5629795cd4c7dca0b2.xml  \n",
            " extracting: train/BloodImage_00053_jpg.rf.d7ae83eb982e69dfb0c48b5cb4437e55.jpg  \n",
            " extracting: train/BloodImage_00053_jpg.rf.d7ae83eb982e69dfb0c48b5cb4437e55.xml  \n",
            " extracting: train/BloodImage_00054_jpg.rf.e0701bbac7b3bf5dc3ea26f45b445e2c.jpg  \n",
            " extracting: train/BloodImage_00054_jpg.rf.e0701bbac7b3bf5dc3ea26f45b445e2c.xml  \n",
            " extracting: train/BloodImage_00055_jpg.rf.b47dffc3486b0b7c7c1a067421672d51.jpg  \n",
            " extracting: train/BloodImage_00055_jpg.rf.b47dffc3486b0b7c7c1a067421672d51.xml  \n",
            " extracting: train/BloodImage_00056_jpg.rf.319effd6211d38e7645bfa787d3c2dab.jpg  \n",
            " extracting: train/BloodImage_00056_jpg.rf.319effd6211d38e7645bfa787d3c2dab.xml  \n",
            " extracting: train/BloodImage_00058_jpg.rf.16d6f2ede839c8876e3339c91f4e73ef.jpg  \n",
            " extracting: train/BloodImage_00058_jpg.rf.16d6f2ede839c8876e3339c91f4e73ef.xml  \n",
            " extracting: train/BloodImage_00059_jpg.rf.ef31566ba8899bf8358f53c7ce29063c.jpg  \n",
            " extracting: train/BloodImage_00059_jpg.rf.ef31566ba8899bf8358f53c7ce29063c.xml  \n",
            " extracting: train/BloodImage_00064_jpg.rf.bf19df7bdde5d68567661f7a9d2d586e.jpg  \n",
            " extracting: train/BloodImage_00064_jpg.rf.bf19df7bdde5d68567661f7a9d2d586e.xml  \n",
            " extracting: train/BloodImage_00065_jpg.rf.ddc13d1753ba439a75be985268c15813.jpg  \n",
            " extracting: train/BloodImage_00065_jpg.rf.ddc13d1753ba439a75be985268c15813.xml  \n",
            " extracting: train/BloodImage_00066_jpg.rf.26aa8e7bf8c8e2601b56d24d5d8a61fb.jpg  \n",
            " extracting: train/BloodImage_00066_jpg.rf.26aa8e7bf8c8e2601b56d24d5d8a61fb.xml  \n",
            " extracting: train/BloodImage_00067_jpg.rf.244c43eed192e0dcd27ba9bd92b9b18e.jpg  \n",
            " extracting: train/BloodImage_00067_jpg.rf.244c43eed192e0dcd27ba9bd92b9b18e.xml  \n",
            " extracting: train/BloodImage_00068_jpg.rf.cea435e947d1e8661d14f90e0cc71f6a.jpg  \n",
            " extracting: train/BloodImage_00068_jpg.rf.cea435e947d1e8661d14f90e0cc71f6a.xml  \n",
            " extracting: train/BloodImage_00072_jpg.rf.4dea0e09c770a4de243d19921135ce15.jpg  \n",
            " extracting: train/BloodImage_00072_jpg.rf.4dea0e09c770a4de243d19921135ce15.xml  \n",
            " extracting: train/BloodImage_00073_jpg.rf.195c2eb474e50e3707a12cb06739508b.jpg  \n",
            " extracting: train/BloodImage_00073_jpg.rf.195c2eb474e50e3707a12cb06739508b.xml  \n",
            " extracting: train/BloodImage_00074_jpg.rf.d76fb021c6e3ea3606b74b9f38a982da.jpg  \n",
            " extracting: train/BloodImage_00074_jpg.rf.d76fb021c6e3ea3606b74b9f38a982da.xml  \n",
            " extracting: train/BloodImage_00077_jpg.rf.ea1ac390cf353b6825fe2f86375db707.jpg  \n",
            " extracting: train/BloodImage_00077_jpg.rf.ea1ac390cf353b6825fe2f86375db707.xml  \n",
            " extracting: train/BloodImage_00078_jpg.rf.4f5978ebeafc09a920f9407f8acd2d5a.jpg  \n",
            " extracting: train/BloodImage_00078_jpg.rf.4f5978ebeafc09a920f9407f8acd2d5a.xml  \n",
            " extracting: train/BloodImage_00079_jpg.rf.2a2c70686066bf5f4634e747dc90dd58.jpg  \n",
            " extracting: train/BloodImage_00079_jpg.rf.2a2c70686066bf5f4634e747dc90dd58.xml  \n",
            " extracting: train/BloodImage_00081_jpg.rf.229ebb7e6402a2ac724a5a662d5b7e99.jpg  \n",
            " extracting: train/BloodImage_00081_jpg.rf.229ebb7e6402a2ac724a5a662d5b7e99.xml  \n",
            " extracting: train/BloodImage_00082_jpg.rf.66e0043d7cda781d565786264330eb55.jpg  \n",
            " extracting: train/BloodImage_00082_jpg.rf.66e0043d7cda781d565786264330eb55.xml  \n",
            " extracting: train/BloodImage_00083_jpg.rf.0307243d1591caafc332240f3e4e39b6.jpg  \n",
            " extracting: train/BloodImage_00083_jpg.rf.0307243d1591caafc332240f3e4e39b6.xml  \n",
            " extracting: train/BloodImage_00087_jpg.rf.4ed67af94b2d74d0b6db05f10d1fbf57.jpg  \n",
            " extracting: train/BloodImage_00087_jpg.rf.4ed67af94b2d74d0b6db05f10d1fbf57.xml  \n",
            " extracting: train/BloodImage_00088_jpg.rf.19b4ccde27cd787d761ac913158ea7f8.jpg  \n",
            " extracting: train/BloodImage_00088_jpg.rf.19b4ccde27cd787d761ac913158ea7f8.xml  \n",
            " extracting: train/BloodImage_00089_jpg.rf.7277987610ce4b8057fc2255ec1deceb.jpg  \n",
            " extracting: train/BloodImage_00089_jpg.rf.7277987610ce4b8057fc2255ec1deceb.xml  \n",
            " extracting: train/BloodImage_00091_jpg.rf.6d67a1893a8efb19a33afa4b62e87e93.jpg  \n",
            " extracting: train/BloodImage_00091_jpg.rf.6d67a1893a8efb19a33afa4b62e87e93.xml  \n",
            " extracting: train/BloodImage_00094_jpg.rf.9eee88888a92b5208516e8b880cf46b6.jpg  \n",
            " extracting: train/BloodImage_00094_jpg.rf.9eee88888a92b5208516e8b880cf46b6.xml  \n",
            " extracting: train/BloodImage_00095_jpg.rf.16971a175ba68f23bebe78d5075d540b.jpg  \n",
            " extracting: train/BloodImage_00095_jpg.rf.16971a175ba68f23bebe78d5075d540b.xml  \n",
            " extracting: train/BloodImage_00097_jpg.rf.c38c2cbdc33259648be15cfd9a43b2b7.jpg  \n",
            " extracting: train/BloodImage_00097_jpg.rf.c38c2cbdc33259648be15cfd9a43b2b7.xml  \n",
            " extracting: train/BloodImage_00098_jpg.rf.065b4cca0dc147f1f2768e62f90d059f.jpg  \n",
            " extracting: train/BloodImage_00098_jpg.rf.065b4cca0dc147f1f2768e62f90d059f.xml  \n",
            " extracting: train/BloodImage_00100_jpg.rf.73c6e7f83c1a68208d5c08d359038a8f.jpg  \n",
            " extracting: train/BloodImage_00100_jpg.rf.73c6e7f83c1a68208d5c08d359038a8f.xml  \n",
            " extracting: train/BloodImage_00101_jpg.rf.6c604197453717b53def341cb276878a.jpg  \n",
            " extracting: train/BloodImage_00101_jpg.rf.6c604197453717b53def341cb276878a.xml  \n",
            " extracting: train/BloodImage_00103_jpg.rf.9907b3dbc5f0c74428d3c7971b644222.jpg  \n",
            " extracting: train/BloodImage_00103_jpg.rf.9907b3dbc5f0c74428d3c7971b644222.xml  \n",
            " extracting: train/BloodImage_00106_jpg.rf.fd43315c4bf62f68262040e9253e4a99.jpg  \n",
            " extracting: train/BloodImage_00106_jpg.rf.fd43315c4bf62f68262040e9253e4a99.xml  \n",
            " extracting: train/BloodImage_00111_jpg.rf.2177a3168c80354610c6a7c996981595.jpg  \n",
            " extracting: train/BloodImage_00111_jpg.rf.2177a3168c80354610c6a7c996981595.xml  \n",
            " extracting: train/BloodImage_00114_jpg.rf.8907da31dbf9aac7107d884322074dcf.jpg  \n",
            " extracting: train/BloodImage_00114_jpg.rf.8907da31dbf9aac7107d884322074dcf.xml  \n",
            " extracting: train/BloodImage_00115_jpg.rf.ace3f09def7d9e9a78c5891273f3d9fc.jpg  \n",
            " extracting: train/BloodImage_00115_jpg.rf.ace3f09def7d9e9a78c5891273f3d9fc.xml  \n",
            " extracting: train/BloodImage_00117_jpg.rf.b35d5c3f818b6732815da9fb1a3bffa1.jpg  \n",
            " extracting: train/BloodImage_00117_jpg.rf.b35d5c3f818b6732815da9fb1a3bffa1.xml  \n",
            " extracting: train/BloodImage_00124_jpg.rf.f6f4e0138db2ebd88cce18a056627c2d.jpg  \n",
            " extracting: train/BloodImage_00124_jpg.rf.f6f4e0138db2ebd88cce18a056627c2d.xml  \n",
            " extracting: train/BloodImage_00125_jpg.rf.2eecb21bba4ce18441b6228e460fc7a8.jpg  \n",
            " extracting: train/BloodImage_00125_jpg.rf.2eecb21bba4ce18441b6228e460fc7a8.xml  \n",
            " extracting: train/BloodImage_00132_jpg.rf.209495d7f38eb9b80bc009ce3a9b5f96.jpg  \n",
            " extracting: train/BloodImage_00132_jpg.rf.209495d7f38eb9b80bc009ce3a9b5f96.xml  \n",
            " extracting: train/BloodImage_00136_jpg.rf.a86a515dfbe0ce2bd57cc87fed8ea862.jpg  \n",
            " extracting: train/BloodImage_00136_jpg.rf.a86a515dfbe0ce2bd57cc87fed8ea862.xml  \n",
            " extracting: train/BloodImage_00137_jpg.rf.264ee70ffac6681843fa4dbcfb36b11f.jpg  \n",
            " extracting: train/BloodImage_00137_jpg.rf.264ee70ffac6681843fa4dbcfb36b11f.xml  \n",
            " extracting: train/BloodImage_00139_jpg.rf.5e4411dde64c7638efc96e37c67ff2cb.jpg  \n",
            " extracting: train/BloodImage_00139_jpg.rf.5e4411dde64c7638efc96e37c67ff2cb.xml  \n",
            " extracting: train/BloodImage_00140_jpg.rf.e36558fb41aa42903ede72a60b51a73d.jpg  \n",
            " extracting: train/BloodImage_00140_jpg.rf.e36558fb41aa42903ede72a60b51a73d.xml  \n",
            " extracting: train/BloodImage_00142_jpg.rf.4dc589baf76059f3d5b11226b77cdd43.jpg  \n",
            " extracting: train/BloodImage_00142_jpg.rf.4dc589baf76059f3d5b11226b77cdd43.xml  \n",
            " extracting: train/BloodImage_00143_jpg.rf.3d6cc38d06ee5ad7856c965d819cf2b2.jpg  \n",
            " extracting: train/BloodImage_00143_jpg.rf.3d6cc38d06ee5ad7856c965d819cf2b2.xml  \n",
            " extracting: train/BloodImage_00144_jpg.rf.a3944bb4f6d72390c0043e0ff7138e5e.jpg  \n",
            " extracting: train/BloodImage_00144_jpg.rf.a3944bb4f6d72390c0043e0ff7138e5e.xml  \n",
            " extracting: train/BloodImage_00145_jpg.rf.3053bb2ea20050aded47c62d31766c64.jpg  \n",
            " extracting: train/BloodImage_00145_jpg.rf.3053bb2ea20050aded47c62d31766c64.xml  \n",
            " extracting: train/BloodImage_00147_jpg.rf.922f24aecdc26dd8165f897a4ee02826.jpg  \n",
            " extracting: train/BloodImage_00147_jpg.rf.922f24aecdc26dd8165f897a4ee02826.xml  \n",
            " extracting: train/BloodImage_00148_jpg.rf.5dbdae5ee92018cabfef817ae96d88db.jpg  \n",
            " extracting: train/BloodImage_00148_jpg.rf.5dbdae5ee92018cabfef817ae96d88db.xml  \n",
            " extracting: train/BloodImage_00149_jpg.rf.6c3341c91f81cd2086403b77c571fd7d.jpg  \n",
            " extracting: train/BloodImage_00149_jpg.rf.6c3341c91f81cd2086403b77c571fd7d.xml  \n",
            " extracting: train/BloodImage_00150_jpg.rf.6449dff4812a9a6f430a4a7f5853ac2c.jpg  \n",
            " extracting: train/BloodImage_00150_jpg.rf.6449dff4812a9a6f430a4a7f5853ac2c.xml  \n",
            " extracting: train/BloodImage_00152_jpg.rf.5840888b497ba4f60174e17b5c62c622.jpg  \n",
            " extracting: train/BloodImage_00152_jpg.rf.5840888b497ba4f60174e17b5c62c622.xml  \n",
            " extracting: train/BloodImage_00156_jpg.rf.fe572186390c601ff6d64ae7c79ce5d1.jpg  \n",
            " extracting: train/BloodImage_00156_jpg.rf.fe572186390c601ff6d64ae7c79ce5d1.xml  \n",
            " extracting: train/BloodImage_00157_jpg.rf.479c123e5583617fddeb18f3ec477b21.jpg  \n",
            " extracting: train/BloodImage_00157_jpg.rf.479c123e5583617fddeb18f3ec477b21.xml  \n",
            " extracting: train/BloodImage_00158_jpg.rf.f7724626cc249fcf1bb8a031c4f00d10.jpg  \n",
            " extracting: train/BloodImage_00158_jpg.rf.f7724626cc249fcf1bb8a031c4f00d10.xml  \n",
            " extracting: train/BloodImage_00159_jpg.rf.aca04d5f87e8666ecacb56ff2d8d64cc.jpg  \n",
            " extracting: train/BloodImage_00159_jpg.rf.aca04d5f87e8666ecacb56ff2d8d64cc.xml  \n",
            " extracting: train/BloodImage_00162_jpg.rf.36af3fa94f239d77668d63d3816f214c.jpg  \n",
            " extracting: train/BloodImage_00162_jpg.rf.36af3fa94f239d77668d63d3816f214c.xml  \n",
            " extracting: train/BloodImage_00163_jpg.rf.10d0f078d6f9fabdacb5e35ba7e301e5.jpg  \n",
            " extracting: train/BloodImage_00163_jpg.rf.10d0f078d6f9fabdacb5e35ba7e301e5.xml  \n",
            " extracting: train/BloodImage_00164_jpg.rf.7b57dc64e26226501d24c80128890e79.jpg  \n",
            " extracting: train/BloodImage_00164_jpg.rf.7b57dc64e26226501d24c80128890e79.xml  \n",
            " extracting: train/BloodImage_00165_jpg.rf.ea1062188dc6107aaf184afeb2c25e7c.jpg  \n",
            " extracting: train/BloodImage_00165_jpg.rf.ea1062188dc6107aaf184afeb2c25e7c.xml  \n",
            " extracting: train/BloodImage_00166_jpg.rf.ed92901387d097b6f009c1e2ba5b8d1f.jpg  \n",
            " extracting: train/BloodImage_00166_jpg.rf.ed92901387d097b6f009c1e2ba5b8d1f.xml  \n",
            " extracting: train/BloodImage_00167_jpg.rf.e91bbcbf657ad27167c16123ec4fe2bf.jpg  \n",
            " extracting: train/BloodImage_00167_jpg.rf.e91bbcbf657ad27167c16123ec4fe2bf.xml  \n",
            " extracting: train/BloodImage_00168_jpg.rf.700981f577f08882a8e07f89d0ed2fad.jpg  \n",
            " extracting: train/BloodImage_00168_jpg.rf.700981f577f08882a8e07f89d0ed2fad.xml  \n",
            " extracting: train/BloodImage_00169_jpg.rf.cc6d411b83e99bb4940d21a21daa1225.jpg  \n",
            " extracting: train/BloodImage_00169_jpg.rf.cc6d411b83e99bb4940d21a21daa1225.xml  \n",
            " extracting: train/BloodImage_00170_jpg.rf.f8660bd505ac96c28a3aacca8f5021d6.jpg  \n",
            " extracting: train/BloodImage_00170_jpg.rf.f8660bd505ac96c28a3aacca8f5021d6.xml  \n",
            " extracting: train/BloodImage_00171_jpg.rf.7cc75df374b62663fbb3d78001d6b297.jpg  \n",
            " extracting: train/BloodImage_00171_jpg.rf.7cc75df374b62663fbb3d78001d6b297.xml  \n",
            " extracting: train/BloodImage_00172_jpg.rf.1f7d1cced720a8a6497ae2b1404baec4.jpg  \n",
            " extracting: train/BloodImage_00172_jpg.rf.1f7d1cced720a8a6497ae2b1404baec4.xml  \n",
            " extracting: train/BloodImage_00174_jpg.rf.6ba0937610b41271846f603fa0a1719e.jpg  \n",
            " extracting: train/BloodImage_00174_jpg.rf.6ba0937610b41271846f603fa0a1719e.xml  \n",
            " extracting: train/BloodImage_00175_jpg.rf.ead23ac106920eef89b4a847e120afdc.jpg  \n",
            " extracting: train/BloodImage_00175_jpg.rf.ead23ac106920eef89b4a847e120afdc.xml  \n",
            " extracting: train/BloodImage_00176_jpg.rf.ee54eb7f0a5f9c31ca2f9349d8c8788b.jpg  \n",
            " extracting: train/BloodImage_00176_jpg.rf.ee54eb7f0a5f9c31ca2f9349d8c8788b.xml  \n",
            " extracting: train/BloodImage_00177_jpg.rf.106f44d2fc8af2a4b10923aff7e10cff.jpg  \n",
            " extracting: train/BloodImage_00177_jpg.rf.106f44d2fc8af2a4b10923aff7e10cff.xml  \n",
            " extracting: train/BloodImage_00178_jpg.rf.3ee03e327ef350ade59d97001057e2b1.jpg  \n",
            " extracting: train/BloodImage_00178_jpg.rf.3ee03e327ef350ade59d97001057e2b1.xml  \n",
            " extracting: train/BloodImage_00179_jpg.rf.9221c3d4c33e730d66b171b0b391b10f.jpg  \n",
            " extracting: train/BloodImage_00179_jpg.rf.9221c3d4c33e730d66b171b0b391b10f.xml  \n",
            " extracting: train/BloodImage_00180_jpg.rf.f33a017035e656480ca5fee99c468ba4.jpg  \n",
            " extracting: train/BloodImage_00180_jpg.rf.f33a017035e656480ca5fee99c468ba4.xml  \n",
            " extracting: train/BloodImage_00184_jpg.rf.da57069a5e8dd93a53f3e6ca2b5e5e9e.jpg  \n",
            " extracting: train/BloodImage_00184_jpg.rf.da57069a5e8dd93a53f3e6ca2b5e5e9e.xml  \n",
            " extracting: train/BloodImage_00189_jpg.rf.411bfea1e3fc7205a82d3ed4c2bfa55e.jpg  \n",
            " extracting: train/BloodImage_00189_jpg.rf.411bfea1e3fc7205a82d3ed4c2bfa55e.xml  \n",
            " extracting: train/BloodImage_00192_jpg.rf.6eb1be4495880aa63bac2c3c0f83293f.jpg  \n",
            " extracting: train/BloodImage_00192_jpg.rf.6eb1be4495880aa63bac2c3c0f83293f.xml  \n",
            " extracting: train/BloodImage_00193_jpg.rf.c9383369f0d81ae5fafc7a343e0e1dfc.jpg  \n",
            " extracting: train/BloodImage_00193_jpg.rf.c9383369f0d81ae5fafc7a343e0e1dfc.xml  \n",
            " extracting: train/BloodImage_00195_jpg.rf.9195f71efe46a2281fcfefac3f3cffe9.jpg  \n",
            " extracting: train/BloodImage_00195_jpg.rf.9195f71efe46a2281fcfefac3f3cffe9.xml  \n",
            " extracting: train/BloodImage_00196_jpg.rf.a18bf688a25ad88793c1483cca202e74.jpg  \n",
            " extracting: train/BloodImage_00196_jpg.rf.a18bf688a25ad88793c1483cca202e74.xml  \n",
            " extracting: train/BloodImage_00197_jpg.rf.384cd993a7f935e5e567889b62bc64f0.jpg  \n",
            " extracting: train/BloodImage_00197_jpg.rf.384cd993a7f935e5e567889b62bc64f0.xml  \n",
            " extracting: train/BloodImage_00198_jpg.rf.6e646f3b1c05b6e922dfbbab3e10f236.jpg  \n",
            " extracting: train/BloodImage_00198_jpg.rf.6e646f3b1c05b6e922dfbbab3e10f236.xml  \n",
            " extracting: train/BloodImage_00199_jpg.rf.a8552f25787a8b0fe26d6d9c86037f76.jpg  \n",
            " extracting: train/BloodImage_00199_jpg.rf.a8552f25787a8b0fe26d6d9c86037f76.xml  \n",
            " extracting: train/BloodImage_00200_jpg.rf.40a9a85811c5f4c96fee214db545fa87.jpg  \n",
            " extracting: train/BloodImage_00200_jpg.rf.40a9a85811c5f4c96fee214db545fa87.xml  \n",
            " extracting: train/BloodImage_00201_jpg.rf.5a2603a7894db7759ae939fbfb3cd4cd.jpg  \n",
            " extracting: train/BloodImage_00201_jpg.rf.5a2603a7894db7759ae939fbfb3cd4cd.xml  \n",
            " extracting: train/BloodImage_00202_jpg.rf.51344f7c6b1264d75d92526ede56dc16.jpg  \n",
            " extracting: train/BloodImage_00202_jpg.rf.51344f7c6b1264d75d92526ede56dc16.xml  \n",
            " extracting: train/BloodImage_00203_jpg.rf.115fb77f1a16fafab02c268413e9d583.jpg  \n",
            " extracting: train/BloodImage_00203_jpg.rf.115fb77f1a16fafab02c268413e9d583.xml  \n",
            " extracting: train/BloodImage_00206_jpg.rf.db97566d514a1a34c610bd3f5492a956.jpg  \n",
            " extracting: train/BloodImage_00206_jpg.rf.db97566d514a1a34c610bd3f5492a956.xml  \n",
            " extracting: train/BloodImage_00207_jpg.rf.dc3c5696f64f79af75b1d2435cfe64e4.jpg  \n",
            " extracting: train/BloodImage_00207_jpg.rf.dc3c5696f64f79af75b1d2435cfe64e4.xml  \n",
            " extracting: train/BloodImage_00208_jpg.rf.64f53f21241c04c530e5e21a74ebbe8a.jpg  \n",
            " extracting: train/BloodImage_00208_jpg.rf.64f53f21241c04c530e5e21a74ebbe8a.xml  \n",
            " extracting: train/BloodImage_00209_jpg.rf.41271f310b73e8874ee2283bfd1ec57a.jpg  \n",
            " extracting: train/BloodImage_00209_jpg.rf.41271f310b73e8874ee2283bfd1ec57a.xml  \n",
            " extracting: train/BloodImage_00210_jpg.rf.46c6f6f63fe18c882ab02b7335797323.jpg  \n",
            " extracting: train/BloodImage_00210_jpg.rf.46c6f6f63fe18c882ab02b7335797323.xml  \n",
            " extracting: train/BloodImage_00212_jpg.rf.9a40dbf065b86f8f016210cb7d0b45ad.jpg  \n",
            " extracting: train/BloodImage_00212_jpg.rf.9a40dbf065b86f8f016210cb7d0b45ad.xml  \n",
            " extracting: train/BloodImage_00214_jpg.rf.57f3b4693d2403575edd17efbb659df3.jpg  \n",
            " extracting: train/BloodImage_00214_jpg.rf.57f3b4693d2403575edd17efbb659df3.xml  \n",
            " extracting: train/BloodImage_00215_jpg.rf.0fd631a7bf59ca5c45e917b1b3242ccc.jpg  \n",
            " extracting: train/BloodImage_00215_jpg.rf.0fd631a7bf59ca5c45e917b1b3242ccc.xml  \n",
            " extracting: train/BloodImage_00218_jpg.rf.48ff87de6fc7feade9ae09dc7119bba2.jpg  \n",
            " extracting: train/BloodImage_00218_jpg.rf.48ff87de6fc7feade9ae09dc7119bba2.xml  \n",
            " extracting: train/BloodImage_00219_jpg.rf.05bca517d8fa02e385fdbf8d6ef18b93.jpg  \n",
            " extracting: train/BloodImage_00219_jpg.rf.05bca517d8fa02e385fdbf8d6ef18b93.xml  \n",
            " extracting: train/BloodImage_00220_jpg.rf.7b39d588266b020dfe15e07ffa1957fd.jpg  \n",
            " extracting: train/BloodImage_00220_jpg.rf.7b39d588266b020dfe15e07ffa1957fd.xml  \n",
            " extracting: train/BloodImage_00222_jpg.rf.80e1ba91312ae4e120af56a9935a6767.jpg  \n",
            " extracting: train/BloodImage_00222_jpg.rf.80e1ba91312ae4e120af56a9935a6767.xml  \n",
            " extracting: train/BloodImage_00223_jpg.rf.6c56bb9119b89f45c357bb45d4dc322b.jpg  \n",
            " extracting: train/BloodImage_00223_jpg.rf.6c56bb9119b89f45c357bb45d4dc322b.xml  \n",
            " extracting: train/BloodImage_00224_jpg.rf.cb09b3e08c44e1027385f1e243a2de03.jpg  \n",
            " extracting: train/BloodImage_00224_jpg.rf.cb09b3e08c44e1027385f1e243a2de03.xml  \n",
            " extracting: train/BloodImage_00226_jpg.rf.397eea892c42e753514d23b18d7b1e59.jpg  \n",
            " extracting: train/BloodImage_00226_jpg.rf.397eea892c42e753514d23b18d7b1e59.xml  \n",
            " extracting: train/BloodImage_00229_jpg.rf.3d7c28ad711e53748d7bc8a3e1303b40.jpg  \n",
            " extracting: train/BloodImage_00229_jpg.rf.3d7c28ad711e53748d7bc8a3e1303b40.xml  \n",
            " extracting: train/BloodImage_00230_jpg.rf.effb8985eb1735f463f281438eef3034.jpg  \n",
            " extracting: train/BloodImage_00230_jpg.rf.effb8985eb1735f463f281438eef3034.xml  \n",
            " extracting: train/BloodImage_00231_jpg.rf.cb826df690d18f2d7a4f39f0d3397bef.jpg  \n",
            " extracting: train/BloodImage_00231_jpg.rf.cb826df690d18f2d7a4f39f0d3397bef.xml  \n",
            " extracting: train/BloodImage_00232_jpg.rf.9409125a3bcfc13306b85c0be5e85f4e.jpg  \n",
            " extracting: train/BloodImage_00232_jpg.rf.9409125a3bcfc13306b85c0be5e85f4e.xml  \n",
            " extracting: train/BloodImage_00233_jpg.rf.950d2e3d11ea3b7bed120d0048ffe8af.jpg  \n",
            " extracting: train/BloodImage_00233_jpg.rf.950d2e3d11ea3b7bed120d0048ffe8af.xml  \n",
            " extracting: train/BloodImage_00234_jpg.rf.b7cf2a5b00777f2d2956e42ecee12126.jpg  \n",
            " extracting: train/BloodImage_00234_jpg.rf.b7cf2a5b00777f2d2956e42ecee12126.xml  \n",
            " extracting: train/BloodImage_00236_jpg.rf.6b8b34573f2ef1bc250ea2c1825156e4.jpg  \n",
            " extracting: train/BloodImage_00236_jpg.rf.6b8b34573f2ef1bc250ea2c1825156e4.xml  \n",
            " extracting: train/BloodImage_00237_jpg.rf.93ab8101ea0898948bf73d519eafc904.jpg  \n",
            " extracting: train/BloodImage_00237_jpg.rf.93ab8101ea0898948bf73d519eafc904.xml  \n",
            " extracting: train/BloodImage_00239_jpg.rf.51c744d135f1bcb27f30dcbd190d92ba.jpg  \n",
            " extracting: train/BloodImage_00239_jpg.rf.51c744d135f1bcb27f30dcbd190d92ba.xml  \n",
            " extracting: train/BloodImage_00240_jpg.rf.1fb953fc9e166fb47dd4ab07d8529d58.jpg  \n",
            " extracting: train/BloodImage_00240_jpg.rf.1fb953fc9e166fb47dd4ab07d8529d58.xml  \n",
            " extracting: train/BloodImage_00242_jpg.rf.86b7a35aa15698e7b53c98fd4aef2b7b.jpg  \n",
            " extracting: train/BloodImage_00242_jpg.rf.86b7a35aa15698e7b53c98fd4aef2b7b.xml  \n",
            " extracting: train/BloodImage_00243_jpg.rf.4ac20502da26cf12c367cac90a517b3e.jpg  \n",
            " extracting: train/BloodImage_00243_jpg.rf.4ac20502da26cf12c367cac90a517b3e.xml  \n",
            " extracting: train/BloodImage_00244_jpg.rf.8d47adf2dc728f4e0406b474f7d54ccb.jpg  \n",
            " extracting: train/BloodImage_00244_jpg.rf.8d47adf2dc728f4e0406b474f7d54ccb.xml  \n",
            " extracting: train/BloodImage_00247_jpg.rf.cb733c5cc360e7218ec5ad095c73f9dc.jpg  \n",
            " extracting: train/BloodImage_00247_jpg.rf.cb733c5cc360e7218ec5ad095c73f9dc.xml  \n",
            " extracting: train/BloodImage_00248_jpg.rf.76d2b0acb84359a0ce09b529ec5aae33.jpg  \n",
            " extracting: train/BloodImage_00248_jpg.rf.76d2b0acb84359a0ce09b529ec5aae33.xml  \n",
            " extracting: train/BloodImage_00249_jpg.rf.cb55a4a3ff2397d5fd193c0493c64611.jpg  \n",
            " extracting: train/BloodImage_00249_jpg.rf.cb55a4a3ff2397d5fd193c0493c64611.xml  \n",
            " extracting: train/BloodImage_00250_jpg.rf.12516222ad772dc4ee0fcd8c7e5cb689.jpg  \n",
            " extracting: train/BloodImage_00250_jpg.rf.12516222ad772dc4ee0fcd8c7e5cb689.xml  \n",
            " extracting: train/BloodImage_00251_jpg.rf.ee764f36f42a5c328aa4a70990a79c8f.jpg  \n",
            " extracting: train/BloodImage_00251_jpg.rf.ee764f36f42a5c328aa4a70990a79c8f.xml  \n",
            " extracting: train/BloodImage_00253_jpg.rf.a7a7dd010daca5e07f8bc289142c6b7d.jpg  \n",
            " extracting: train/BloodImage_00253_jpg.rf.a7a7dd010daca5e07f8bc289142c6b7d.xml  \n",
            " extracting: train/BloodImage_00255_jpg.rf.398f0c38bcfb8813e3ce3e283abac9dc.jpg  \n",
            " extracting: train/BloodImage_00255_jpg.rf.398f0c38bcfb8813e3ce3e283abac9dc.xml  \n",
            " extracting: train/BloodImage_00256_jpg.rf.94c1a3062aeebb1df2b67c20e0532932.jpg  \n",
            " extracting: train/BloodImage_00256_jpg.rf.94c1a3062aeebb1df2b67c20e0532932.xml  \n",
            " extracting: train/BloodImage_00257_jpg.rf.b905d2edb475685ae36d88e33b405561.jpg  \n",
            " extracting: train/BloodImage_00257_jpg.rf.b905d2edb475685ae36d88e33b405561.xml  \n",
            " extracting: train/BloodImage_00260_jpg.rf.d9aa0111d492a04b8ca8f24d0f9aed00.jpg  \n",
            " extracting: train/BloodImage_00260_jpg.rf.d9aa0111d492a04b8ca8f24d0f9aed00.xml  \n",
            " extracting: train/BloodImage_00261_jpg.rf.9b6dcb3b7a59fd289d3392f106ad37b8.jpg  \n",
            " extracting: train/BloodImage_00261_jpg.rf.9b6dcb3b7a59fd289d3392f106ad37b8.xml  \n",
            " extracting: train/BloodImage_00262_jpg.rf.94805769ed783f2c8f4cadb66bd1620d.jpg  \n",
            " extracting: train/BloodImage_00262_jpg.rf.94805769ed783f2c8f4cadb66bd1620d.xml  \n",
            " extracting: train/BloodImage_00264_jpg.rf.db2e3d0fd7569640d407e1dacf90a456.jpg  \n",
            " extracting: train/BloodImage_00264_jpg.rf.db2e3d0fd7569640d407e1dacf90a456.xml  \n",
            " extracting: train/BloodImage_00267_jpg.rf.d636a81cd23566cca0cad3ddc6bf49a8.jpg  \n",
            " extracting: train/BloodImage_00267_jpg.rf.d636a81cd23566cca0cad3ddc6bf49a8.xml  \n",
            " extracting: train/BloodImage_00268_jpg.rf.e1d8eccd1a77cadaeadebca867a24c62.jpg  \n",
            " extracting: train/BloodImage_00268_jpg.rf.e1d8eccd1a77cadaeadebca867a24c62.xml  \n",
            " extracting: train/BloodImage_00269_jpg.rf.8475d6c8dead19457a63ae00dd84c924.jpg  \n",
            " extracting: train/BloodImage_00269_jpg.rf.8475d6c8dead19457a63ae00dd84c924.xml  \n",
            " extracting: train/BloodImage_00271_jpg.rf.08085d620b04fabd323d2b1ed8a64f1d.jpg  \n",
            " extracting: train/BloodImage_00271_jpg.rf.08085d620b04fabd323d2b1ed8a64f1d.xml  \n",
            " extracting: train/BloodImage_00279_jpg.rf.5ade4f1f61924eb07fb0a8169278d395.jpg  \n",
            " extracting: train/BloodImage_00279_jpg.rf.5ade4f1f61924eb07fb0a8169278d395.xml  \n",
            " extracting: train/BloodImage_00282_jpg.rf.d0067872fcfb4df4e5bb9cf783110825.jpg  \n",
            " extracting: train/BloodImage_00282_jpg.rf.d0067872fcfb4df4e5bb9cf783110825.xml  \n",
            " extracting: train/BloodImage_00283_jpg.rf.6263895fbbc2628f18e1a0ed61c74bd6.jpg  \n",
            " extracting: train/BloodImage_00283_jpg.rf.6263895fbbc2628f18e1a0ed61c74bd6.xml  \n",
            " extracting: train/BloodImage_00285_jpg.rf.05ee9fb43b10619cff770fa0c5d124f5.jpg  \n",
            " extracting: train/BloodImage_00285_jpg.rf.05ee9fb43b10619cff770fa0c5d124f5.xml  \n",
            " extracting: train/BloodImage_00287_jpg.rf.b03ee5db05e8750c2d71cc5444f3905c.jpg  \n",
            " extracting: train/BloodImage_00287_jpg.rf.b03ee5db05e8750c2d71cc5444f3905c.xml  \n",
            " extracting: train/BloodImage_00288_jpg.rf.3adee28ab6ed4a5420f851a6b3d275df.jpg  \n",
            " extracting: train/BloodImage_00288_jpg.rf.3adee28ab6ed4a5420f851a6b3d275df.xml  \n",
            " extracting: train/BloodImage_00290_jpg.rf.870ab7d987c50d829a5f28c1a972d917.jpg  \n",
            " extracting: train/BloodImage_00290_jpg.rf.870ab7d987c50d829a5f28c1a972d917.xml  \n",
            " extracting: train/BloodImage_00291_jpg.rf.92ed5a625cc17a671eae55fd48329f02.jpg  \n",
            " extracting: train/BloodImage_00291_jpg.rf.92ed5a625cc17a671eae55fd48329f02.xml  \n",
            " extracting: train/BloodImage_00292_jpg.rf.469f85f31734b15c32cbd1a96e274673.jpg  \n",
            " extracting: train/BloodImage_00292_jpg.rf.469f85f31734b15c32cbd1a96e274673.xml  \n",
            " extracting: train/BloodImage_00293_jpg.rf.8d19f05e21730e57d74657b0ce9b950c.jpg  \n",
            " extracting: train/BloodImage_00293_jpg.rf.8d19f05e21730e57d74657b0ce9b950c.xml  \n",
            " extracting: train/BloodImage_00294_jpg.rf.8ea49a5b1990a964de2ce838ab4a9525.jpg  \n",
            " extracting: train/BloodImage_00294_jpg.rf.8ea49a5b1990a964de2ce838ab4a9525.xml  \n",
            " extracting: train/BloodImage_00295_jpg.rf.b8ad2a56170ce42d667c25819b788c1d.jpg  \n",
            " extracting: train/BloodImage_00295_jpg.rf.b8ad2a56170ce42d667c25819b788c1d.xml  \n",
            " extracting: train/BloodImage_00299_jpg.rf.e8fa71a67d5eae37ed66b6b7976772c1.jpg  \n",
            " extracting: train/BloodImage_00299_jpg.rf.e8fa71a67d5eae37ed66b6b7976772c1.xml  \n",
            " extracting: train/BloodImage_00303_jpg.rf.96019c5afa192dbb914016f0243964fd.jpg  \n",
            " extracting: train/BloodImage_00303_jpg.rf.96019c5afa192dbb914016f0243964fd.xml  \n",
            " extracting: train/BloodImage_00304_jpg.rf.d065dccc029aa497e69aac485f5c7ea9.jpg  \n",
            " extracting: train/BloodImage_00304_jpg.rf.d065dccc029aa497e69aac485f5c7ea9.xml  \n",
            " extracting: train/BloodImage_00305_jpg.rf.3be7c63f74a5b205817365ceececd3bc.jpg  \n",
            " extracting: train/BloodImage_00305_jpg.rf.3be7c63f74a5b205817365ceececd3bc.xml  \n",
            " extracting: train/BloodImage_00307_jpg.rf.f3a9b5a5c544183e2035095fb497fb4c.jpg  \n",
            " extracting: train/BloodImage_00307_jpg.rf.f3a9b5a5c544183e2035095fb497fb4c.xml  \n",
            " extracting: train/BloodImage_00308_jpg.rf.4598085d3090b176e16953ab1054aef8.jpg  \n",
            " extracting: train/BloodImage_00308_jpg.rf.4598085d3090b176e16953ab1054aef8.xml  \n",
            " extracting: train/BloodImage_00310_jpg.rf.52e3296f7a0d9e655e36ce1ac367faff.jpg  \n",
            " extracting: train/BloodImage_00310_jpg.rf.52e3296f7a0d9e655e36ce1ac367faff.xml  \n",
            " extracting: train/BloodImage_00311_jpg.rf.5b1c9c2ae20f4f304393360e4e72d7ac.jpg  \n",
            " extracting: train/BloodImage_00311_jpg.rf.5b1c9c2ae20f4f304393360e4e72d7ac.xml  \n",
            " extracting: train/BloodImage_00312_jpg.rf.644485683ce0a8eadc17594a2b970697.jpg  \n",
            " extracting: train/BloodImage_00312_jpg.rf.644485683ce0a8eadc17594a2b970697.xml  \n",
            " extracting: train/BloodImage_00313_jpg.rf.48fee7adf53e53903cefb3254bfc852e.jpg  \n",
            " extracting: train/BloodImage_00313_jpg.rf.48fee7adf53e53903cefb3254bfc852e.xml  \n",
            " extracting: train/BloodImage_00314_jpg.rf.722b30c67ca8aef37b0a8001c53c12e7.jpg  \n",
            " extracting: train/BloodImage_00314_jpg.rf.722b30c67ca8aef37b0a8001c53c12e7.xml  \n",
            " extracting: train/BloodImage_00317_jpg.rf.6397dd207ef8b48c5ece8f699bfec8e5.jpg  \n",
            " extracting: train/BloodImage_00317_jpg.rf.6397dd207ef8b48c5ece8f699bfec8e5.xml  \n",
            " extracting: train/BloodImage_00318_jpg.rf.ae41d28eabbf137f0f7c3629398e73fa.jpg  \n",
            " extracting: train/BloodImage_00318_jpg.rf.ae41d28eabbf137f0f7c3629398e73fa.xml  \n",
            " extracting: train/BloodImage_00320_jpg.rf.b252995123ab52685fe98090382015f9.jpg  \n",
            " extracting: train/BloodImage_00320_jpg.rf.b252995123ab52685fe98090382015f9.xml  \n",
            " extracting: train/BloodImage_00322_jpg.rf.f3faf31c0fe23b4f042343e7e33ccc18.jpg  \n",
            " extracting: train/BloodImage_00322_jpg.rf.f3faf31c0fe23b4f042343e7e33ccc18.xml  \n",
            " extracting: train/BloodImage_00323_jpg.rf.f4e0e3a72c74a8b196373bb12697e49e.jpg  \n",
            " extracting: train/BloodImage_00323_jpg.rf.f4e0e3a72c74a8b196373bb12697e49e.xml  \n",
            " extracting: train/BloodImage_00324_jpg.rf.d2fa0cee237fa4698401213fd2dd9190.jpg  \n",
            " extracting: train/BloodImage_00324_jpg.rf.d2fa0cee237fa4698401213fd2dd9190.xml  \n",
            " extracting: train/BloodImage_00326_jpg.rf.115f475c35cfe69d12f7e7500b6f0504.jpg  \n",
            " extracting: train/BloodImage_00326_jpg.rf.115f475c35cfe69d12f7e7500b6f0504.xml  \n",
            " extracting: train/BloodImage_00327_jpg.rf.421f505f875168babd109d8a26f2ec25.jpg  \n",
            " extracting: train/BloodImage_00327_jpg.rf.421f505f875168babd109d8a26f2ec25.xml  \n",
            " extracting: train/BloodImage_00330_jpg.rf.d899322812a2f5b1123bd333a034adc3.jpg  \n",
            " extracting: train/BloodImage_00330_jpg.rf.d899322812a2f5b1123bd333a034adc3.xml  \n",
            " extracting: train/BloodImage_00332_jpg.rf.8b8041f67309058f264e1c3a10583eea.jpg  \n",
            " extracting: train/BloodImage_00332_jpg.rf.8b8041f67309058f264e1c3a10583eea.xml  \n",
            " extracting: train/BloodImage_00333_jpg.rf.6afd664cfe1773c628ef63fdfd43f751.jpg  \n",
            " extracting: train/BloodImage_00333_jpg.rf.6afd664cfe1773c628ef63fdfd43f751.xml  \n",
            " extracting: train/BloodImage_00338_jpg.rf.c0f0d2cd5a51f7fff518cef688e274af.jpg  \n",
            " extracting: train/BloodImage_00338_jpg.rf.c0f0d2cd5a51f7fff518cef688e274af.xml  \n",
            " extracting: train/BloodImage_00339_jpg.rf.f6a5fb7adfe24d938b07341f520c36e2.jpg  \n",
            " extracting: train/BloodImage_00339_jpg.rf.f6a5fb7adfe24d938b07341f520c36e2.xml  \n",
            " extracting: train/BloodImage_00340_jpg.rf.4bca1d6008a5698ffe8d12357e406e56.jpg  \n",
            " extracting: train/BloodImage_00340_jpg.rf.4bca1d6008a5698ffe8d12357e406e56.xml  \n",
            " extracting: train/BloodImage_00341_jpg.rf.c6dccb482a4e3dc5c36260794df8771f.jpg  \n",
            " extracting: train/BloodImage_00341_jpg.rf.c6dccb482a4e3dc5c36260794df8771f.xml  \n",
            " extracting: train/BloodImage_00342_jpg.rf.ecf9fcdc3df62dffe75a4b60198a30dd.jpg  \n",
            " extracting: train/BloodImage_00342_jpg.rf.ecf9fcdc3df62dffe75a4b60198a30dd.xml  \n",
            " extracting: train/BloodImage_00343_jpg.rf.307a02c2f64a99bb49154ce548c5d4a1.jpg  \n",
            " extracting: train/BloodImage_00343_jpg.rf.307a02c2f64a99bb49154ce548c5d4a1.xml  \n",
            " extracting: train/BloodImage_00345_jpg.rf.59971e759c69d5c761ebed6b19055d04.jpg  \n",
            " extracting: train/BloodImage_00345_jpg.rf.59971e759c69d5c761ebed6b19055d04.xml  \n",
            " extracting: train/BloodImage_00346_jpg.rf.2f037f569f125bc4dc04070e0d71e592.jpg  \n",
            " extracting: train/BloodImage_00346_jpg.rf.2f037f569f125bc4dc04070e0d71e592.xml  \n",
            " extracting: train/BloodImage_00347_jpg.rf.b79a3ab2a3c8c62f9742e7798153047e.jpg  \n",
            " extracting: train/BloodImage_00347_jpg.rf.b79a3ab2a3c8c62f9742e7798153047e.xml  \n",
            " extracting: train/BloodImage_00349_jpg.rf.7a08496a67a69eeb3b6d260b3161c855.jpg  \n",
            " extracting: train/BloodImage_00349_jpg.rf.7a08496a67a69eeb3b6d260b3161c855.xml  \n",
            " extracting: train/BloodImage_00351_jpg.rf.dacf4e0468f400e24030c912ba31bed2.jpg  \n",
            " extracting: train/BloodImage_00351_jpg.rf.dacf4e0468f400e24030c912ba31bed2.xml  \n",
            " extracting: train/BloodImage_00352_jpg.rf.51d52fe58f151051bd8d24007ab79338.jpg  \n",
            " extracting: train/BloodImage_00352_jpg.rf.51d52fe58f151051bd8d24007ab79338.xml  \n",
            " extracting: train/BloodImage_00353_jpg.rf.cf5ed147e4f2675fbabbc9b0db750ecf.jpg  \n",
            " extracting: train/BloodImage_00353_jpg.rf.cf5ed147e4f2675fbabbc9b0db750ecf.xml  \n",
            " extracting: train/BloodImage_00354_jpg.rf.2339d6a97e76030873dea7459366967e.jpg  \n",
            " extracting: train/BloodImage_00354_jpg.rf.2339d6a97e76030873dea7459366967e.xml  \n",
            " extracting: train/BloodImage_00356_jpg.rf.595525c2603ccc2bfc1e6e11e31f0c94.jpg  \n",
            " extracting: train/BloodImage_00356_jpg.rf.595525c2603ccc2bfc1e6e11e31f0c94.xml  \n",
            " extracting: train/BloodImage_00357_jpg.rf.dfcf95336c225fdfa116fc9a13b8975b.jpg  \n",
            " extracting: train/BloodImage_00357_jpg.rf.dfcf95336c225fdfa116fc9a13b8975b.xml  \n",
            " extracting: train/BloodImage_00360_jpg.rf.f0983057278ee639d5194578d6a398c2.jpg  \n",
            " extracting: train/BloodImage_00360_jpg.rf.f0983057278ee639d5194578d6a398c2.xml  \n",
            " extracting: train/BloodImage_00361_jpg.rf.f0e1c1ab8c33d2be40b11d57b38d3ff1.jpg  \n",
            " extracting: train/BloodImage_00361_jpg.rf.f0e1c1ab8c33d2be40b11d57b38d3ff1.xml  \n",
            " extracting: train/BloodImage_00362_jpg.rf.7eb26575c314d8e51ff2a63f25c3213c.jpg  \n",
            " extracting: train/BloodImage_00362_jpg.rf.7eb26575c314d8e51ff2a63f25c3213c.xml  \n",
            " extracting: train/BloodImage_00365_jpg.rf.cd273f5fdd8232252180ddad4ff479e4.jpg  \n",
            " extracting: train/BloodImage_00365_jpg.rf.cd273f5fdd8232252180ddad4ff479e4.xml  \n",
            " extracting: train/BloodImage_00366_jpg.rf.2c1d44c63137f3391eaa4f3cb2e10dcf.jpg  \n",
            " extracting: train/BloodImage_00366_jpg.rf.2c1d44c63137f3391eaa4f3cb2e10dcf.xml  \n",
            " extracting: train/BloodImage_00367_jpg.rf.106032545117e1485f4b1dee535ab919.jpg  \n",
            " extracting: train/BloodImage_00367_jpg.rf.106032545117e1485f4b1dee535ab919.xml  \n",
            " extracting: train/BloodImage_00368_jpg.rf.4e4a65ca533e139823601d539704a97f.jpg  \n",
            " extracting: train/BloodImage_00368_jpg.rf.4e4a65ca533e139823601d539704a97f.xml  \n",
            " extracting: train/BloodImage_00370_jpg.rf.fea04779dac40eda31c39d37bfd4a158.jpg  \n",
            " extracting: train/BloodImage_00370_jpg.rf.fea04779dac40eda31c39d37bfd4a158.xml  \n",
            " extracting: train/BloodImage_00372_jpg.rf.68038e2600568911d6fbfaac9614ca3c.jpg  \n",
            " extracting: train/BloodImage_00372_jpg.rf.68038e2600568911d6fbfaac9614ca3c.xml  \n",
            " extracting: train/BloodImage_00374_jpg.rf.efcd9616e49b6b6b2653fe6cb529d254.jpg  \n",
            " extracting: train/BloodImage_00374_jpg.rf.efcd9616e49b6b6b2653fe6cb529d254.xml  \n",
            " extracting: train/BloodImage_00375_jpg.rf.f0488f3844c9164dbe76ef782322d08d.jpg  \n",
            " extracting: train/BloodImage_00375_jpg.rf.f0488f3844c9164dbe76ef782322d08d.xml  \n",
            " extracting: train/BloodImage_00376_jpg.rf.81cf6993eebc05cadc7742bc508cdbe5.jpg  \n",
            " extracting: train/BloodImage_00376_jpg.rf.81cf6993eebc05cadc7742bc508cdbe5.xml  \n",
            " extracting: train/BloodImage_00378_jpg.rf.b660aa32201296c176d9e480d9fef52c.jpg  \n",
            " extracting: train/BloodImage_00378_jpg.rf.b660aa32201296c176d9e480d9fef52c.xml  \n",
            " extracting: train/BloodImage_00379_jpg.rf.ffbd5df18884ad9c40fe678c9ee6cc6a.jpg  \n",
            " extracting: train/BloodImage_00379_jpg.rf.ffbd5df18884ad9c40fe678c9ee6cc6a.xml  \n",
            " extracting: train/BloodImage_00381_jpg.rf.6e79077e93fc5bfbfddbb6f001f0542f.jpg  \n",
            " extracting: train/BloodImage_00381_jpg.rf.6e79077e93fc5bfbfddbb6f001f0542f.xml  \n",
            " extracting: train/BloodImage_00382_jpg.rf.510c260a1701cb071eda23dcd73dd74a.jpg  \n",
            " extracting: train/BloodImage_00382_jpg.rf.510c260a1701cb071eda23dcd73dd74a.xml  \n",
            " extracting: train/BloodImage_00383_jpg.rf.49f36a689e33479923805330d18c27be.jpg  \n",
            " extracting: train/BloodImage_00383_jpg.rf.49f36a689e33479923805330d18c27be.xml  \n",
            " extracting: train/BloodImage_00387_jpg.rf.163ffb5cac6e736ad12f70ef0f929a4e.jpg  \n",
            " extracting: train/BloodImage_00387_jpg.rf.163ffb5cac6e736ad12f70ef0f929a4e.xml  \n",
            " extracting: train/BloodImage_00388_jpg.rf.12add1a7f8073842ada61f56cbf15b31.jpg  \n",
            " extracting: train/BloodImage_00388_jpg.rf.12add1a7f8073842ada61f56cbf15b31.xml  \n",
            " extracting: train/BloodImage_00389_jpg.rf.8dbb82596b12d4884776e010b19e95d4.jpg  \n",
            " extracting: train/BloodImage_00389_jpg.rf.8dbb82596b12d4884776e010b19e95d4.xml  \n",
            " extracting: train/BloodImage_00390_jpg.rf.21fe48cc0ffd20fa6693b20aa235b2db.jpg  \n",
            " extracting: train/BloodImage_00390_jpg.rf.21fe48cc0ffd20fa6693b20aa235b2db.xml  \n",
            " extracting: train/BloodImage_00391_jpg.rf.efb4e2fae1122eccfb96a89da9a59873.jpg  \n",
            " extracting: train/BloodImage_00391_jpg.rf.efb4e2fae1122eccfb96a89da9a59873.xml  \n",
            " extracting: train/BloodImage_00393_jpg.rf.ab4b32eb995ec97db50c5301c2670ee5.jpg  \n",
            " extracting: train/BloodImage_00393_jpg.rf.ab4b32eb995ec97db50c5301c2670ee5.xml  \n",
            " extracting: train/BloodImage_00395_jpg.rf.f0014c982c64e4801bf7a8cd3e36d480.jpg  \n",
            " extracting: train/BloodImage_00395_jpg.rf.f0014c982c64e4801bf7a8cd3e36d480.xml  \n",
            " extracting: train/BloodImage_00396_jpg.rf.a95185dd1fa63430734448a6e9b69b50.jpg  \n",
            " extracting: train/BloodImage_00396_jpg.rf.a95185dd1fa63430734448a6e9b69b50.xml  \n",
            " extracting: train/BloodImage_00397_jpg.rf.b52311dfc95f514c1c6d841aab431403.jpg  \n",
            " extracting: train/BloodImage_00397_jpg.rf.b52311dfc95f514c1c6d841aab431403.xml  \n",
            " extracting: train/BloodImage_00398_jpg.rf.46416c58102949fa8c92a23a2834e50a.jpg  \n",
            " extracting: train/BloodImage_00398_jpg.rf.46416c58102949fa8c92a23a2834e50a.xml  \n",
            " extracting: train/BloodImage_00400_jpg.rf.f0a808bacaa11a4e5f21fad1c14edf2a.jpg  \n",
            " extracting: train/BloodImage_00400_jpg.rf.f0a808bacaa11a4e5f21fad1c14edf2a.xml  \n",
            " extracting: train/BloodImage_00405_jpg.rf.6e09ceadb7a1c87e63aa40a45a918d05.jpg  \n",
            " extracting: train/BloodImage_00405_jpg.rf.6e09ceadb7a1c87e63aa40a45a918d05.xml  \n",
            " extracting: train/BloodImage_00407_jpg.rf.bfd06dc020ea6cf3df8ecc8809dd29b6.jpg  \n",
            " extracting: train/BloodImage_00407_jpg.rf.bfd06dc020ea6cf3df8ecc8809dd29b6.xml  \n",
            " extracting: train/BloodImage_00408_jpg.rf.080ed677663fc4119c3618ad0a7a87ab.jpg  \n",
            " extracting: train/BloodImage_00408_jpg.rf.080ed677663fc4119c3618ad0a7a87ab.xml  \n",
            " extracting: train/BloodImage_00409_jpg.rf.07399e04e5384fb02b947ea025eb3cd0.jpg  \n",
            " extracting: train/BloodImage_00409_jpg.rf.07399e04e5384fb02b947ea025eb3cd0.xml  \n",
            "   creating: valid/\n",
            " extracting: valid/BloodImage_00000_jpg.rf.3aa7a653c80726cbb25447cb697ad7a4.jpg  \n",
            " extracting: valid/BloodImage_00000_jpg.rf.3aa7a653c80726cbb25447cb697ad7a4.xml  \n",
            " extracting: valid/BloodImage_00004_jpg.rf.5abe41b92c2d446545da27876795e4ec.jpg  \n",
            " extracting: valid/BloodImage_00004_jpg.rf.5abe41b92c2d446545da27876795e4ec.xml  \n",
            " extracting: valid/BloodImage_00012_jpg.rf.427cf7c80c315e412e52ca2bcc0daa30.jpg  \n",
            " extracting: valid/BloodImage_00012_jpg.rf.427cf7c80c315e412e52ca2bcc0daa30.xml  \n",
            " extracting: valid/BloodImage_00017_jpg.rf.6ea3d63ae24abe3c42a9b6192dbba5a4.jpg  \n",
            " extracting: valid/BloodImage_00017_jpg.rf.6ea3d63ae24abe3c42a9b6192dbba5a4.xml  \n",
            " extracting: valid/BloodImage_00021_jpg.rf.a5330c5a9f79a73c6e526244171cf77b.jpg  \n",
            " extracting: valid/BloodImage_00021_jpg.rf.a5330c5a9f79a73c6e526244171cf77b.xml  \n",
            " extracting: valid/BloodImage_00026_jpg.rf.7937b64ebbc36c4e543219b113a85501.jpg  \n",
            " extracting: valid/BloodImage_00026_jpg.rf.7937b64ebbc36c4e543219b113a85501.xml  \n",
            " extracting: valid/BloodImage_00050_jpg.rf.41b081af31e41aec98eb77297ced3caa.jpg  \n",
            " extracting: valid/BloodImage_00050_jpg.rf.41b081af31e41aec98eb77297ced3caa.xml  \n",
            " extracting: valid/BloodImage_00057_jpg.rf.f7f41df6357d9be574288e87bf5a48d7.jpg  \n",
            " extracting: valid/BloodImage_00057_jpg.rf.f7f41df6357d9be574288e87bf5a48d7.xml  \n",
            " extracting: valid/BloodImage_00063_jpg.rf.a1a159550894e64ac69bc4c16ac58141.jpg  \n",
            " extracting: valid/BloodImage_00063_jpg.rf.a1a159550894e64ac69bc4c16ac58141.xml  \n",
            " extracting: valid/BloodImage_00069_jpg.rf.db092f500d30b49d143816202c511b9b.jpg  \n",
            " extracting: valid/BloodImage_00069_jpg.rf.db092f500d30b49d143816202c511b9b.xml  \n",
            " extracting: valid/BloodImage_00070_jpg.rf.b4fb3f14cc12d19aa8e7d2282fea7617.jpg  \n",
            " extracting: valid/BloodImage_00070_jpg.rf.b4fb3f14cc12d19aa8e7d2282fea7617.xml  \n",
            " extracting: valid/BloodImage_00071_jpg.rf.5fc48a8a54bdf5acd454fc2deb53d5c9.jpg  \n",
            " extracting: valid/BloodImage_00071_jpg.rf.5fc48a8a54bdf5acd454fc2deb53d5c9.xml  \n",
            " extracting: valid/BloodImage_00075_jpg.rf.61ef0160b81e5058d559b0cd90050820.jpg  \n",
            " extracting: valid/BloodImage_00075_jpg.rf.61ef0160b81e5058d559b0cd90050820.xml  \n",
            " extracting: valid/BloodImage_00076_jpg.rf.8f437a1c177a8400c0a4343ffce1935f.jpg  \n",
            " extracting: valid/BloodImage_00076_jpg.rf.8f437a1c177a8400c0a4343ffce1935f.xml  \n",
            " extracting: valid/BloodImage_00086_jpg.rf.df8471af37e3a15f2eff9d3c7c5e6db0.jpg  \n",
            " extracting: valid/BloodImage_00086_jpg.rf.df8471af37e3a15f2eff9d3c7c5e6db0.xml  \n",
            " extracting: valid/BloodImage_00092_jpg.rf.e11aa418b64c8b6a3ba41ca184dc3b26.jpg  \n",
            " extracting: valid/BloodImage_00092_jpg.rf.e11aa418b64c8b6a3ba41ca184dc3b26.xml  \n",
            " extracting: valid/BloodImage_00093_jpg.rf.dc8a5b88bd84b2f60c36a92e01650b30.jpg  \n",
            " extracting: valid/BloodImage_00093_jpg.rf.dc8a5b88bd84b2f60c36a92e01650b30.xml  \n",
            " extracting: valid/BloodImage_00104_jpg.rf.2ec5cb75581036d33efb68c2898f15f1.jpg  \n",
            " extracting: valid/BloodImage_00104_jpg.rf.2ec5cb75581036d33efb68c2898f15f1.xml  \n",
            " extracting: valid/BloodImage_00107_jpg.rf.00b6520c219ea6e922de40ca6bfa4009.jpg  \n",
            " extracting: valid/BloodImage_00107_jpg.rf.00b6520c219ea6e922de40ca6bfa4009.xml  \n",
            " extracting: valid/BloodImage_00108_jpg.rf.bd98a88ae6f4c36685e9afe60a66dc07.jpg  \n",
            " extracting: valid/BloodImage_00108_jpg.rf.bd98a88ae6f4c36685e9afe60a66dc07.xml  \n",
            " extracting: valid/BloodImage_00109_jpg.rf.52f1c330446c3c424684e4d12a6c8bfa.jpg  \n",
            " extracting: valid/BloodImage_00109_jpg.rf.52f1c330446c3c424684e4d12a6c8bfa.xml  \n",
            " extracting: valid/BloodImage_00110_jpg.rf.0d0e768475c16aaca2b7cd8d88647bef.jpg  \n",
            " extracting: valid/BloodImage_00110_jpg.rf.0d0e768475c16aaca2b7cd8d88647bef.xml  \n",
            " extracting: valid/BloodImage_00123_jpg.rf.95abb6aab1bd67cf8339c23c060f4329.jpg  \n",
            " extracting: valid/BloodImage_00123_jpg.rf.95abb6aab1bd67cf8339c23c060f4329.xml  \n",
            " extracting: valid/BloodImage_00126_jpg.rf.b9ced9374b652616c9abfa563340ad8f.jpg  \n",
            " extracting: valid/BloodImage_00126_jpg.rf.b9ced9374b652616c9abfa563340ad8f.xml  \n",
            " extracting: valid/BloodImage_00127_jpg.rf.3f6dcb7c8f7c879500ca02ca0cf0560b.jpg  \n",
            " extracting: valid/BloodImage_00127_jpg.rf.3f6dcb7c8f7c879500ca02ca0cf0560b.xml  \n",
            " extracting: valid/BloodImage_00130_jpg.rf.957bac5f70900739553002f2785a05f6.jpg  \n",
            " extracting: valid/BloodImage_00130_jpg.rf.957bac5f70900739553002f2785a05f6.xml  \n",
            " extracting: valid/BloodImage_00135_jpg.rf.013734f914cafcbb4697bb45f3b51b14.jpg  \n",
            " extracting: valid/BloodImage_00135_jpg.rf.013734f914cafcbb4697bb45f3b51b14.xml  \n",
            " extracting: valid/BloodImage_00141_jpg.rf.1cdac383e5c96688efd3be47f4a68a7b.jpg  \n",
            " extracting: valid/BloodImage_00141_jpg.rf.1cdac383e5c96688efd3be47f4a68a7b.xml  \n",
            " extracting: valid/BloodImage_00161_jpg.rf.ef350baedf3cbe5f75dea76b02b2ff15.jpg  \n",
            " extracting: valid/BloodImage_00161_jpg.rf.ef350baedf3cbe5f75dea76b02b2ff15.xml  \n",
            " extracting: valid/BloodImage_00182_jpg.rf.97ea83e97b1a0a2a4fc276cc1c21aaac.jpg  \n",
            " extracting: valid/BloodImage_00182_jpg.rf.97ea83e97b1a0a2a4fc276cc1c21aaac.xml  \n",
            " extracting: valid/BloodImage_00183_jpg.rf.c50a3e8b469ed94ff2868c7cd91ca226.jpg  \n",
            " extracting: valid/BloodImage_00183_jpg.rf.c50a3e8b469ed94ff2868c7cd91ca226.xml  \n",
            " extracting: valid/BloodImage_00187_jpg.rf.b7313efba5142b0ab554bf9858174c2e.jpg  \n",
            " extracting: valid/BloodImage_00187_jpg.rf.b7313efba5142b0ab554bf9858174c2e.xml  \n",
            " extracting: valid/BloodImage_00205_jpg.rf.889fc1f80d77cf8f4adf32ca5fab8858.jpg  \n",
            " extracting: valid/BloodImage_00205_jpg.rf.889fc1f80d77cf8f4adf32ca5fab8858.xml  \n",
            " extracting: valid/BloodImage_00211_jpg.rf.526b43172b7bb6aa3943255906bbb2e3.jpg  \n",
            " extracting: valid/BloodImage_00211_jpg.rf.526b43172b7bb6aa3943255906bbb2e3.xml  \n",
            " extracting: valid/BloodImage_00216_jpg.rf.195f7ad40674b8de4777ef80ab918882.jpg  \n",
            " extracting: valid/BloodImage_00216_jpg.rf.195f7ad40674b8de4777ef80ab918882.xml  \n",
            " extracting: valid/BloodImage_00217_jpg.rf.5536b798a73000bea3a6c6db9fc613e4.jpg  \n",
            " extracting: valid/BloodImage_00217_jpg.rf.5536b798a73000bea3a6c6db9fc613e4.xml  \n",
            " extracting: valid/BloodImage_00221_jpg.rf.949f34eb0477e5d7c19f94cb4e32d5a5.jpg  \n",
            " extracting: valid/BloodImage_00221_jpg.rf.949f34eb0477e5d7c19f94cb4e32d5a5.xml  \n",
            " extracting: valid/BloodImage_00225_jpg.rf.1ee0fa1432d3a5484a4d946a5a0bbda3.jpg  \n",
            " extracting: valid/BloodImage_00225_jpg.rf.1ee0fa1432d3a5484a4d946a5a0bbda3.xml  \n",
            " extracting: valid/BloodImage_00228_jpg.rf.111186a1cfd183edefe928d8d0205179.jpg  \n",
            " extracting: valid/BloodImage_00228_jpg.rf.111186a1cfd183edefe928d8d0205179.xml  \n",
            " extracting: valid/BloodImage_00245_jpg.rf.826f18f0f09221813c3895972842198a.jpg  \n",
            " extracting: valid/BloodImage_00245_jpg.rf.826f18f0f09221813c3895972842198a.xml  \n",
            " extracting: valid/BloodImage_00246_jpg.rf.0db836a82f49eb424a68ed4f13af0f76.jpg  \n",
            " extracting: valid/BloodImage_00246_jpg.rf.0db836a82f49eb424a68ed4f13af0f76.xml  \n",
            " extracting: valid/BloodImage_00252_jpg.rf.cd5ca37fc581f373cada4297a6c0e5ef.jpg  \n",
            " extracting: valid/BloodImage_00252_jpg.rf.cd5ca37fc581f373cada4297a6c0e5ef.xml  \n",
            " extracting: valid/BloodImage_00258_jpg.rf.f0081a194a94d488b855f6f9692d8c74.jpg  \n",
            " extracting: valid/BloodImage_00258_jpg.rf.f0081a194a94d488b855f6f9692d8c74.xml  \n",
            " extracting: valid/BloodImage_00259_jpg.rf.da944c073232164e4ccae44e6b183860.jpg  \n",
            " extracting: valid/BloodImage_00259_jpg.rf.da944c073232164e4ccae44e6b183860.xml  \n",
            " extracting: valid/BloodImage_00263_jpg.rf.1836ce652322fbd8d57ba81f0008e694.jpg  \n",
            " extracting: valid/BloodImage_00263_jpg.rf.1836ce652322fbd8d57ba81f0008e694.xml  \n",
            " extracting: valid/BloodImage_00270_jpg.rf.e495ce06a313608e169c9720480c4cc7.jpg  \n",
            " extracting: valid/BloodImage_00270_jpg.rf.e495ce06a313608e169c9720480c4cc7.xml  \n",
            " extracting: valid/BloodImage_00272_jpg.rf.b8586a591688b3fb33cfc8de105c8add.jpg  \n",
            " extracting: valid/BloodImage_00272_jpg.rf.b8586a591688b3fb33cfc8de105c8add.xml  \n",
            " extracting: valid/BloodImage_00273_jpg.rf.35dfe89de85b458f719aeaaa68846f7d.jpg  \n",
            " extracting: valid/BloodImage_00273_jpg.rf.35dfe89de85b458f719aeaaa68846f7d.xml  \n",
            " extracting: valid/BloodImage_00274_jpg.rf.c139abd1792e0ffe07cb82e02a9e031e.jpg  \n",
            " extracting: valid/BloodImage_00274_jpg.rf.c139abd1792e0ffe07cb82e02a9e031e.xml  \n",
            " extracting: valid/BloodImage_00276_jpg.rf.ff5ab3a615d8dc715314b4cf6a0ff6ce.jpg  \n",
            " extracting: valid/BloodImage_00276_jpg.rf.ff5ab3a615d8dc715314b4cf6a0ff6ce.xml  \n",
            " extracting: valid/BloodImage_00277_jpg.rf.e03e8b0cb7ba4887ccf226faffa039ea.jpg  \n",
            " extracting: valid/BloodImage_00277_jpg.rf.e03e8b0cb7ba4887ccf226faffa039ea.xml  \n",
            " extracting: valid/BloodImage_00281_jpg.rf.7f42dc6a75ba1e4fbcd0b2a2f5301f13.jpg  \n",
            " extracting: valid/BloodImage_00281_jpg.rf.7f42dc6a75ba1e4fbcd0b2a2f5301f13.xml  \n",
            " extracting: valid/BloodImage_00296_jpg.rf.629c7d5fba915ebdf8e3e087647e7934.jpg  \n",
            " extracting: valid/BloodImage_00296_jpg.rf.629c7d5fba915ebdf8e3e087647e7934.xml  \n",
            " extracting: valid/BloodImage_00297_jpg.rf.a04aa31cd3db26908e42d426aef24c03.jpg  \n",
            " extracting: valid/BloodImage_00297_jpg.rf.a04aa31cd3db26908e42d426aef24c03.xml  \n",
            " extracting: valid/BloodImage_00298_jpg.rf.d0aa119c4f394aed0060f52d5a6c3904.jpg  \n",
            " extracting: valid/BloodImage_00298_jpg.rf.d0aa119c4f394aed0060f52d5a6c3904.xml  \n",
            " extracting: valid/BloodImage_00300_jpg.rf.9bda3f2dc304d4557d781294e12f2594.jpg  \n",
            " extracting: valid/BloodImage_00300_jpg.rf.9bda3f2dc304d4557d781294e12f2594.xml  \n",
            " extracting: valid/BloodImage_00309_jpg.rf.bb892b3140c84836cc095e49e79e0943.jpg  \n",
            " extracting: valid/BloodImage_00309_jpg.rf.bb892b3140c84836cc095e49e79e0943.xml  \n",
            " extracting: valid/BloodImage_00315_jpg.rf.2474ef08d570f6ce69c5987c05fc83e0.jpg  \n",
            " extracting: valid/BloodImage_00315_jpg.rf.2474ef08d570f6ce69c5987c05fc83e0.xml  \n",
            " extracting: valid/BloodImage_00319_jpg.rf.cbe3e8f5785a021e9ef6464545ea7816.jpg  \n",
            " extracting: valid/BloodImage_00319_jpg.rf.cbe3e8f5785a021e9ef6464545ea7816.xml  \n",
            " extracting: valid/BloodImage_00331_jpg.rf.3090709d0964f61d92c48b94aff80084.jpg  \n",
            " extracting: valid/BloodImage_00331_jpg.rf.3090709d0964f61d92c48b94aff80084.xml  \n",
            " extracting: valid/BloodImage_00335_jpg.rf.814c79ad38295791ef5d915d0e5cffc4.jpg  \n",
            " extracting: valid/BloodImage_00335_jpg.rf.814c79ad38295791ef5d915d0e5cffc4.xml  \n",
            " extracting: valid/BloodImage_00344_jpg.rf.34e5227c60620fad8ff23aaa5e5c69ae.jpg  \n",
            " extracting: valid/BloodImage_00344_jpg.rf.34e5227c60620fad8ff23aaa5e5c69ae.xml  \n",
            " extracting: valid/BloodImage_00348_jpg.rf.97ec8c703be56a9f36c004e9178ccdfc.jpg  \n",
            " extracting: valid/BloodImage_00348_jpg.rf.97ec8c703be56a9f36c004e9178ccdfc.xml  \n",
            " extracting: valid/BloodImage_00355_jpg.rf.dced7a1203b71b721d22be4617fc96f9.jpg  \n",
            " extracting: valid/BloodImage_00355_jpg.rf.dced7a1203b71b721d22be4617fc96f9.xml  \n",
            " extracting: valid/BloodImage_00364_jpg.rf.0125c8f2f2754216d734618e33fda9b1.jpg  \n",
            " extracting: valid/BloodImage_00364_jpg.rf.0125c8f2f2754216d734618e33fda9b1.xml  \n",
            " extracting: valid/BloodImage_00371_jpg.rf.73ded480b7b0a0ac05f22e90f4f478ab.jpg  \n",
            " extracting: valid/BloodImage_00371_jpg.rf.73ded480b7b0a0ac05f22e90f4f478ab.xml  \n",
            " extracting: valid/BloodImage_00377_jpg.rf.38d0fadf00d8b2355cc8228ff41e0faa.jpg  \n",
            " extracting: valid/BloodImage_00377_jpg.rf.38d0fadf00d8b2355cc8228ff41e0faa.xml  \n",
            " extracting: valid/BloodImage_00384_jpg.rf.989105a4bc0c4b0710457d310d62221b.jpg  \n",
            " extracting: valid/BloodImage_00384_jpg.rf.989105a4bc0c4b0710457d310d62221b.xml  \n",
            " extracting: valid/BloodImage_00392_jpg.rf.d6c7f1baf550a2d709a1f353cf0021f8.jpg  \n",
            " extracting: valid/BloodImage_00392_jpg.rf.d6c7f1baf550a2d709a1f353cf0021f8.xml  \n",
            " extracting: valid/BloodImage_00402_jpg.rf.cd6309adfd39b106d88cbb1517820371.jpg  \n",
            " extracting: valid/BloodImage_00402_jpg.rf.cd6309adfd39b106d88cbb1517820371.xml  \n",
            " extracting: valid/BloodImage_00403_jpg.rf.8e73a82ca74b00311385217c70b33b12.jpg  \n",
            " extracting: valid/BloodImage_00403_jpg.rf.8e73a82ca74b00311385217c70b33b12.xml  \n",
            " extracting: valid/BloodImage_00404_jpg.rf.c25423833af21b0a1cd2cef70a12bce5.jpg  \n",
            " extracting: valid/BloodImage_00404_jpg.rf.c25423833af21b0a1cd2cef70a12bce5.xml  \n",
            " extracting: valid/BloodImage_00410_jpg.rf.ebc1cae591fa39c4465095853a64b1f7.jpg  \n",
            " extracting: valid/BloodImage_00410_jpg.rf.ebc1cae591fa39c4465095853a64b1f7.xml  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Dr4cOxxbVuHB",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "aef0427d-41de-4b71-c826-87ed9c858bc2"
      },
      "source": [
        "!wget  https://github.com/Megvii-BaseDetection/storage/releases/download/0.0.1/yolox_s.pth\n",
        "%cd YOLOX/\n",
        "!ln -s /content/train/ ./datasets/VOCdevkit"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--2022-03-09 16:51:11--  https://github.com/Megvii-BaseDetection/storage/releases/download/0.0.1/yolox_s.pth\n",
            "Resolving github.com (github.com)... 52.69.186.44\n",
            "Connecting to github.com (github.com)|52.69.186.44|:443... connected.\n",
            "HTTP request sent, awaiting response... 302 Found\n",
            "Location: https://objects.githubusercontent.com/github-production-release-asset-2e65be/388351473/0b307dd4-bddb-4cfe-a863-1d19afb5598a?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20220309%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20220309T165112Z&X-Amz-Expires=300&X-Amz-Signature=cbd58f698bd55fecbc6453bffa98646d4b2a8c0408dd29e00bc42917762a2bf1&X-Amz-SignedHeaders=host&actor_id=0&key_id=0&repo_id=388351473&response-content-disposition=attachment%3B%20filename%3Dyolox_s.pth&response-content-type=application%2Foctet-stream [following]\n",
            "--2022-03-09 16:51:12--  https://objects.githubusercontent.com/github-production-release-asset-2e65be/388351473/0b307dd4-bddb-4cfe-a863-1d19afb5598a?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20220309%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20220309T165112Z&X-Amz-Expires=300&X-Amz-Signature=cbd58f698bd55fecbc6453bffa98646d4b2a8c0408dd29e00bc42917762a2bf1&X-Amz-SignedHeaders=host&actor_id=0&key_id=0&repo_id=388351473&response-content-disposition=attachment%3B%20filename%3Dyolox_s.pth&response-content-type=application%2Foctet-stream\n",
            "Resolving objects.githubusercontent.com (objects.githubusercontent.com)... 185.199.108.133, 185.199.109.133, 185.199.110.133, ...\n",
            "Connecting to objects.githubusercontent.com (objects.githubusercontent.com)|185.199.108.133|:443... connected.\n",
            "HTTP request sent, awaiting response... 200 OK\n",
            "Length: 72050245 (69M) [application/octet-stream]\n",
            "Saving to: ‘yolox_s.pth’\n",
            "\n",
            "yolox_s.pth         100%[===================>]  68.71M  9.43MB/s    in 8.2s    \n",
            "\n",
            "2022-03-09 16:51:20 (8.39 MB/s) - ‘yolox_s.pth’ saved [72050245/72050245]\n",
            "\n",
            "/content/YOLOX\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "agZSFjXLByrv"
      },
      "source": [
        "## Format Your Data Appropriately"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_xTRtDWrIw_D",
        "outputId": "ac83c0f5-646a-4684-9152-f775768aff7b"
      },
      "source": [
        "%mkdir \"/content/YOLOX/datasets/VOCdevkit/VOC2007\"\n",
        "!python3 voc_txt.py \"/content/YOLOX/datasets/VOCdevkit/\"\n",
        "%mkdir \"/content/YOLOX/datasets/VOCdevkit/VOC2012\"\n",
        "!cp -r \"/content/YOLOX/datasets/VOCdevkit/VOC2007/.\" \"/content/YOLOX/datasets/VOCdevkit/VOC2012\""
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "train and val size: 229\n",
            "train size: 183\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "BW8iyuMyB3bc"
      },
      "source": [
        "## Change the Classes\n",
        "Make sure you change the classes based on what your dataset. To ensure that the training process will function as intended, write the classes in lowercase with no whitespace."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rohuAE541Nug"
      },
      "source": [
        "from IPython.core.magic import register_line_cell_magic\n",
        "\n",
        "@register_line_cell_magic\n",
        "def writetemplate(line, cell):\n",
        "    with open(line, 'w') as f:\n",
        "        f.write(cell.format(**globals()))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9h5PM8Ft1OjG"
      },
      "source": [
        "##REPLACE this cell with your classnames stripped of whitespace and lowercase\n",
        "%%writetemplate /content/YOLOX/yolox/data/datasets/voc_classes.py\n",
        "\n",
        "VOC_CLASSES = (\n",
        "  \"rbc\",\n",
        "  \"wbc\",\n",
        "  \"platelets\"\n",
        ")"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Lu6_LzErQRSU"
      },
      "source": [
        "##REPLACE this cell with your classnames stripped of whitespace and lowercase\n",
        "%%writetemplate /content/YOLOX/yolox/data/datasets/coco_classes.py\n",
        "\n",
        "COCO_CLASSES = (\n",
        "  \"rbc\",\n",
        "  \"wbc\",\n",
        "  \"platelets\"\n",
        ")"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2uAaf5AKSE_E"
      },
      "source": [
        "Set the number of classes you have in your dataset in te `NUM_CLASSES` variable"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hxA0JmWqwU_M"
      },
      "source": [
        "NUM_CLASSES = 3\n",
        "!sed -i -e 's/self.num_classes = 20/self.num_classes = {NUM_CLASSES}/g' \"/content/YOLOX/exps/example/yolox_voc/yolox_voc_s.py\""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "eiYvw_GGKaro"
      },
      "source": [
        "# Download Pretrained Weights"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UsOCh9hRKbIw",
        "outputId": "5e45fa0f-4a8b-4b09-e810-cb45fc8bb82d"
      },
      "source": [
        "%cd /content/\n",
        "!wget https://github.com/Megvii-BaseDetection/storage/releases/download/0.0.1/yolox_s.pth\n",
        "%cd /content/YOLOX/"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "/content\n",
            "--2022-03-09 16:52:07--  https://github.com/Megvii-BaseDetection/storage/releases/download/0.0.1/yolox_s.pth\n",
            "Resolving github.com (github.com)... 52.69.186.44\n",
            "Connecting to github.com (github.com)|52.69.186.44|:443... connected.\n",
            "HTTP request sent, awaiting response... 302 Found\n",
            "Location: https://objects.githubusercontent.com/github-production-release-asset-2e65be/388351473/0b307dd4-bddb-4cfe-a863-1d19afb5598a?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20220309%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20220309T165112Z&X-Amz-Expires=300&X-Amz-Signature=cbd58f698bd55fecbc6453bffa98646d4b2a8c0408dd29e00bc42917762a2bf1&X-Amz-SignedHeaders=host&actor_id=0&key_id=0&repo_id=388351473&response-content-disposition=attachment%3B%20filename%3Dyolox_s.pth&response-content-type=application%2Foctet-stream [following]\n",
            "--2022-03-09 16:52:07--  https://objects.githubusercontent.com/github-production-release-asset-2e65be/388351473/0b307dd4-bddb-4cfe-a863-1d19afb5598a?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20220309%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20220309T165112Z&X-Amz-Expires=300&X-Amz-Signature=cbd58f698bd55fecbc6453bffa98646d4b2a8c0408dd29e00bc42917762a2bf1&X-Amz-SignedHeaders=host&actor_id=0&key_id=0&repo_id=388351473&response-content-disposition=attachment%3B%20filename%3Dyolox_s.pth&response-content-type=application%2Foctet-stream\n",
            "Resolving objects.githubusercontent.com (objects.githubusercontent.com)... 185.199.111.133, 185.199.110.133, 185.199.108.133, ...\n",
            "Connecting to objects.githubusercontent.com (objects.githubusercontent.com)|185.199.111.133|:443... connected.\n",
            "HTTP request sent, awaiting response... 200 OK\n",
            "Length: 72050245 (69M) [application/octet-stream]\n",
            "Saving to: ‘yolox_s.pth.1’\n",
            "\n",
            "yolox_s.pth.1       100%[===================>]  68.71M   185MB/s    in 0.4s    \n",
            "\n",
            "2022-03-09 16:52:08 (185 MB/s) - ‘yolox_s.pth.1’ saved [72050245/72050245]\n",
            "\n",
            "/content/YOLOX\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2TabCpJOCRti"
      },
      "source": [
        "# Train the Model"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "s5h536amH32Z",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8237b845-52f2-4fba-b3bd-bda88448362b"
      },
      "source": [
        "!python tools/train.py -f exps/example/yolox_voc/yolox_voc_s.py -d 1 -b 16 --fp16 -o -c /content/yolox_s.pth"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "`fused_weight_gradient_mlp_cuda` module not found. gradient accumulation fusion with weight gradient computation disabled.\n",
            "\u001b[32m2022-03-09 16:52:26\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m125\u001b[0m - \u001b[1margs: Namespace(batch_size=16, ckpt='/content/yolox_s.pth', devices=1, dist_backend='nccl', dist_url=None, exp_file='exps/example/yolox_voc/yolox_voc_s.py', experiment_name='yolox_voc_s', fp16=True, local_rank=0, machine_rank=0, name=None, num_machines=1, occupy=True, opts=[], resume=False, start_epoch=None)\u001b[0m\n",
            "\u001b[32m2022-03-09 16:52:26\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m126\u001b[0m - \u001b[1mexp value:\n",
            "╒══════════════════╤════════════════════════════╕\n",
            "│ keys             │ values                     │\n",
            "╞══════════════════╪════════════════════════════╡\n",
            "│ seed             │ None                       │\n",
            "├──────────────────┼────────────────────────────┤\n",
            "│ output_dir       │ './YOLOX_outputs'          │\n",
            "├──────────────────┼────────────────────────────┤\n",
            "│ print_interval   │ 10                         │\n",
            "├──────────────────┼────────────────────────────┤\n",
            "│ eval_interval    │ 10                         │\n",
            "├──────────────────┼────────────────────────────┤\n",
            "│ num_classes      │ 3                          │\n",
            "├──────────────────┼────────────────────────────┤\n",
            "│ depth            │ 0.33                       │\n",
            "├──────────────────┼────────────────────────────┤\n",
            "│ width            │ 0.5                        │\n",
            "├──────────────────┼────────────────────────────┤\n",
            "│ data_num_workers │ 4                          │\n",
            "├──────────────────┼────────────────────────────┤\n",
            "│ input_size       │ (640, 640)                 │\n",
            "├──────────────────┼────────────────────────────┤\n",
            "│ random_size      │ (14, 26)                   │\n",
            "├──────────────────┼────────────────────────────┤\n",
            "│ train_ann        │ 'instances_train2017.json' │\n",
            "├──────────────────┼────────────────────────────┤\n",
            "│ val_ann          │ 'instances_val2017.json'   │\n",
            "├──────────────────┼────────────────────────────┤\n",
            "│ degrees          │ 10.0                       │\n",
            "├──────────────────┼────────────────────────────┤\n",
            "│ translate        │ 0.1                        │\n",
            "├──────────────────┼────────────────────────────┤\n",
            "│ scale            │ (0.1, 2)                   │\n",
            "├──────────────────┼────────────────────────────┤\n",
            "│ mscale           │ (0.8, 1.6)                 │\n",
            "├──────────────────┼────────────────────────────┤\n",
            "│ shear            │ 2.0                        │\n",
            "├──────────────────┼────────────────────────────┤\n",
            "│ perspective      │ 0.0                        │\n",
            "├──────────────────┼────────────────────────────┤\n",
            "│ enable_mixup     │ True                       │\n",
            "├──────────────────┼────────────────────────────┤\n",
            "│ warmup_epochs    │ 5                          │\n",
            "├──────────────────┼────────────────────────────┤\n",
            "│ max_epoch        │ 300                        │\n",
            "├──────────────────┼────────────────────────────┤\n",
            "│ warmup_lr        │ 0                          │\n",
            "├──────────────────┼────────────────────────────┤\n",
            "│ basic_lr_per_img │ 0.00015625                 │\n",
            "├──────────────────┼────────────────────────────┤\n",
            "│ scheduler        │ 'yoloxwarmcos'             │\n",
            "├──────────────────┼────────────────────────────┤\n",
            "│ no_aug_epochs    │ 15                         │\n",
            "├──────────────────┼────────────────────────────┤\n",
            "│ min_lr_ratio     │ 0.05                       │\n",
            "├──────────────────┼────────────────────────────┤\n",
            "│ ema              │ True                       │\n",
            "├──────────────────┼────────────────────────────┤\n",
            "│ weight_decay     │ 0.0005                     │\n",
            "├──────────────────┼────────────────────────────┤\n",
            "│ momentum         │ 0.9                        │\n",
            "├──────────────────┼────────────────────────────┤\n",
            "│ exp_name         │ 'yolox_voc_s'              │\n",
            "├──────────────────┼────────────────────────────┤\n",
            "│ test_size        │ (640, 640)                 │\n",
            "├──────────────────┼────────────────────────────┤\n",
            "│ test_conf        │ 0.01                       │\n",
            "├──────────────────┼────────────────────────────┤\n",
            "│ nmsthre          │ 0.65                       │\n",
            "╘══════════════════╧════════════════════════════╛\u001b[0m\n",
            "\u001b[32m2022-03-09 16:52:26\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m132\u001b[0m - \u001b[1mModel Summary: Params: 8.94M, Gflops: 26.64\u001b[0m\n",
            "\u001b[32m2022-03-09 16:52:30\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36mapex.amp.frontend\u001b[0m:\u001b[36m328\u001b[0m - \u001b[1mSelected optimization level O1:  Insert automatic casts around Pytorch functions and Tensor methods.\u001b[0m\n",
            "\u001b[32m2022-03-09 16:52:30\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36mapex.amp.frontend\u001b[0m:\u001b[36m329\u001b[0m - \u001b[1mDefaults for this optimization level are:\u001b[0m\n",
            "\u001b[32m2022-03-09 16:52:30\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36mapex.amp.frontend\u001b[0m:\u001b[36m331\u001b[0m - \u001b[1menabled                : True\u001b[0m\n",
            "\u001b[32m2022-03-09 16:52:30\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36mapex.amp.frontend\u001b[0m:\u001b[36m331\u001b[0m - \u001b[1mopt_level              : O1\u001b[0m\n",
            "\u001b[32m2022-03-09 16:52:30\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36mapex.amp.frontend\u001b[0m:\u001b[36m331\u001b[0m - \u001b[1mcast_model_type        : None\u001b[0m\n",
            "\u001b[32m2022-03-09 16:52:30\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36mapex.amp.frontend\u001b[0m:\u001b[36m331\u001b[0m - \u001b[1mpatch_torch_functions  : True\u001b[0m\n",
            "\u001b[32m2022-03-09 16:52:30\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36mapex.amp.frontend\u001b[0m:\u001b[36m331\u001b[0m - \u001b[1mkeep_batchnorm_fp32    : None\u001b[0m\n",
            "\u001b[32m2022-03-09 16:52:30\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36mapex.amp.frontend\u001b[0m:\u001b[36m331\u001b[0m - \u001b[1mmaster_weights         : None\u001b[0m\n",
            "\u001b[32m2022-03-09 16:52:30\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36mapex.amp.frontend\u001b[0m:\u001b[36m331\u001b[0m - \u001b[1mloss_scale             : dynamic\u001b[0m\n",
            "\u001b[32m2022-03-09 16:52:30\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36mapex.amp.frontend\u001b[0m:\u001b[36m336\u001b[0m - \u001b[1mProcessing user overrides (additional kwargs that are not None)...\u001b[0m\n",
            "\u001b[32m2022-03-09 16:52:30\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36mapex.amp.frontend\u001b[0m:\u001b[36m354\u001b[0m - \u001b[1mAfter processing overrides, optimization options are:\u001b[0m\n",
            "\u001b[32m2022-03-09 16:52:30\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36mapex.amp.frontend\u001b[0m:\u001b[36m356\u001b[0m - \u001b[1menabled                : True\u001b[0m\n",
            "\u001b[32m2022-03-09 16:52:30\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36mapex.amp.frontend\u001b[0m:\u001b[36m356\u001b[0m - \u001b[1mopt_level              : O1\u001b[0m\n",
            "\u001b[32m2022-03-09 16:52:30\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36mapex.amp.frontend\u001b[0m:\u001b[36m356\u001b[0m - \u001b[1mcast_model_type        : None\u001b[0m\n",
            "\u001b[32m2022-03-09 16:52:30\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36mapex.amp.frontend\u001b[0m:\u001b[36m356\u001b[0m - \u001b[1mpatch_torch_functions  : True\u001b[0m\n",
            "\u001b[32m2022-03-09 16:52:30\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36mapex.amp.frontend\u001b[0m:\u001b[36m356\u001b[0m - \u001b[1mkeep_batchnorm_fp32    : None\u001b[0m\n",
            "\u001b[32m2022-03-09 16:52:30\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36mapex.amp.frontend\u001b[0m:\u001b[36m356\u001b[0m - \u001b[1mmaster_weights         : None\u001b[0m\n",
            "\u001b[32m2022-03-09 16:52:30\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36mapex.amp.frontend\u001b[0m:\u001b[36m356\u001b[0m - \u001b[1mloss_scale             : dynamic\u001b[0m\n",
            "\u001b[32m2022-03-09 16:52:30\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m297\u001b[0m - \u001b[1mloading checkpoint for fine tuning\u001b[0m\n",
            "\u001b[32m2022-03-09 16:52:30\u001b[0m | \u001b[33m\u001b[1mWARNING \u001b[0m | \u001b[36myolox.utils.checkpoint\u001b[0m:\u001b[36m27\u001b[0m - \u001b[33m\u001b[1mShape of head.cls_preds.0.weight in checkpoint is torch.Size([80, 128, 1, 1]), while shape of head.cls_preds.0.weight in model is torch.Size([3, 128, 1, 1]).\u001b[0m\n",
            "\u001b[32m2022-03-09 16:52:30\u001b[0m | \u001b[33m\u001b[1mWARNING \u001b[0m | \u001b[36myolox.utils.checkpoint\u001b[0m:\u001b[36m27\u001b[0m - \u001b[33m\u001b[1mShape of head.cls_preds.0.bias in checkpoint is torch.Size([80]), while shape of head.cls_preds.0.bias in model is torch.Size([3]).\u001b[0m\n",
            "\u001b[32m2022-03-09 16:52:30\u001b[0m | \u001b[33m\u001b[1mWARNING \u001b[0m | \u001b[36myolox.utils.checkpoint\u001b[0m:\u001b[36m27\u001b[0m - \u001b[33m\u001b[1mShape of head.cls_preds.1.weight in checkpoint is torch.Size([80, 128, 1, 1]), while shape of head.cls_preds.1.weight in model is torch.Size([3, 128, 1, 1]).\u001b[0m\n",
            "\u001b[32m2022-03-09 16:52:30\u001b[0m | \u001b[33m\u001b[1mWARNING \u001b[0m | \u001b[36myolox.utils.checkpoint\u001b[0m:\u001b[36m27\u001b[0m - \u001b[33m\u001b[1mShape of head.cls_preds.1.bias in checkpoint is torch.Size([80]), while shape of head.cls_preds.1.bias in model is torch.Size([3]).\u001b[0m\n",
            "\u001b[32m2022-03-09 16:52:30\u001b[0m | \u001b[33m\u001b[1mWARNING \u001b[0m | \u001b[36myolox.utils.checkpoint\u001b[0m:\u001b[36m27\u001b[0m - \u001b[33m\u001b[1mShape of head.cls_preds.2.weight in checkpoint is torch.Size([80, 128, 1, 1]), while shape of head.cls_preds.2.weight in model is torch.Size([3, 128, 1, 1]).\u001b[0m\n",
            "\u001b[32m2022-03-09 16:52:30\u001b[0m | \u001b[33m\u001b[1mWARNING \u001b[0m | \u001b[36myolox.utils.checkpoint\u001b[0m:\u001b[36m27\u001b[0m - \u001b[33m\u001b[1mShape of head.cls_preds.2.bias in checkpoint is torch.Size([80]), while shape of head.cls_preds.2.bias in model is torch.Size([3]).\u001b[0m\n",
            "\u001b[32m2022-03-09 16:52:30\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m152\u001b[0m - \u001b[1minit prefetcher, this might take one minute or less...\u001b[0m\n",
            "\u001b[32m2022-03-09 16:52:40\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m182\u001b[0m - \u001b[1mTraining start...\u001b[0m\n",
            "\u001b[32m2022-03-09 16:52:40\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m183\u001b[0m - \u001b[1m\n",
            "YOLOX(\n",
            "  (backbone): YOLOPAFPN(\n",
            "    (backbone): CSPDarknet(\n",
            "      (stem): Focus(\n",
            "        (conv): BaseConv(\n",
            "          (conv): Conv2d(12, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "          (bn): BatchNorm2d(32, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "          (act): SiLU(inplace=True)\n",
            "        )\n",
            "      )\n",
            "      (dark2): Sequential(\n",
            "        (0): BaseConv(\n",
            "          (conv): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n",
            "          (bn): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "          (act): SiLU(inplace=True)\n",
            "        )\n",
            "        (1): CSPLayer(\n",
            "          (conv1): BaseConv(\n",
            "            (conv): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
            "            (bn): BatchNorm2d(32, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "            (act): SiLU(inplace=True)\n",
            "          )\n",
            "          (conv2): BaseConv(\n",
            "            (conv): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
            "            (bn): BatchNorm2d(32, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "            (act): SiLU(inplace=True)\n",
            "          )\n",
            "          (conv3): BaseConv(\n",
            "            (conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
            "            (bn): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "            (act): SiLU(inplace=True)\n",
            "          )\n",
            "          (m): Sequential(\n",
            "            (0): Bottleneck(\n",
            "              (conv1): BaseConv(\n",
            "                (conv): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
            "                (bn): BatchNorm2d(32, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "                (act): SiLU(inplace=True)\n",
            "              )\n",
            "              (conv2): BaseConv(\n",
            "                (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "                (bn): BatchNorm2d(32, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "                (act): SiLU(inplace=True)\n",
            "              )\n",
            "            )\n",
            "          )\n",
            "        )\n",
            "      )\n",
            "      (dark3): Sequential(\n",
            "        (0): BaseConv(\n",
            "          (conv): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n",
            "          (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "          (act): SiLU(inplace=True)\n",
            "        )\n",
            "        (1): CSPLayer(\n",
            "          (conv1): BaseConv(\n",
            "            (conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
            "            (bn): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "            (act): SiLU(inplace=True)\n",
            "          )\n",
            "          (conv2): BaseConv(\n",
            "            (conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
            "            (bn): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "            (act): SiLU(inplace=True)\n",
            "          )\n",
            "          (conv3): BaseConv(\n",
            "            (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
            "            (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "            (act): SiLU(inplace=True)\n",
            "          )\n",
            "          (m): Sequential(\n",
            "            (0): Bottleneck(\n",
            "              (conv1): BaseConv(\n",
            "                (conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
            "                (bn): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "                (act): SiLU(inplace=True)\n",
            "              )\n",
            "              (conv2): BaseConv(\n",
            "                (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "                (bn): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "                (act): SiLU(inplace=True)\n",
            "              )\n",
            "            )\n",
            "            (1): Bottleneck(\n",
            "              (conv1): BaseConv(\n",
            "                (conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
            "                (bn): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "                (act): SiLU(inplace=True)\n",
            "              )\n",
            "              (conv2): BaseConv(\n",
            "                (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "                (bn): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "                (act): SiLU(inplace=True)\n",
            "              )\n",
            "            )\n",
            "            (2): Bottleneck(\n",
            "              (conv1): BaseConv(\n",
            "                (conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
            "                (bn): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "                (act): SiLU(inplace=True)\n",
            "              )\n",
            "              (conv2): BaseConv(\n",
            "                (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "                (bn): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "                (act): SiLU(inplace=True)\n",
            "              )\n",
            "            )\n",
            "          )\n",
            "        )\n",
            "      )\n",
            "      (dark4): Sequential(\n",
            "        (0): BaseConv(\n",
            "          (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n",
            "          (bn): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "          (act): SiLU(inplace=True)\n",
            "        )\n",
            "        (1): CSPLayer(\n",
            "          (conv1): BaseConv(\n",
            "            (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
            "            (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "            (act): SiLU(inplace=True)\n",
            "          )\n",
            "          (conv2): BaseConv(\n",
            "            (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
            "            (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "            (act): SiLU(inplace=True)\n",
            "          )\n",
            "          (conv3): BaseConv(\n",
            "            (conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
            "            (bn): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "            (act): SiLU(inplace=True)\n",
            "          )\n",
            "          (m): Sequential(\n",
            "            (0): Bottleneck(\n",
            "              (conv1): BaseConv(\n",
            "                (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
            "                (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "                (act): SiLU(inplace=True)\n",
            "              )\n",
            "              (conv2): BaseConv(\n",
            "                (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "                (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "                (act): SiLU(inplace=True)\n",
            "              )\n",
            "            )\n",
            "            (1): Bottleneck(\n",
            "              (conv1): BaseConv(\n",
            "                (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
            "                (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "                (act): SiLU(inplace=True)\n",
            "              )\n",
            "              (conv2): BaseConv(\n",
            "                (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "                (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "                (act): SiLU(inplace=True)\n",
            "              )\n",
            "            )\n",
            "            (2): Bottleneck(\n",
            "              (conv1): BaseConv(\n",
            "                (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
            "                (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "                (act): SiLU(inplace=True)\n",
            "              )\n",
            "              (conv2): BaseConv(\n",
            "                (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "                (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "                (act): SiLU(inplace=True)\n",
            "              )\n",
            "            )\n",
            "          )\n",
            "        )\n",
            "      )\n",
            "      (dark5): Sequential(\n",
            "        (0): BaseConv(\n",
            "          (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n",
            "          (bn): BatchNorm2d(512, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "          (act): SiLU(inplace=True)\n",
            "        )\n",
            "        (1): SPPBottleneck(\n",
            "          (conv1): BaseConv(\n",
            "            (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
            "            (bn): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "            (act): SiLU(inplace=True)\n",
            "          )\n",
            "          (m): ModuleList(\n",
            "            (0): MaxPool2d(kernel_size=5, stride=1, padding=2, dilation=1, ceil_mode=False)\n",
            "            (1): MaxPool2d(kernel_size=9, stride=1, padding=4, dilation=1, ceil_mode=False)\n",
            "            (2): MaxPool2d(kernel_size=13, stride=1, padding=6, dilation=1, ceil_mode=False)\n",
            "          )\n",
            "          (conv2): BaseConv(\n",
            "            (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
            "            (bn): BatchNorm2d(512, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "            (act): SiLU(inplace=True)\n",
            "          )\n",
            "        )\n",
            "        (2): CSPLayer(\n",
            "          (conv1): BaseConv(\n",
            "            (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
            "            (bn): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "            (act): SiLU(inplace=True)\n",
            "          )\n",
            "          (conv2): BaseConv(\n",
            "            (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
            "            (bn): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "            (act): SiLU(inplace=True)\n",
            "          )\n",
            "          (conv3): BaseConv(\n",
            "            (conv): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
            "            (bn): BatchNorm2d(512, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "            (act): SiLU(inplace=True)\n",
            "          )\n",
            "          (m): Sequential(\n",
            "            (0): Bottleneck(\n",
            "              (conv1): BaseConv(\n",
            "                (conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
            "                (bn): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "                (act): SiLU(inplace=True)\n",
            "              )\n",
            "              (conv2): BaseConv(\n",
            "                (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "                (bn): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "                (act): SiLU(inplace=True)\n",
            "              )\n",
            "            )\n",
            "          )\n",
            "        )\n",
            "      )\n",
            "    )\n",
            "    (upsample): Upsample(scale_factor=2.0, mode=nearest)\n",
            "    (lateral_conv0): BaseConv(\n",
            "      (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
            "      (bn): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "      (act): SiLU(inplace=True)\n",
            "    )\n",
            "    (C3_p4): CSPLayer(\n",
            "      (conv1): BaseConv(\n",
            "        (conv): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
            "        (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "        (act): SiLU(inplace=True)\n",
            "      )\n",
            "      (conv2): BaseConv(\n",
            "        (conv): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
            "        (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "        (act): SiLU(inplace=True)\n",
            "      )\n",
            "      (conv3): BaseConv(\n",
            "        (conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
            "        (bn): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "        (act): SiLU(inplace=True)\n",
            "      )\n",
            "      (m): Sequential(\n",
            "        (0): Bottleneck(\n",
            "          (conv1): BaseConv(\n",
            "            (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
            "            (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "            (act): SiLU(inplace=True)\n",
            "          )\n",
            "          (conv2): BaseConv(\n",
            "            (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "            (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "            (act): SiLU(inplace=True)\n",
            "          )\n",
            "        )\n",
            "      )\n",
            "    )\n",
            "    (reduce_conv1): BaseConv(\n",
            "      (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
            "      (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "      (act): SiLU(inplace=True)\n",
            "    )\n",
            "    (C3_p3): CSPLayer(\n",
            "      (conv1): BaseConv(\n",
            "        (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
            "        (bn): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "        (act): SiLU(inplace=True)\n",
            "      )\n",
            "      (conv2): BaseConv(\n",
            "        (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
            "        (bn): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "        (act): SiLU(inplace=True)\n",
            "      )\n",
            "      (conv3): BaseConv(\n",
            "        (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
            "        (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "        (act): SiLU(inplace=True)\n",
            "      )\n",
            "      (m): Sequential(\n",
            "        (0): Bottleneck(\n",
            "          (conv1): BaseConv(\n",
            "            (conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
            "            (bn): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "            (act): SiLU(inplace=True)\n",
            "          )\n",
            "          (conv2): BaseConv(\n",
            "            (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "            (bn): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "            (act): SiLU(inplace=True)\n",
            "          )\n",
            "        )\n",
            "      )\n",
            "    )\n",
            "    (bu_conv2): BaseConv(\n",
            "      (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n",
            "      (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "      (act): SiLU(inplace=True)\n",
            "    )\n",
            "    (C3_n3): CSPLayer(\n",
            "      (conv1): BaseConv(\n",
            "        (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
            "        (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "        (act): SiLU(inplace=True)\n",
            "      )\n",
            "      (conv2): BaseConv(\n",
            "        (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
            "        (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "        (act): SiLU(inplace=True)\n",
            "      )\n",
            "      (conv3): BaseConv(\n",
            "        (conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
            "        (bn): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "        (act): SiLU(inplace=True)\n",
            "      )\n",
            "      (m): Sequential(\n",
            "        (0): Bottleneck(\n",
            "          (conv1): BaseConv(\n",
            "            (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
            "            (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "            (act): SiLU(inplace=True)\n",
            "          )\n",
            "          (conv2): BaseConv(\n",
            "            (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "            (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "            (act): SiLU(inplace=True)\n",
            "          )\n",
            "        )\n",
            "      )\n",
            "    )\n",
            "    (bu_conv1): BaseConv(\n",
            "      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n",
            "      (bn): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "      (act): SiLU(inplace=True)\n",
            "    )\n",
            "    (C3_n4): CSPLayer(\n",
            "      (conv1): BaseConv(\n",
            "        (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
            "        (bn): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "        (act): SiLU(inplace=True)\n",
            "      )\n",
            "      (conv2): BaseConv(\n",
            "        (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
            "        (bn): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "        (act): SiLU(inplace=True)\n",
            "      )\n",
            "      (conv3): BaseConv(\n",
            "        (conv): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
            "        (bn): BatchNorm2d(512, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "        (act): SiLU(inplace=True)\n",
            "      )\n",
            "      (m): Sequential(\n",
            "        (0): Bottleneck(\n",
            "          (conv1): BaseConv(\n",
            "            (conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
            "            (bn): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "            (act): SiLU(inplace=True)\n",
            "          )\n",
            "          (conv2): BaseConv(\n",
            "            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "            (bn): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "            (act): SiLU(inplace=True)\n",
            "          )\n",
            "        )\n",
            "      )\n",
            "    )\n",
            "  )\n",
            "  (head): YOLOXHead(\n",
            "    (cls_convs): ModuleList(\n",
            "      (0): Sequential(\n",
            "        (0): BaseConv(\n",
            "          (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "          (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "          (act): SiLU(inplace=True)\n",
            "        )\n",
            "        (1): BaseConv(\n",
            "          (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "          (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "          (act): SiLU(inplace=True)\n",
            "        )\n",
            "      )\n",
            "      (1): Sequential(\n",
            "        (0): BaseConv(\n",
            "          (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "          (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "          (act): SiLU(inplace=True)\n",
            "        )\n",
            "        (1): BaseConv(\n",
            "          (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "          (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "          (act): SiLU(inplace=True)\n",
            "        )\n",
            "      )\n",
            "      (2): Sequential(\n",
            "        (0): BaseConv(\n",
            "          (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "          (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "          (act): SiLU(inplace=True)\n",
            "        )\n",
            "        (1): BaseConv(\n",
            "          (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "          (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "          (act): SiLU(inplace=True)\n",
            "        )\n",
            "      )\n",
            "    )\n",
            "    (reg_convs): ModuleList(\n",
            "      (0): Sequential(\n",
            "        (0): BaseConv(\n",
            "          (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "          (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "          (act): SiLU(inplace=True)\n",
            "        )\n",
            "        (1): BaseConv(\n",
            "          (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "          (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "          (act): SiLU(inplace=True)\n",
            "        )\n",
            "      )\n",
            "      (1): Sequential(\n",
            "        (0): BaseConv(\n",
            "          (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "          (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "          (act): SiLU(inplace=True)\n",
            "        )\n",
            "        (1): BaseConv(\n",
            "          (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "          (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "          (act): SiLU(inplace=True)\n",
            "        )\n",
            "      )\n",
            "      (2): Sequential(\n",
            "        (0): BaseConv(\n",
            "          (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "          (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "          (act): SiLU(inplace=True)\n",
            "        )\n",
            "        (1): BaseConv(\n",
            "          (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "          (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "          (act): SiLU(inplace=True)\n",
            "        )\n",
            "      )\n",
            "    )\n",
            "    (cls_preds): ModuleList(\n",
            "      (0): Conv2d(128, 3, kernel_size=(1, 1), stride=(1, 1))\n",
            "      (1): Conv2d(128, 3, kernel_size=(1, 1), stride=(1, 1))\n",
            "      (2): Conv2d(128, 3, kernel_size=(1, 1), stride=(1, 1))\n",
            "    )\n",
            "    (reg_preds): ModuleList(\n",
            "      (0): Conv2d(128, 4, kernel_size=(1, 1), stride=(1, 1))\n",
            "      (1): Conv2d(128, 4, kernel_size=(1, 1), stride=(1, 1))\n",
            "      (2): Conv2d(128, 4, kernel_size=(1, 1), stride=(1, 1))\n",
            "    )\n",
            "    (obj_preds): ModuleList(\n",
            "      (0): Conv2d(128, 1, kernel_size=(1, 1), stride=(1, 1))\n",
            "      (1): Conv2d(128, 1, kernel_size=(1, 1), stride=(1, 1))\n",
            "      (2): Conv2d(128, 1, kernel_size=(1, 1), stride=(1, 1))\n",
            "    )\n",
            "    (stems): ModuleList(\n",
            "      (0): BaseConv(\n",
            "        (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
            "        (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "        (act): SiLU(inplace=True)\n",
            "      )\n",
            "      (1): BaseConv(\n",
            "        (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
            "        (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "        (act): SiLU(inplace=True)\n",
            "      )\n",
            "      (2): BaseConv(\n",
            "        (conv): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
            "        (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "        (act): SiLU(inplace=True)\n",
            "      )\n",
            "    )\n",
            "    (l1_loss): L1Loss()\n",
            "    (bcewithlog_loss): BCEWithLogitsLoss()\n",
            "    (iou_loss): IOUloss()\n",
            "  )\n",
            ")\u001b[0m\n",
            "\u001b[32m2022-03-09 16:52:40\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m193\u001b[0m - \u001b[1m---> start train epoch1\u001b[0m\n",
            "\u001b[32m2022-03-09 16:52:46\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36mapex.amp.handle\u001b[0m:\u001b[36m140\u001b[0m - \u001b[1mGradient overflow.  Skipping step, loss scaler 0 reducing loss scale to 32768.0\u001b[0m\n",
            "\u001b[32m2022-03-09 16:52:46\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36mapex.amp.handle\u001b[0m:\u001b[36m140\u001b[0m - \u001b[1mGradient overflow.  Skipping step, loss scaler 0 reducing loss scale to 16384.0\u001b[0m\n",
            "\u001b[32m2022-03-09 16:52:51\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m255\u001b[0m - \u001b[1mepoch: 1/300, iter: 10/29, mem: 12340Mb, iter_time: 1.121s, data_time: 0.243s, total_loss: 11.2, iou_loss: 2.9, l1_loss: 0.0, conf_loss: 5.5, cls_loss: 2.8, lr: 1.189e-05, size: 640, ETA: 2:42:18\u001b[0m\n",
            "\u001b[32m2022-03-09 16:53:02\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36mapex.amp.handle\u001b[0m:\u001b[36m140\u001b[0m - \u001b[1mGradient overflow.  Skipping step, loss scaler 0 reducing loss scale to 8192.0\u001b[0m\n",
            "\u001b[32m2022-03-09 16:53:02\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m255\u001b[0m - \u001b[1mepoch: 1/300, iter: 20/29, mem: 12340Mb, iter_time: 1.084s, data_time: 0.008s, total_loss: 8.9, iou_loss: 2.8, l1_loss: 0.0, conf_loss: 4.0, cls_loss: 2.1, lr: 4.756e-05, size: 736, ETA: 2:39:27\u001b[0m\n",
            "\u001b[32m2022-03-09 16:53:08\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m323\u001b[0m - \u001b[1mSave weights to ./YOLOX_outputs/yolox_voc_s\u001b[0m\n",
            "100%|##########| 2/2 [00:02<00:00,  1.38s/it]\n",
            "\u001b[32m2022-03-09 16:53:12\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.evaluators.voc_evaluator\u001b[0m:\u001b[36m161\u001b[0m - \u001b[1mEvaluate in main process...\u001b[0m\n",
            "Writing rbc VOC results file\n",
            "Writing wbc VOC results file\n",
            "Writing platelets VOC results file\n",
            "Eval IoU : 0.50\n",
            "Reading annotation for 1/26\n",
            "Saving cached annotations to /content/YOLOX/datasets/VOCdevkit/annotations_cache/VOC2007/test/annots.pkl\n",
            "AP for rbc = 0.5884\n",
            "AP for wbc = 0.0193\n",
            "AP for platelets = 0.0000\n",
            "Mean AP = 0.2026\n",
            "~~~~~~~~\n",
            "Results:\n",
            "0.588\n",
            "0.019\n",
            "0.000\n",
            "0.203\n",
            "~~~~~~~~\n",
            "\n",
            "--------------------------------------------------------------\n",
            "Results computed with the **unofficial** Python eval code.\n",
            "Results should be very close to the official MATLAB eval code.\n",
            "Recompute with `./tools/reval.py --matlab ...` for your paper.\n",
            "-- Thanks, The Management\n",
            "--------------------------------------------------------------\n",
            "Eval IoU : 0.55\n",
            "Eval IoU : 0.60\n",
            "Eval IoU : 0.65\n",
            "Eval IoU : 0.70\n",
            "Eval IoU : 0.75\n",
            "Eval IoU : 0.80\n",
            "Eval IoU : 0.85\n",
            "Eval IoU : 0.90\n",
            "Eval IoU : 0.95\n",
            "--------------------------------------------------------------\n",
            "map_5095: 0.12034784141937915\n",
            "map_50: 0.20256841027009476\n",
            "--------------------------------------------------------------\n",
            "\u001b[32m2022-03-09 16:53:12\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m314\u001b[0m - \u001b[1m\n",
            "Average forward time: 6.74 ms, Average NMS time: 0.97 ms, Average inference time: 7.72 ms\n",
            "\u001b[0m\n",
            "\u001b[32m2022-03-09 16:53:12\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m323\u001b[0m - \u001b[1mSave weights to ./YOLOX_outputs/yolox_voc_s\u001b[0m\n",
            "\u001b[32m2022-03-09 16:53:12\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m193\u001b[0m - \u001b[1m---> start train epoch2\u001b[0m\n",
            "\u001b[32m2022-03-09 16:53:22\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m255\u001b[0m - \u001b[1mepoch: 2/300, iter: 10/29, mem: 12340Mb, iter_time: 0.964s, data_time: 0.006s, total_loss: 6.6, iou_loss: 2.5, l1_loss: 0.0, conf_loss: 2.9, cls_loss: 1.3, lr: 1.809e-04, size: 576, ETA: 2:20:59\u001b[0m\n",
            "\u001b[32m2022-03-09 16:53:30\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m255\u001b[0m - \u001b[1mepoch: 2/300, iter: 20/29, mem: 12340Mb, iter_time: 0.754s, data_time: 0.006s, total_loss: 5.2, iou_loss: 2.2, l1_loss: 0.0, conf_loss: 2.1, cls_loss: 0.9, lr: 2.855e-04, size: 448, ETA: 2:14:16\u001b[0m\n",
            "\u001b[32m2022-03-09 16:53:35\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m323\u001b[0m - \u001b[1mSave weights to ./YOLOX_outputs/yolox_voc_s\u001b[0m\n",
            "100%|##########| 2/2 [00:02<00:00,  1.31s/it]\n",
            "\u001b[32m2022-03-09 16:53:39\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.evaluators.voc_evaluator\u001b[0m:\u001b[36m161\u001b[0m - \u001b[1mEvaluate in main process...\u001b[0m\n",
            "Writing rbc VOC results file\n",
            "Writing wbc VOC results file\n",
            "Writing platelets VOC results file\n",
            "Eval IoU : 0.50\n",
            "AP for rbc = 0.5480\n",
            "AP for wbc = 0.2904\n",
            "AP for platelets = 0.4613\n",
            "Mean AP = 0.4332\n",
            "~~~~~~~~\n",
            "Results:\n",
            "0.548\n",
            "0.290\n",
            "0.461\n",
            "0.433\n",
            "~~~~~~~~\n",
            "\n",
            "--------------------------------------------------------------\n",
            "Results computed with the **unofficial** Python eval code.\n",
            "Results should be very close to the official MATLAB eval code.\n",
            "Recompute with `./tools/reval.py --matlab ...` for your paper.\n",
            "-- Thanks, The Management\n",
            "--------------------------------------------------------------\n",
            "Eval IoU : 0.55\n",
            "Eval IoU : 0.60\n",
            "Eval IoU : 0.65\n",
            "Eval IoU : 0.70\n",
            "Eval IoU : 0.75\n",
            "Eval IoU : 0.80\n",
            "Eval IoU : 0.85\n",
            "Eval IoU : 0.90\n",
            "Eval IoU : 0.95\n",
            "--------------------------------------------------------------\n",
            "map_5095: 0.267269473560889\n",
            "map_50: 0.4332372396235568\n",
            "--------------------------------------------------------------\n",
            "\u001b[32m2022-03-09 16:53:40\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m314\u001b[0m - \u001b[1m\n",
            "Average forward time: 6.75 ms, Average NMS time: 2.55 ms, Average inference time: 9.30 ms\n",
            "\u001b[0m\n",
            "\u001b[32m2022-03-09 16:53:40\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m323\u001b[0m - \u001b[1mSave weights to ./YOLOX_outputs/yolox_voc_s\u001b[0m\n",
            "\u001b[32m2022-03-09 16:53:40\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m193\u001b[0m - \u001b[1m---> start train epoch3\u001b[0m\n",
            "\u001b[32m2022-03-09 16:53:51\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m255\u001b[0m - \u001b[1mepoch: 3/300, iter: 10/29, mem: 12340Mb, iter_time: 1.067s, data_time: 0.003s, total_loss: 5.3, iou_loss: 2.1, l1_loss: 0.0, conf_loss: 2.4, cls_loss: 0.8, lr: 5.498e-04, size: 832, ETA: 2:11:39\u001b[0m\n",
            "\u001b[32m2022-03-09 16:53:59\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m255\u001b[0m - \u001b[1mepoch: 3/300, iter: 20/29, mem: 12340Mb, iter_time: 0.782s, data_time: 0.004s, total_loss: 4.7, iou_loss: 2.0, l1_loss: 0.0, conf_loss: 2.1, cls_loss: 0.7, lr: 7.234e-04, size: 640, ETA: 2:09:03\u001b[0m\n",
            "\u001b[32m2022-03-09 16:54:05\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m323\u001b[0m - \u001b[1mSave weights to ./YOLOX_outputs/yolox_voc_s\u001b[0m\n",
            "100%|##########| 2/2 [00:01<00:00,  1.54it/s]\n",
            "\u001b[32m2022-03-09 16:54:07\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.evaluators.voc_evaluator\u001b[0m:\u001b[36m161\u001b[0m - \u001b[1mEvaluate in main process...\u001b[0m\n",
            "Writing rbc VOC results file\n",
            "Writing wbc VOC results file\n",
            "Writing platelets VOC results file\n",
            "Eval IoU : 0.50\n",
            "AP for rbc = 0.7289\n",
            "AP for wbc = 0.9143\n",
            "AP for platelets = 0.8956\n",
            "Mean AP = 0.8463\n",
            "~~~~~~~~\n",
            "Results:\n",
            "0.729\n",
            "0.914\n",
            "0.896\n",
            "0.846\n",
            "~~~~~~~~\n",
            "\n",
            "--------------------------------------------------------------\n",
            "Results computed with the **unofficial** Python eval code.\n",
            "Results should be very close to the official MATLAB eval code.\n",
            "Recompute with `./tools/reval.py --matlab ...` for your paper.\n",
            "-- Thanks, The Management\n",
            "--------------------------------------------------------------\n",
            "Eval IoU : 0.55\n",
            "Eval IoU : 0.60\n",
            "Eval IoU : 0.65\n",
            "Eval IoU : 0.70\n",
            "Eval IoU : 0.75\n",
            "Eval IoU : 0.80\n",
            "Eval IoU : 0.85\n",
            "Eval IoU : 0.90\n",
            "Eval IoU : 0.95\n",
            "--------------------------------------------------------------\n",
            "map_5095: 0.5720681716493072\n",
            "map_50: 0.8462850955559643\n",
            "--------------------------------------------------------------\n",
            "\u001b[32m2022-03-09 16:54:08\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m314\u001b[0m - \u001b[1m\n",
            "Average forward time: 4.55 ms, Average NMS time: 0.86 ms, Average inference time: 5.41 ms\n",
            "\u001b[0m\n",
            "\u001b[32m2022-03-09 16:54:08\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m323\u001b[0m - \u001b[1mSave weights to ./YOLOX_outputs/yolox_voc_s\u001b[0m\n",
            "\u001b[32m2022-03-09 16:54:08\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m193\u001b[0m - \u001b[1m---> start train epoch4\u001b[0m\n",
            "\u001b[32m2022-03-09 16:54:14\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m255\u001b[0m - \u001b[1mepoch: 4/300, iter: 10/29, mem: 12340Mb, iter_time: 0.614s, data_time: 0.007s, total_loss: 4.3, iou_loss: 2.0, l1_loss: 0.0, conf_loss: 1.7, cls_loss: 0.6, lr: 1.119e-03, size: 512, ETA: 2:02:09\u001b[0m\n",
            "\u001b[32m2022-03-09 16:54:21\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m255\u001b[0m - \u001b[1mepoch: 4/300, iter: 20/29, mem: 12340Mb, iter_time: 0.664s, data_time: 0.003s, total_loss: 4.0, iou_loss: 1.9, l1_loss: 0.0, conf_loss: 1.5, cls_loss: 0.6, lr: 1.361e-03, size: 800, ETA: 1:59:30\u001b[0m\n",
            "\u001b[32m2022-03-09 16:54:31\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m323\u001b[0m - \u001b[1mSave weights to ./YOLOX_outputs/yolox_voc_s\u001b[0m\n",
            "100%|##########| 2/2 [00:01<00:00,  1.39it/s]\n",
            "\u001b[32m2022-03-09 16:54:33\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.evaluators.voc_evaluator\u001b[0m:\u001b[36m161\u001b[0m - \u001b[1mEvaluate in main process...\u001b[0m\n",
            "Writing rbc VOC results file\n",
            "Writing wbc VOC results file\n",
            "Writing platelets VOC results file\n",
            "Eval IoU : 0.50\n",
            "AP for rbc = 0.6603\n",
            "AP for wbc = 0.8125\n",
            "AP for platelets = 0.8720\n",
            "Mean AP = 0.7816\n",
            "~~~~~~~~\n",
            "Results:\n",
            "0.660\n",
            "0.812\n",
            "0.872\n",
            "0.782\n",
            "~~~~~~~~\n",
            "\n",
            "--------------------------------------------------------------\n",
            "Results computed with the **unofficial** Python eval code.\n",
            "Results should be very close to the official MATLAB eval code.\n",
            "Recompute with `./tools/reval.py --matlab ...` for your paper.\n",
            "-- Thanks, The Management\n",
            "--------------------------------------------------------------\n",
            "Eval IoU : 0.55\n",
            "Eval IoU : 0.60\n",
            "Eval IoU : 0.65\n",
            "Eval IoU : 0.70\n",
            "Eval IoU : 0.75\n",
            "Eval IoU : 0.80\n",
            "Eval IoU : 0.85\n",
            "Eval IoU : 0.90\n",
            "Eval IoU : 0.95\n",
            "--------------------------------------------------------------\n",
            "map_5095: 0.4073875124100749\n",
            "map_50: 0.7815657526341746\n",
            "--------------------------------------------------------------\n",
            "\u001b[32m2022-03-09 16:54:34\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m314\u001b[0m - \u001b[1m\n",
            "Average forward time: 4.59 ms, Average NMS time: 0.99 ms, Average inference time: 5.58 ms\n",
            "\u001b[0m\n",
            "\u001b[32m2022-03-09 16:54:34\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m323\u001b[0m - \u001b[1mSave weights to ./YOLOX_outputs/yolox_voc_s\u001b[0m\n",
            "\u001b[32m2022-03-09 16:54:34\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m193\u001b[0m - \u001b[1m---> start train epoch5\u001b[0m\n",
            "\u001b[32m2022-03-09 16:54:41\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m255\u001b[0m - \u001b[1mepoch: 5/300, iter: 10/29, mem: 12340Mb, iter_time: 0.704s, data_time: 0.006s, total_loss: 4.2, iou_loss: 1.9, l1_loss: 0.0, conf_loss: 1.7, cls_loss: 0.6, lr: 1.888e-03, size: 800, ETA: 2:00:41\u001b[0m\n",
            "\u001b[32m2022-03-09 16:54:49\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m255\u001b[0m - \u001b[1mepoch: 5/300, iter: 20/29, mem: 12340Mb, iter_time: 0.836s, data_time: 0.004s, total_loss: 4.1, iou_loss: 1.8, l1_loss: 0.0, conf_loss: 1.7, cls_loss: 0.6, lr: 2.199e-03, size: 800, ETA: 2:00:27\u001b[0m\n",
            "\u001b[32m2022-03-09 16:54:56\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m323\u001b[0m - \u001b[1mSave weights to ./YOLOX_outputs/yolox_voc_s\u001b[0m\n",
            "100%|##########| 2/2 [00:02<00:00,  1.26s/it]\n",
            "\u001b[32m2022-03-09 16:54:59\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.evaluators.voc_evaluator\u001b[0m:\u001b[36m161\u001b[0m - \u001b[1mEvaluate in main process...\u001b[0m\n",
            "Writing rbc VOC results file\n",
            "Writing wbc VOC results file\n",
            "Writing platelets VOC results file\n",
            "Eval IoU : 0.50\n",
            "AP for rbc = 0.7630\n",
            "AP for wbc = 0.9323\n",
            "AP for platelets = 0.9053\n",
            "Mean AP = 0.8669\n",
            "~~~~~~~~\n",
            "Results:\n",
            "0.763\n",
            "0.932\n",
            "0.905\n",
            "0.867\n",
            "~~~~~~~~\n",
            "\n",
            "--------------------------------------------------------------\n",
            "Results computed with the **unofficial** Python eval code.\n",
            "Results should be very close to the official MATLAB eval code.\n",
            "Recompute with `./tools/reval.py --matlab ...` for your paper.\n",
            "-- Thanks, The Management\n",
            "--------------------------------------------------------------\n",
            "Eval IoU : 0.55\n",
            "Eval IoU : 0.60\n",
            "Eval IoU : 0.65\n",
            "Eval IoU : 0.70\n",
            "Eval IoU : 0.75\n",
            "Eval IoU : 0.80\n",
            "Eval IoU : 0.85\n",
            "Eval IoU : 0.90\n",
            "Eval IoU : 0.95\n",
            "--------------------------------------------------------------\n",
            "map_5095: 0.5655925956652391\n",
            "map_50: 0.8668904147251442\n",
            "--------------------------------------------------------------\n",
            "\u001b[32m2022-03-09 16:55:02\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m314\u001b[0m - \u001b[1m\n",
            "Average forward time: 7.35 ms, Average NMS time: 3.44 ms, Average inference time: 10.79 ms\n",
            "\u001b[0m\n",
            "\u001b[32m2022-03-09 16:55:02\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m323\u001b[0m - \u001b[1mSave weights to ./YOLOX_outputs/yolox_voc_s\u001b[0m\n",
            "\u001b[32m2022-03-09 16:55:02\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m193\u001b[0m - \u001b[1m---> start train epoch6\u001b[0m\n",
            "\u001b[32m2022-03-09 16:55:09\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m255\u001b[0m - \u001b[1mepoch: 6/300, iter: 10/29, mem: 12340Mb, iter_time: 0.747s, data_time: 0.007s, total_loss: 4.1, iou_loss: 1.8, l1_loss: 0.0, conf_loss: 1.7, cls_loss: 0.6, lr: 2.500e-03, size: 640, ETA: 1:58:43\u001b[0m\n",
            "\u001b[32m2022-03-09 16:55:16\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m255\u001b[0m - \u001b[1mepoch: 6/300, iter: 20/29, mem: 12340Mb, iter_time: 0.652s, data_time: 0.005s, total_loss: 3.9, iou_loss: 1.9, l1_loss: 0.0, conf_loss: 1.5, cls_loss: 0.6, lr: 2.500e-03, size: 704, ETA: 1:57:01\u001b[0m\n",
            "\u001b[32m2022-03-09 16:55:25\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m323\u001b[0m - \u001b[1mSave weights to ./YOLOX_outputs/yolox_voc_s\u001b[0m\n",
            "100%|##########| 2/2 [00:01<00:00,  1.64it/s]\n",
            "\u001b[32m2022-03-09 16:55:26\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.evaluators.voc_evaluator\u001b[0m:\u001b[36m161\u001b[0m - \u001b[1mEvaluate in main process...\u001b[0m\n",
            "Writing rbc VOC results file\n",
            "Writing wbc VOC results file\n",
            "Writing platelets VOC results file\n",
            "Eval IoU : 0.50\n",
            "AP for rbc = 0.7812\n",
            "AP for wbc = 1.0000\n",
            "AP for platelets = 0.9476\n",
            "Mean AP = 0.9096\n",
            "~~~~~~~~\n",
            "Results:\n",
            "0.781\n",
            "1.000\n",
            "0.948\n",
            "0.910\n",
            "~~~~~~~~\n",
            "\n",
            "--------------------------------------------------------------\n",
            "Results computed with the **unofficial** Python eval code.\n",
            "Results should be very close to the official MATLAB eval code.\n",
            "Recompute with `./tools/reval.py --matlab ...` for your paper.\n",
            "-- Thanks, The Management\n",
            "--------------------------------------------------------------\n",
            "Eval IoU : 0.55\n",
            "Eval IoU : 0.60\n",
            "Eval IoU : 0.65\n",
            "Eval IoU : 0.70\n",
            "Eval IoU : 0.75\n",
            "Eval IoU : 0.80\n",
            "Eval IoU : 0.85\n",
            "Eval IoU : 0.90\n",
            "Eval IoU : 0.95\n",
            "--------------------------------------------------------------\n",
            "map_5095: 0.6219179670835218\n",
            "map_50: 0.9095862798575235\n",
            "--------------------------------------------------------------\n",
            "\u001b[32m2022-03-09 16:55:27\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m314\u001b[0m - \u001b[1m\n",
            "Average forward time: 4.67 ms, Average NMS time: 0.94 ms, Average inference time: 5.61 ms\n",
            "\u001b[0m\n",
            "\u001b[32m2022-03-09 16:55:27\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m323\u001b[0m - \u001b[1mSave weights to ./YOLOX_outputs/yolox_voc_s\u001b[0m\n",
            "\u001b[32m2022-03-09 16:55:27\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m193\u001b[0m - \u001b[1m---> start train epoch7\u001b[0m\n",
            "\u001b[32m2022-03-09 16:55:36\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m255\u001b[0m - \u001b[1mepoch: 7/300, iter: 10/29, mem: 12340Mb, iter_time: 0.854s, data_time: 0.004s, total_loss: 3.8, iou_loss: 1.8, l1_loss: 0.0, conf_loss: 1.4, cls_loss: 0.5, lr: 2.500e-03, size: 704, ETA: 1:58:21\u001b[0m\n",
            "\u001b[32m2022-03-09 16:55:43\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m255\u001b[0m - \u001b[1mepoch: 7/300, iter: 20/29, mem: 12340Mb, iter_time: 0.676s, data_time: 0.004s, total_loss: 3.9, iou_loss: 1.9, l1_loss: 0.0, conf_loss: 1.5, cls_loss: 0.6, lr: 2.500e-03, size: 736, ETA: 1:57:04\u001b[0m\n",
            "\u001b[32m2022-03-09 16:55:49\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m323\u001b[0m - \u001b[1mSave weights to ./YOLOX_outputs/yolox_voc_s\u001b[0m\n",
            "100%|##########| 2/2 [00:01<00:00,  1.00it/s]\n",
            "\u001b[32m2022-03-09 16:55:52\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.evaluators.voc_evaluator\u001b[0m:\u001b[36m161\u001b[0m - \u001b[1mEvaluate in main process...\u001b[0m\n",
            "Writing rbc VOC results file\n",
            "Writing wbc VOC results file\n",
            "Writing platelets VOC results file\n",
            "Eval IoU : 0.50\n",
            "AP for rbc = 0.7874\n",
            "AP for wbc = 0.9899\n",
            "AP for platelets = 0.9133\n",
            "Mean AP = 0.8968\n",
            "~~~~~~~~\n",
            "Results:\n",
            "0.787\n",
            "0.990\n",
            "0.913\n",
            "0.897\n",
            "~~~~~~~~\n",
            "\n",
            "--------------------------------------------------------------\n",
            "Results computed with the **unofficial** Python eval code.\n",
            "Results should be very close to the official MATLAB eval code.\n",
            "Recompute with `./tools/reval.py --matlab ...` for your paper.\n",
            "-- Thanks, The Management\n",
            "--------------------------------------------------------------\n",
            "Eval IoU : 0.55\n",
            "Eval IoU : 0.60\n",
            "Eval IoU : 0.65\n",
            "Eval IoU : 0.70\n",
            "Eval IoU : 0.75\n",
            "Eval IoU : 0.80\n",
            "Eval IoU : 0.85\n",
            "Eval IoU : 0.90\n",
            "Eval IoU : 0.95\n",
            "--------------------------------------------------------------\n",
            "map_5095: 0.5791012918247224\n",
            "map_50: 0.8968322571042986\n",
            "--------------------------------------------------------------\n",
            "\u001b[32m2022-03-09 16:55:53\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m314\u001b[0m - \u001b[1m\n",
            "Average forward time: 6.80 ms, Average NMS time: 1.19 ms, Average inference time: 8.00 ms\n",
            "\u001b[0m\n",
            "\u001b[32m2022-03-09 16:55:53\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m323\u001b[0m - \u001b[1mSave weights to ./YOLOX_outputs/yolox_voc_s\u001b[0m\n",
            "\u001b[32m2022-03-09 16:55:53\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m193\u001b[0m - \u001b[1m---> start train epoch8\u001b[0m\n",
            "\u001b[32m2022-03-09 16:56:01\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m255\u001b[0m - \u001b[1mepoch: 8/300, iter: 10/29, mem: 12340Mb, iter_time: 0.807s, data_time: 0.004s, total_loss: 3.7, iou_loss: 1.9, l1_loss: 0.0, conf_loss: 1.3, cls_loss: 0.6, lr: 2.500e-03, size: 704, ETA: 1:56:02\u001b[0m\n",
            "\u001b[32m2022-03-09 16:56:08\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m255\u001b[0m - \u001b[1mepoch: 8/300, iter: 20/29, mem: 12340Mb, iter_time: 0.692s, data_time: 0.006s, total_loss: 3.7, iou_loss: 1.7, l1_loss: 0.0, conf_loss: 1.4, cls_loss: 0.5, lr: 2.499e-03, size: 800, ETA: 1:55:05\u001b[0m\n",
            "\u001b[32m2022-03-09 16:56:15\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m323\u001b[0m - \u001b[1mSave weights to ./YOLOX_outputs/yolox_voc_s\u001b[0m\n",
            "100%|##########| 2/2 [00:02<00:00,  1.10s/it]\n",
            "\u001b[32m2022-03-09 16:56:18\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.evaluators.voc_evaluator\u001b[0m:\u001b[36m161\u001b[0m - \u001b[1mEvaluate in main process...\u001b[0m\n",
            "Writing rbc VOC results file\n",
            "Writing wbc VOC results file\n",
            "Writing platelets VOC results file\n",
            "Eval IoU : 0.50\n",
            "AP for rbc = 0.7981\n",
            "AP for wbc = 0.9865\n",
            "AP for platelets = 0.9519\n",
            "Mean AP = 0.9122\n",
            "~~~~~~~~\n",
            "Results:\n",
            "0.798\n",
            "0.987\n",
            "0.952\n",
            "0.912\n",
            "~~~~~~~~\n",
            "\n",
            "--------------------------------------------------------------\n",
            "Results computed with the **unofficial** Python eval code.\n",
            "Results should be very close to the official MATLAB eval code.\n",
            "Recompute with `./tools/reval.py --matlab ...` for your paper.\n",
            "-- Thanks, The Management\n",
            "--------------------------------------------------------------\n",
            "Eval IoU : 0.55\n",
            "Eval IoU : 0.60\n",
            "Eval IoU : 0.65\n",
            "Eval IoU : 0.70\n",
            "Eval IoU : 0.75\n",
            "Eval IoU : 0.80\n",
            "Eval IoU : 0.85\n",
            "Eval IoU : 0.90\n",
            "Eval IoU : 0.95\n",
            "--------------------------------------------------------------\n",
            "map_5095: 0.6207650617169672\n",
            "map_50: 0.9121505580027419\n",
            "--------------------------------------------------------------\n",
            "\u001b[32m2022-03-09 16:56:19\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m314\u001b[0m - \u001b[1m\n",
            "Average forward time: 6.74 ms, Average NMS time: 1.20 ms, Average inference time: 7.94 ms\n",
            "\u001b[0m\n",
            "\u001b[32m2022-03-09 16:56:19\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m323\u001b[0m - \u001b[1mSave weights to ./YOLOX_outputs/yolox_voc_s\u001b[0m\n",
            "\u001b[32m2022-03-09 16:56:19\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m193\u001b[0m - \u001b[1m---> start train epoch9\u001b[0m\n",
            "\u001b[32m2022-03-09 16:56:27\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m255\u001b[0m - \u001b[1mepoch: 9/300, iter: 10/29, mem: 12340Mb, iter_time: 0.771s, data_time: 0.006s, total_loss: 3.5, iou_loss: 1.6, l1_loss: 0.0, conf_loss: 1.4, cls_loss: 0.5, lr: 2.499e-03, size: 448, ETA: 1:54:29\u001b[0m\n",
            "\u001b[32m2022-03-09 16:56:34\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m255\u001b[0m - \u001b[1mepoch: 9/300, iter: 20/29, mem: 12340Mb, iter_time: 0.652s, data_time: 0.004s, total_loss: 4.1, iou_loss: 1.9, l1_loss: 0.0, conf_loss: 1.7, cls_loss: 0.6, lr: 2.499e-03, size: 640, ETA: 1:53:27\u001b[0m\n",
            "\u001b[32m2022-03-09 16:56:39\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m323\u001b[0m - \u001b[1mSave weights to ./YOLOX_outputs/yolox_voc_s\u001b[0m\n",
            "100%|##########| 2/2 [00:01<00:00,  1.26it/s]\n",
            "\u001b[32m2022-03-09 16:56:41\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.evaluators.voc_evaluator\u001b[0m:\u001b[36m161\u001b[0m - \u001b[1mEvaluate in main process...\u001b[0m\n",
            "Writing rbc VOC results file\n",
            "Writing wbc VOC results file\n",
            "Writing platelets VOC results file\n",
            "Eval IoU : 0.50\n",
            "AP for rbc = 0.7607\n",
            "AP for wbc = 0.9056\n",
            "AP for platelets = 0.4435\n",
            "Mean AP = 0.7033\n",
            "~~~~~~~~\n",
            "Results:\n",
            "0.761\n",
            "0.906\n",
            "0.444\n",
            "0.703\n",
            "~~~~~~~~\n",
            "\n",
            "--------------------------------------------------------------\n",
            "Results computed with the **unofficial** Python eval code.\n",
            "Results should be very close to the official MATLAB eval code.\n",
            "Recompute with `./tools/reval.py --matlab ...` for your paper.\n",
            "-- Thanks, The Management\n",
            "--------------------------------------------------------------\n",
            "Eval IoU : 0.55\n",
            "Eval IoU : 0.60\n",
            "Eval IoU : 0.65\n",
            "Eval IoU : 0.70\n",
            "Eval IoU : 0.75\n",
            "Eval IoU : 0.80\n",
            "Eval IoU : 0.85\n",
            "Eval IoU : 0.90\n",
            "Eval IoU : 0.95\n",
            "--------------------------------------------------------------\n",
            "map_5095: 0.47929893603803686\n",
            "map_50: 0.7032917213311621\n",
            "--------------------------------------------------------------\n",
            "\u001b[32m2022-03-09 16:56:43\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m314\u001b[0m - \u001b[1m\n",
            "Average forward time: 4.66 ms, Average NMS time: 1.10 ms, Average inference time: 5.76 ms\n",
            "\u001b[0m\n",
            "\u001b[32m2022-03-09 16:56:43\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m323\u001b[0m - \u001b[1mSave weights to ./YOLOX_outputs/yolox_voc_s\u001b[0m\n",
            "\u001b[32m2022-03-09 16:56:43\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m193\u001b[0m - \u001b[1m---> start train epoch10\u001b[0m\n",
            "\u001b[32m2022-03-09 16:56:49\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m255\u001b[0m - \u001b[1mepoch: 10/300, iter: 10/29, mem: 12340Mb, iter_time: 0.600s, data_time: 0.004s, total_loss: 3.6, iou_loss: 1.7, l1_loss: 0.0, conf_loss: 1.3, cls_loss: 0.5, lr: 2.499e-03, size: 768, ETA: 1:51:05\u001b[0m\n",
            "\u001b[32m2022-03-09 16:56:55\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m255\u001b[0m - \u001b[1mepoch: 10/300, iter: 20/29, mem: 12340Mb, iter_time: 0.666s, data_time: 0.003s, total_loss: 4.3, iou_loss: 1.9, l1_loss: 0.0, conf_loss: 1.9, cls_loss: 0.5, lr: 2.498e-03, size: 480, ETA: 1:50:20\u001b[0m\n",
            "\u001b[32m2022-03-09 16:57:02\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m323\u001b[0m - \u001b[1mSave weights to ./YOLOX_outputs/yolox_voc_s\u001b[0m\n",
            "100%|##########| 2/2 [00:01<00:00,  1.27it/s]\n",
            "\u001b[32m2022-03-09 16:57:04\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.evaluators.voc_evaluator\u001b[0m:\u001b[36m161\u001b[0m - \u001b[1mEvaluate in main process...\u001b[0m\n",
            "Writing rbc VOC results file\n",
            "Writing wbc VOC results file\n",
            "Writing platelets VOC results file\n",
            "Eval IoU : 0.50\n",
            "AP for rbc = 0.7556\n",
            "AP for wbc = 0.9966\n",
            "AP for platelets = 0.9441\n",
            "Mean AP = 0.8988\n",
            "~~~~~~~~\n",
            "Results:\n",
            "0.756\n",
            "0.997\n",
            "0.944\n",
            "0.899\n",
            "~~~~~~~~\n",
            "\n",
            "--------------------------------------------------------------\n",
            "Results computed with the **unofficial** Python eval code.\n",
            "Results should be very close to the official MATLAB eval code.\n",
            "Recompute with `./tools/reval.py --matlab ...` for your paper.\n",
            "-- Thanks, The Management\n",
            "--------------------------------------------------------------\n",
            "Eval IoU : 0.55\n",
            "Eval IoU : 0.60\n",
            "Eval IoU : 0.65\n",
            "Eval IoU : 0.70\n",
            "Eval IoU : 0.75\n",
            "Eval IoU : 0.80\n",
            "Eval IoU : 0.85\n",
            "Eval IoU : 0.90\n",
            "Eval IoU : 0.95\n",
            "--------------------------------------------------------------\n",
            "map_5095: 0.5549078135996994\n",
            "map_50: 0.8987550131569663\n",
            "--------------------------------------------------------------\n",
            "\u001b[32m2022-03-09 16:57:05\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m314\u001b[0m - \u001b[1m\n",
            "Average forward time: 5.31 ms, Average NMS time: 0.91 ms, Average inference time: 6.21 ms\n",
            "\u001b[0m\n",
            "\u001b[32m2022-03-09 16:57:05\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m323\u001b[0m - \u001b[1mSave weights to ./YOLOX_outputs/yolox_voc_s\u001b[0m\n",
            "\u001b[32m2022-03-09 16:57:05\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m193\u001b[0m - \u001b[1m---> start train epoch11\u001b[0m\n",
            "\u001b[32m2022-03-09 16:57:10\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m255\u001b[0m - \u001b[1mepoch: 11/300, iter: 10/29, mem: 12340Mb, iter_time: 0.542s, data_time: 0.002s, total_loss: 6.6, iou_loss: 2.1, l1_loss: 0.0, conf_loss: 3.9, cls_loss: 0.6, lr: 2.498e-03, size: 832, ETA: 1:48:49\u001b[0m\n",
            "\u001b[32m2022-03-09 16:57:19\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m255\u001b[0m - \u001b[1mepoch: 11/300, iter: 20/29, mem: 12340Mb, iter_time: 0.883s, data_time: 0.059s, total_loss: 5.2, iou_loss: 2.2, l1_loss: 0.0, conf_loss: 2.3, cls_loss: 0.6, lr: 2.498e-03, size: 448, ETA: 1:49:10\u001b[0m\n",
            "\u001b[32m2022-03-09 16:57:24\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m323\u001b[0m - \u001b[1mSave weights to ./YOLOX_outputs/yolox_voc_s\u001b[0m\n",
            "100%|##########| 2/2 [00:01<00:00,  1.29it/s]\n",
            "\u001b[32m2022-03-09 16:57:26\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.evaluators.voc_evaluator\u001b[0m:\u001b[36m161\u001b[0m - \u001b[1mEvaluate in main process...\u001b[0m\n",
            "Writing rbc VOC results file\n",
            "Writing wbc VOC results file\n",
            "Writing platelets VOC results file\n",
            "Eval IoU : 0.50\n",
            "AP for rbc = 0.7314\n",
            "AP for wbc = 0.7846\n",
            "AP for platelets = 0.9121\n",
            "Mean AP = 0.8094\n",
            "~~~~~~~~\n",
            "Results:\n",
            "0.731\n",
            "0.785\n",
            "0.912\n",
            "0.809\n",
            "~~~~~~~~\n",
            "\n",
            "--------------------------------------------------------------\n",
            "Results computed with the **unofficial** Python eval code.\n",
            "Results should be very close to the official MATLAB eval code.\n",
            "Recompute with `./tools/reval.py --matlab ...` for your paper.\n",
            "-- Thanks, The Management\n",
            "--------------------------------------------------------------\n",
            "Eval IoU : 0.55\n",
            "Eval IoU : 0.60\n",
            "Eval IoU : 0.65\n",
            "Eval IoU : 0.70\n",
            "Eval IoU : 0.75\n",
            "Eval IoU : 0.80\n",
            "Eval IoU : 0.85\n",
            "Eval IoU : 0.90\n",
            "Eval IoU : 0.95\n",
            "--------------------------------------------------------------\n",
            "map_5095: 0.5363077457271812\n",
            "map_50: 0.8093711127913767\n",
            "--------------------------------------------------------------\n",
            "\u001b[32m2022-03-09 16:57:30\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m314\u001b[0m - \u001b[1m\n",
            "Average forward time: 6.73 ms, Average NMS time: 1.40 ms, Average inference time: 8.13 ms\n",
            "\u001b[0m\n",
            "\u001b[32m2022-03-09 16:57:30\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m323\u001b[0m - \u001b[1mSave weights to ./YOLOX_outputs/yolox_voc_s\u001b[0m\n",
            "\u001b[32m2022-03-09 16:57:30\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m193\u001b[0m - \u001b[1m---> start train epoch12\u001b[0m\n",
            "\u001b[32m2022-03-09 16:57:36\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m255\u001b[0m - \u001b[1mepoch: 12/300, iter: 10/29, mem: 12340Mb, iter_time: 0.564s, data_time: 0.004s, total_loss: 4.1, iou_loss: 1.8, l1_loss: 0.0, conf_loss: 1.7, cls_loss: 0.6, lr: 2.497e-03, size: 768, ETA: 1:47:08\u001b[0m\n",
            "\u001b[32m2022-03-09 16:57:43\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m255\u001b[0m - \u001b[1mepoch: 12/300, iter: 20/29, mem: 12340Mb, iter_time: 0.751s, data_time: 0.003s, total_loss: 3.8, iou_loss: 1.8, l1_loss: 0.0, conf_loss: 1.4, cls_loss: 0.5, lr: 2.497e-03, size: 672, ETA: 1:46:56\u001b[0m\n",
            "\u001b[32m2022-03-09 16:57:53\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m323\u001b[0m - \u001b[1mSave weights to ./YOLOX_outputs/yolox_voc_s\u001b[0m\n",
            "100%|##########| 2/2 [00:01<00:00,  1.04it/s]\n",
            "\u001b[32m2022-03-09 16:57:55\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.evaluators.voc_evaluator\u001b[0m:\u001b[36m161\u001b[0m - \u001b[1mEvaluate in main process...\u001b[0m\n",
            "Writing rbc VOC results file\n",
            "Writing wbc VOC results file\n",
            "Writing platelets VOC results file\n",
            "Eval IoU : 0.50\n",
            "AP for rbc = 0.8078\n",
            "AP for wbc = 0.9899\n",
            "AP for platelets = 0.9787\n",
            "Mean AP = 0.9255\n",
            "~~~~~~~~\n",
            "Results:\n",
            "0.808\n",
            "0.990\n",
            "0.979\n",
            "0.925\n",
            "~~~~~~~~\n",
            "\n",
            "--------------------------------------------------------------\n",
            "Results computed with the **unofficial** Python eval code.\n",
            "Results should be very close to the official MATLAB eval code.\n",
            "Recompute with `./tools/reval.py --matlab ...` for your paper.\n",
            "-- Thanks, The Management\n",
            "--------------------------------------------------------------\n",
            "Eval IoU : 0.55\n",
            "Eval IoU : 0.60\n",
            "Eval IoU : 0.65\n",
            "Eval IoU : 0.70\n",
            "Eval IoU : 0.75\n",
            "Eval IoU : 0.80\n",
            "Eval IoU : 0.85\n",
            "Eval IoU : 0.90\n",
            "Eval IoU : 0.95\n",
            "--------------------------------------------------------------\n",
            "map_5095: 0.6266895818216867\n",
            "map_50: 0.9254774958352394\n",
            "--------------------------------------------------------------\n",
            "\u001b[32m2022-03-09 16:57:56\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m314\u001b[0m - \u001b[1m\n",
            "Average forward time: 6.77 ms, Average NMS time: 1.39 ms, Average inference time: 8.15 ms\n",
            "\u001b[0m\n",
            "\u001b[32m2022-03-09 16:57:56\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m323\u001b[0m - \u001b[1mSave weights to ./YOLOX_outputs/yolox_voc_s\u001b[0m\n",
            "\u001b[32m2022-03-09 16:57:56\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m193\u001b[0m - \u001b[1m---> start train epoch13\u001b[0m\n",
            "\u001b[32m2022-03-09 16:58:04\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m255\u001b[0m - \u001b[1mepoch: 13/300, iter: 10/29, mem: 12340Mb, iter_time: 0.794s, data_time: 0.007s, total_loss: 3.9, iou_loss: 1.7, l1_loss: 0.0, conf_loss: 1.6, cls_loss: 0.5, lr: 2.496e-03, size: 768, ETA: 1:47:38\u001b[0m\n",
            "\u001b[32m2022-03-09 16:58:12\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m255\u001b[0m - \u001b[1mepoch: 13/300, iter: 20/29, mem: 12340Mb, iter_time: 0.760s, data_time: 0.010s, total_loss: 3.6, iou_loss: 1.7, l1_loss: 0.0, conf_loss: 1.4, cls_loss: 0.5, lr: 2.496e-03, size: 576, ETA: 1:47:27\u001b[0m\n",
            "\u001b[32m2022-03-09 16:58:17\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m323\u001b[0m - \u001b[1mSave weights to ./YOLOX_outputs/yolox_voc_s\u001b[0m\n",
            "100%|##########| 2/2 [00:01<00:00,  1.57it/s]\n",
            "\u001b[32m2022-03-09 16:58:19\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.evaluators.voc_evaluator\u001b[0m:\u001b[36m161\u001b[0m - \u001b[1mEvaluate in main process...\u001b[0m\n",
            "Writing rbc VOC results file\n",
            "Writing wbc VOC results file\n",
            "Writing platelets VOC results file\n",
            "Eval IoU : 0.50\n",
            "AP for rbc = 0.8116\n",
            "AP for wbc = 0.9899\n",
            "AP for platelets = 0.8835\n",
            "Mean AP = 0.8950\n",
            "~~~~~~~~\n",
            "Results:\n",
            "0.812\n",
            "0.990\n",
            "0.883\n",
            "0.895\n",
            "~~~~~~~~\n",
            "\n",
            "--------------------------------------------------------------\n",
            "Results computed with the **unofficial** Python eval code.\n",
            "Results should be very close to the official MATLAB eval code.\n",
            "Recompute with `./tools/reval.py --matlab ...` for your paper.\n",
            "-- Thanks, The Management\n",
            "--------------------------------------------------------------\n",
            "Eval IoU : 0.55\n",
            "Eval IoU : 0.60\n",
            "Eval IoU : 0.65\n",
            "Eval IoU : 0.70\n",
            "Eval IoU : 0.75\n",
            "Eval IoU : 0.80\n",
            "Eval IoU : 0.85\n",
            "Eval IoU : 0.90\n",
            "Eval IoU : 0.95\n",
            "--------------------------------------------------------------\n",
            "map_5095: 0.6105355732588\n",
            "map_50: 0.8949874748576239\n",
            "--------------------------------------------------------------\n",
            "\u001b[32m2022-03-09 16:58:20\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m314\u001b[0m - \u001b[1m\n",
            "Average forward time: 4.67 ms, Average NMS time: 1.04 ms, Average inference time: 5.71 ms\n",
            "\u001b[0m\n",
            "\u001b[32m2022-03-09 16:58:20\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m323\u001b[0m - \u001b[1mSave weights to ./YOLOX_outputs/yolox_voc_s\u001b[0m\n",
            "\u001b[32m2022-03-09 16:58:20\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m193\u001b[0m - \u001b[1m---> start train epoch14\u001b[0m\n",
            "\u001b[32m2022-03-09 16:58:25\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m255\u001b[0m - \u001b[1mepoch: 14/300, iter: 10/29, mem: 12340Mb, iter_time: 0.508s, data_time: 0.004s, total_loss: 3.5, iou_loss: 1.7, l1_loss: 0.0, conf_loss: 1.3, cls_loss: 0.5, lr: 2.495e-03, size: 448, ETA: 1:45:41\u001b[0m\n",
            "\u001b[32m2022-03-09 16:58:30\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m255\u001b[0m - \u001b[1mepoch: 14/300, iter: 20/29, mem: 12340Mb, iter_time: 0.540s, data_time: 0.006s, total_loss: 3.6, iou_loss: 1.7, l1_loss: 0.0, conf_loss: 1.3, cls_loss: 0.5, lr: 2.494e-03, size: 480, ETA: 1:44:46\u001b[0m\n",
            "\u001b[32m2022-03-09 16:58:36\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m323\u001b[0m - \u001b[1mSave weights to ./YOLOX_outputs/yolox_voc_s\u001b[0m\n",
            "100%|##########| 2/2 [00:01<00:00,  1.43it/s]\n",
            "\u001b[32m2022-03-09 16:58:37\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.evaluators.voc_evaluator\u001b[0m:\u001b[36m161\u001b[0m - \u001b[1mEvaluate in main process...\u001b[0m\n",
            "Writing rbc VOC results file\n",
            "Writing wbc VOC results file\n",
            "Writing platelets VOC results file\n",
            "Eval IoU : 0.50\n",
            "AP for rbc = 0.7837\n",
            "AP for wbc = 0.9865\n",
            "AP for platelets = 0.9435\n",
            "Mean AP = 0.9046\n",
            "~~~~~~~~\n",
            "Results:\n",
            "0.784\n",
            "0.987\n",
            "0.943\n",
            "0.905\n",
            "~~~~~~~~\n",
            "\n",
            "--------------------------------------------------------------\n",
            "Results computed with the **unofficial** Python eval code.\n",
            "Results should be very close to the official MATLAB eval code.\n",
            "Recompute with `./tools/reval.py --matlab ...` for your paper.\n",
            "-- Thanks, The Management\n",
            "--------------------------------------------------------------\n",
            "Eval IoU : 0.55\n",
            "Eval IoU : 0.60\n",
            "Eval IoU : 0.65\n",
            "Eval IoU : 0.70\n",
            "Eval IoU : 0.75\n",
            "Eval IoU : 0.80\n",
            "Eval IoU : 0.85\n",
            "Eval IoU : 0.90\n",
            "Eval IoU : 0.95\n",
            "--------------------------------------------------------------\n",
            "map_5095: 0.6009876847159904\n",
            "map_50: 0.904573434989159\n",
            "--------------------------------------------------------------\n",
            "\u001b[32m2022-03-09 16:58:38\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m314\u001b[0m - \u001b[1m\n",
            "Average forward time: 4.69 ms, Average NMS time: 1.44 ms, Average inference time: 6.13 ms\n",
            "\u001b[0m\n",
            "\u001b[32m2022-03-09 16:58:38\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m323\u001b[0m - \u001b[1mSave weights to ./YOLOX_outputs/yolox_voc_s\u001b[0m\n",
            "\u001b[32m2022-03-09 16:58:38\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m193\u001b[0m - \u001b[1m---> start train epoch15\u001b[0m\n",
            "\u001b[32m2022-03-09 16:58:44\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m255\u001b[0m - \u001b[1mepoch: 15/300, iter: 10/29, mem: 12340Mb, iter_time: 0.500s, data_time: 0.004s, total_loss: 3.3, iou_loss: 1.6, l1_loss: 0.0, conf_loss: 1.2, cls_loss: 0.5, lr: 2.493e-03, size: 544, ETA: 1:43:10\u001b[0m\n",
            "\u001b[32m2022-03-09 16:58:50\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m255\u001b[0m - \u001b[1mepoch: 15/300, iter: 20/29, mem: 12340Mb, iter_time: 0.606s, data_time: 0.005s, total_loss: 3.6, iou_loss: 1.8, l1_loss: 0.0, conf_loss: 1.3, cls_loss: 0.5, lr: 2.493e-03, size: 480, ETA: 1:42:35\u001b[0m\n",
            "\u001b[32m2022-03-09 16:58:55\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m323\u001b[0m - \u001b[1mSave weights to ./YOLOX_outputs/yolox_voc_s\u001b[0m\n",
            "100%|##########| 2/2 [00:01<00:00,  1.33it/s]\n",
            "\u001b[32m2022-03-09 16:58:57\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.evaluators.voc_evaluator\u001b[0m:\u001b[36m161\u001b[0m - \u001b[1mEvaluate in main process...\u001b[0m\n",
            "Writing rbc VOC results file\n",
            "Writing wbc VOC results file\n",
            "Writing platelets VOC results file\n",
            "Eval IoU : 0.50\n",
            "AP for rbc = 0.7924\n",
            "AP for wbc = 0.9865\n",
            "AP for platelets = 0.9625\n",
            "Mean AP = 0.9138\n",
            "~~~~~~~~\n",
            "Results:\n",
            "0.792\n",
            "0.987\n",
            "0.962\n",
            "0.914\n",
            "~~~~~~~~\n",
            "\n",
            "--------------------------------------------------------------\n",
            "Results computed with the **unofficial** Python eval code.\n",
            "Results should be very close to the official MATLAB eval code.\n",
            "Recompute with `./tools/reval.py --matlab ...` for your paper.\n",
            "-- Thanks, The Management\n",
            "--------------------------------------------------------------\n",
            "Eval IoU : 0.55\n",
            "Eval IoU : 0.60\n",
            "Eval IoU : 0.65\n",
            "Eval IoU : 0.70\n",
            "Eval IoU : 0.75\n",
            "Eval IoU : 0.80\n",
            "Eval IoU : 0.85\n",
            "Eval IoU : 0.90\n",
            "Eval IoU : 0.95\n",
            "--------------------------------------------------------------\n",
            "map_5095: 0.6209894810826481\n",
            "map_50: 0.9138080417789655\n",
            "--------------------------------------------------------------\n",
            "\u001b[32m2022-03-09 16:58:57\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m314\u001b[0m - \u001b[1m\n",
            "Average forward time: 4.79 ms, Average NMS time: 1.21 ms, Average inference time: 6.00 ms\n",
            "\u001b[0m\n",
            "\u001b[32m2022-03-09 16:58:57\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m323\u001b[0m - \u001b[1mSave weights to ./YOLOX_outputs/yolox_voc_s\u001b[0m\n",
            "\u001b[32m2022-03-09 16:58:58\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m193\u001b[0m - \u001b[1m---> start train epoch16\u001b[0m\n",
            "\u001b[32m2022-03-09 16:59:02\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m255\u001b[0m - \u001b[1mepoch: 16/300, iter: 10/29, mem: 12340Mb, iter_time: 0.477s, data_time: 0.005s, total_loss: 3.5, iou_loss: 1.7, l1_loss: 0.0, conf_loss: 1.2, cls_loss: 0.5, lr: 2.492e-03, size: 608, ETA: 1:41:04\u001b[0m\n",
            "\u001b[32m2022-03-09 16:59:08\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m255\u001b[0m - \u001b[1mepoch: 16/300, iter: 20/29, mem: 12340Mb, iter_time: 0.594s, data_time: 0.005s, total_loss: 3.5, iou_loss: 1.7, l1_loss: 0.0, conf_loss: 1.3, cls_loss: 0.5, lr: 2.491e-03, size: 608, ETA: 1:40:31\u001b[0m\n",
            "\u001b[32m2022-03-09 16:59:14\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m323\u001b[0m - \u001b[1mSave weights to ./YOLOX_outputs/yolox_voc_s\u001b[0m\n",
            "100%|##########| 2/2 [00:01<00:00,  1.05it/s]\n",
            "\u001b[32m2022-03-09 16:59:17\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.evaluators.voc_evaluator\u001b[0m:\u001b[36m161\u001b[0m - \u001b[1mEvaluate in main process...\u001b[0m\n",
            "Writing rbc VOC results file\n",
            "Writing wbc VOC results file\n",
            "Writing platelets VOC results file\n",
            "Eval IoU : 0.50\n",
            "AP for rbc = 0.8126\n",
            "AP for wbc = 0.9933\n",
            "AP for platelets = 0.9697\n",
            "Mean AP = 0.9252\n",
            "~~~~~~~~\n",
            "Results:\n",
            "0.813\n",
            "0.993\n",
            "0.970\n",
            "0.925\n",
            "~~~~~~~~\n",
            "\n",
            "--------------------------------------------------------------\n",
            "Results computed with the **unofficial** Python eval code.\n",
            "Results should be very close to the official MATLAB eval code.\n",
            "Recompute with `./tools/reval.py --matlab ...` for your paper.\n",
            "-- Thanks, The Management\n",
            "--------------------------------------------------------------\n",
            "Eval IoU : 0.55\n",
            "Eval IoU : 0.60\n",
            "Eval IoU : 0.65\n",
            "Eval IoU : 0.70\n",
            "Eval IoU : 0.75\n",
            "Eval IoU : 0.80\n",
            "Eval IoU : 0.85\n",
            "Eval IoU : 0.90\n",
            "Eval IoU : 0.95\n",
            "--------------------------------------------------------------\n",
            "map_5095: 0.6326002772629524\n",
            "map_50: 0.9251622451214976\n",
            "--------------------------------------------------------------\n",
            "\u001b[32m2022-03-09 16:59:18\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m314\u001b[0m - \u001b[1m\n",
            "Average forward time: 6.64 ms, Average NMS time: 1.33 ms, Average inference time: 7.97 ms\n",
            "\u001b[0m\n",
            "\u001b[32m2022-03-09 16:59:18\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m323\u001b[0m - \u001b[1mSave weights to ./YOLOX_outputs/yolox_voc_s\u001b[0m\n",
            "\u001b[32m2022-03-09 16:59:18\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m193\u001b[0m - \u001b[1m---> start train epoch17\u001b[0m\n",
            "\u001b[32m2022-03-09 16:59:23\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m255\u001b[0m - \u001b[1mepoch: 17/300, iter: 10/29, mem: 12340Mb, iter_time: 0.562s, data_time: 0.006s, total_loss: 3.5, iou_loss: 1.7, l1_loss: 0.0, conf_loss: 1.3, cls_loss: 0.5, lr: 2.490e-03, size: 480, ETA: 1:39:39\u001b[0m\n",
            "\u001b[32m2022-03-09 16:59:29\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m255\u001b[0m - \u001b[1mepoch: 17/300, iter: 20/29, mem: 12340Mb, iter_time: 0.585s, data_time: 0.005s, total_loss: 3.4, iou_loss: 1.7, l1_loss: 0.0, conf_loss: 1.2, cls_loss: 0.5, lr: 2.490e-03, size: 800, ETA: 1:39:08\u001b[0m\n",
            "\u001b[32m2022-03-09 16:59:36\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m323\u001b[0m - \u001b[1mSave weights to ./YOLOX_outputs/yolox_voc_s\u001b[0m\n",
            "100%|##########| 2/2 [00:02<00:00,  1.08s/it]\n",
            "\u001b[32m2022-03-09 16:59:38\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.evaluators.voc_evaluator\u001b[0m:\u001b[36m161\u001b[0m - \u001b[1mEvaluate in main process...\u001b[0m\n",
            "Writing rbc VOC results file\n",
            "Writing wbc VOC results file\n",
            "Writing platelets VOC results file\n",
            "Eval IoU : 0.50\n",
            "AP for rbc = 0.7829\n",
            "AP for wbc = 0.9899\n",
            "AP for platelets = 0.9583\n",
            "Mean AP = 0.9104\n",
            "~~~~~~~~\n",
            "Results:\n",
            "0.783\n",
            "0.990\n",
            "0.958\n",
            "0.910\n",
            "~~~~~~~~\n",
            "\n",
            "--------------------------------------------------------------\n",
            "Results computed with the **unofficial** Python eval code.\n",
            "Results should be very close to the official MATLAB eval code.\n",
            "Recompute with `./tools/reval.py --matlab ...` for your paper.\n",
            "-- Thanks, The Management\n",
            "--------------------------------------------------------------\n",
            "Eval IoU : 0.55\n",
            "Eval IoU : 0.60\n",
            "Eval IoU : 0.65\n",
            "Eval IoU : 0.70\n",
            "Eval IoU : 0.75\n",
            "Eval IoU : 0.80\n",
            "Eval IoU : 0.85\n",
            "Eval IoU : 0.90\n",
            "Eval IoU : 0.95\n",
            "--------------------------------------------------------------\n",
            "map_5095: 0.5957675847332964\n",
            "map_50: 0.9103796309123132\n",
            "--------------------------------------------------------------\n",
            "\u001b[32m2022-03-09 16:59:40\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m314\u001b[0m - \u001b[1m\n",
            "Average forward time: 7.26 ms, Average NMS time: 7.08 ms, Average inference time: 14.34 ms\n",
            "\u001b[0m\n",
            "\u001b[32m2022-03-09 16:59:40\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m323\u001b[0m - \u001b[1mSave weights to ./YOLOX_outputs/yolox_voc_s\u001b[0m\n",
            "\u001b[32m2022-03-09 16:59:40\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m193\u001b[0m - \u001b[1m---> start train epoch18\u001b[0m\n",
            "\u001b[32m2022-03-09 16:59:47\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m255\u001b[0m - \u001b[1mepoch: 18/300, iter: 10/29, mem: 12340Mb, iter_time: 0.767s, data_time: 0.007s, total_loss: 3.8, iou_loss: 1.7, l1_loss: 0.0, conf_loss: 1.6, cls_loss: 0.5, lr: 2.489e-03, size: 544, ETA: 1:38:56\u001b[0m\n",
            "\u001b[32m2022-03-09 16:59:53\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m255\u001b[0m - \u001b[1mepoch: 18/300, iter: 20/29, mem: 12340Mb, iter_time: 0.592s, data_time: 0.009s, total_loss: 3.5, iou_loss: 1.7, l1_loss: 0.0, conf_loss: 1.3, cls_loss: 0.5, lr: 2.488e-03, size: 480, ETA: 1:38:27\u001b[0m\n",
            "\u001b[32m2022-03-09 16:59:59\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m323\u001b[0m - \u001b[1mSave weights to ./YOLOX_outputs/yolox_voc_s\u001b[0m\n",
            "100%|##########| 2/2 [00:01<00:00,  1.26it/s]\n",
            "\u001b[32m2022-03-09 17:00:01\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.evaluators.voc_evaluator\u001b[0m:\u001b[36m161\u001b[0m - \u001b[1mEvaluate in main process...\u001b[0m\n",
            "Writing rbc VOC results file\n",
            "Writing wbc VOC results file\n",
            "Writing platelets VOC results file\n",
            "Eval IoU : 0.50\n",
            "AP for rbc = 0.7849\n",
            "AP for wbc = 0.9933\n",
            "AP for platelets = 0.9053\n",
            "Mean AP = 0.8945\n",
            "~~~~~~~~\n",
            "Results:\n",
            "0.785\n",
            "0.993\n",
            "0.905\n",
            "0.895\n",
            "~~~~~~~~\n",
            "\n",
            "--------------------------------------------------------------\n",
            "Results computed with the **unofficial** Python eval code.\n",
            "Results should be very close to the official MATLAB eval code.\n",
            "Recompute with `./tools/reval.py --matlab ...` for your paper.\n",
            "-- Thanks, The Management\n",
            "--------------------------------------------------------------\n",
            "Eval IoU : 0.55\n",
            "Eval IoU : 0.60\n",
            "Eval IoU : 0.65\n",
            "Eval IoU : 0.70\n",
            "Eval IoU : 0.75\n",
            "Eval IoU : 0.80\n",
            "Eval IoU : 0.85\n",
            "Eval IoU : 0.90\n",
            "Eval IoU : 0.95\n",
            "--------------------------------------------------------------\n",
            "map_5095: 0.6278068227733778\n",
            "map_50: 0.8945012805187208\n",
            "--------------------------------------------------------------\n",
            "\u001b[32m2022-03-09 17:00:01\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m314\u001b[0m - \u001b[1m\n",
            "Average forward time: 4.72 ms, Average NMS time: 1.30 ms, Average inference time: 6.02 ms\n",
            "\u001b[0m\n",
            "\u001b[32m2022-03-09 17:00:01\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m323\u001b[0m - \u001b[1mSave weights to ./YOLOX_outputs/yolox_voc_s\u001b[0m\n",
            "\u001b[32m2022-03-09 17:00:01\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m193\u001b[0m - \u001b[1m---> start train epoch19\u001b[0m\n",
            "\u001b[32m2022-03-09 17:00:07\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m255\u001b[0m - \u001b[1mepoch: 19/300, iter: 10/29, mem: 12340Mb, iter_time: 0.592s, data_time: 0.003s, total_loss: 3.9, iou_loss: 1.7, l1_loss: 0.0, conf_loss: 1.6, cls_loss: 0.5, lr: 2.487e-03, size: 448, ETA: 1:37:32\u001b[0m\n",
            "\u001b[32m2022-03-09 17:00:14\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m255\u001b[0m - \u001b[1mepoch: 19/300, iter: 20/29, mem: 12340Mb, iter_time: 0.686s, data_time: 0.007s, total_loss: 3.9, iou_loss: 1.9, l1_loss: 0.0, conf_loss: 1.6, cls_loss: 0.5, lr: 2.486e-03, size: 544, ETA: 1:37:21\u001b[0m\n",
            "\u001b[32m2022-03-09 17:00:20\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m323\u001b[0m - \u001b[1mSave weights to ./YOLOX_outputs/yolox_voc_s\u001b[0m\n",
            "100%|##########| 2/2 [00:01<00:00,  1.36it/s]\n",
            "\u001b[32m2022-03-09 17:00:22\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.evaluators.voc_evaluator\u001b[0m:\u001b[36m161\u001b[0m - \u001b[1mEvaluate in main process...\u001b[0m\n",
            "Writing rbc VOC results file\n",
            "Writing wbc VOC results file\n",
            "Writing platelets VOC results file\n",
            "Eval IoU : 0.50\n",
            "AP for rbc = 0.7890\n",
            "AP for wbc = 1.0000\n",
            "AP for platelets = 0.8898\n",
            "Mean AP = 0.8929\n",
            "~~~~~~~~\n",
            "Results:\n",
            "0.789\n",
            "1.000\n",
            "0.890\n",
            "0.893\n",
            "~~~~~~~~\n",
            "\n",
            "--------------------------------------------------------------\n",
            "Results computed with the **unofficial** Python eval code.\n",
            "Results should be very close to the official MATLAB eval code.\n",
            "Recompute with `./tools/reval.py --matlab ...` for your paper.\n",
            "-- Thanks, The Management\n",
            "--------------------------------------------------------------\n",
            "Eval IoU : 0.55\n",
            "Eval IoU : 0.60\n",
            "Eval IoU : 0.65\n",
            "Eval IoU : 0.70\n",
            "Eval IoU : 0.75\n",
            "Eval IoU : 0.80\n",
            "Eval IoU : 0.85\n",
            "Eval IoU : 0.90\n",
            "Eval IoU : 0.95\n",
            "--------------------------------------------------------------\n",
            "map_5095: 0.5825747189577648\n",
            "map_50: 0.8929177782892198\n",
            "--------------------------------------------------------------\n",
            "\u001b[32m2022-03-09 17:00:22\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m314\u001b[0m - \u001b[1m\n",
            "Average forward time: 6.61 ms, Average NMS time: 0.94 ms, Average inference time: 7.54 ms\n",
            "\u001b[0m\n",
            "\u001b[32m2022-03-09 17:00:22\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m323\u001b[0m - \u001b[1mSave weights to ./YOLOX_outputs/yolox_voc_s\u001b[0m\n",
            "\u001b[32m2022-03-09 17:00:23\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m193\u001b[0m - \u001b[1m---> start train epoch20\u001b[0m\n",
            "\u001b[32m2022-03-09 17:00:28\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m255\u001b[0m - \u001b[1mepoch: 20/300, iter: 10/29, mem: 12340Mb, iter_time: 0.550s, data_time: 0.005s, total_loss: 4.2, iou_loss: 1.9, l1_loss: 0.0, conf_loss: 1.7, cls_loss: 0.6, lr: 2.485e-03, size: 448, ETA: 1:36:28\u001b[0m\n",
            "\u001b[32m2022-03-09 17:00:36\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m255\u001b[0m - \u001b[1mepoch: 20/300, iter: 20/29, mem: 12340Mb, iter_time: 0.766s, data_time: 0.021s, total_loss: 3.9, iou_loss: 1.8, l1_loss: 0.0, conf_loss: 1.6, cls_loss: 0.5, lr: 2.484e-03, size: 576, ETA: 1:36:29\u001b[0m\n",
            "\u001b[32m2022-03-09 17:00:41\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m323\u001b[0m - \u001b[1mSave weights to ./YOLOX_outputs/yolox_voc_s\u001b[0m\n",
            "100%|##########| 2/2 [00:01<00:00,  1.11it/s]\n",
            "\u001b[32m2022-03-09 17:00:43\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.evaluators.voc_evaluator\u001b[0m:\u001b[36m161\u001b[0m - \u001b[1mEvaluate in main process...\u001b[0m\n",
            "Writing rbc VOC results file\n",
            "Writing wbc VOC results file\n",
            "Writing platelets VOC results file\n",
            "Eval IoU : 0.50\n",
            "AP for rbc = 0.8016\n",
            "AP for wbc = 0.9966\n",
            "AP for platelets = 0.9181\n",
            "Mean AP = 0.9055\n",
            "~~~~~~~~\n",
            "Results:\n",
            "0.802\n",
            "0.997\n",
            "0.918\n",
            "0.905\n",
            "~~~~~~~~\n",
            "\n",
            "--------------------------------------------------------------\n",
            "Results computed with the **unofficial** Python eval code.\n",
            "Results should be very close to the official MATLAB eval code.\n",
            "Recompute with `./tools/reval.py --matlab ...` for your paper.\n",
            "-- Thanks, The Management\n",
            "--------------------------------------------------------------\n",
            "Eval IoU : 0.55\n",
            "Eval IoU : 0.60\n",
            "Eval IoU : 0.65\n",
            "Eval IoU : 0.70\n",
            "Eval IoU : 0.75\n",
            "Eval IoU : 0.80\n",
            "Eval IoU : 0.85\n",
            "Eval IoU : 0.90\n",
            "Eval IoU : 0.95\n",
            "--------------------------------------------------------------\n",
            "map_5095: 0.630865402355727\n",
            "map_50: 0.9054627299740141\n",
            "--------------------------------------------------------------\n",
            "\u001b[32m2022-03-09 17:00:44\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m314\u001b[0m - \u001b[1m\n",
            "Average forward time: 6.74 ms, Average NMS time: 0.92 ms, Average inference time: 7.65 ms\n",
            "\u001b[0m\n",
            "\u001b[32m2022-03-09 17:00:44\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m323\u001b[0m - \u001b[1mSave weights to ./YOLOX_outputs/yolox_voc_s\u001b[0m\n",
            "\u001b[32m2022-03-09 17:00:44\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m193\u001b[0m - \u001b[1m---> start train epoch21\u001b[0m\n",
            "\u001b[32m2022-03-09 17:00:49\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m255\u001b[0m - \u001b[1mepoch: 21/300, iter: 10/29, mem: 12340Mb, iter_time: 0.554s, data_time: 0.003s, total_loss: 3.4, iou_loss: 1.7, l1_loss: 0.0, conf_loss: 1.2, cls_loss: 0.5, lr: 2.482e-03, size: 480, ETA: 1:35:35\u001b[0m\n",
            "\u001b[32m2022-03-09 17:00:56\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m255\u001b[0m - \u001b[1mepoch: 21/300, iter: 20/29, mem: 12340Mb, iter_time: 0.626s, data_time: 0.004s, total_loss: 4.2, iou_loss: 1.9, l1_loss: 0.0, conf_loss: 1.8, cls_loss: 0.5, lr: 2.482e-03, size: 832, ETA: 1:35:17\u001b[0m\n",
            "\u001b[32m2022-03-09 17:01:04\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m323\u001b[0m - \u001b[1mSave weights to ./YOLOX_outputs/yolox_voc_s\u001b[0m\n",
            "100%|##########| 2/2 [00:02<00:00,  1.03s/it]\n",
            "\u001b[32m2022-03-09 17:01:06\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.evaluators.voc_evaluator\u001b[0m:\u001b[36m161\u001b[0m - \u001b[1mEvaluate in main process...\u001b[0m\n",
            "Writing rbc VOC results file\n",
            "Writing wbc VOC results file\n",
            "Writing platelets VOC results file\n",
            "Eval IoU : 0.50\n",
            "AP for rbc = 0.7463\n",
            "AP for wbc = 0.9966\n",
            "AP for platelets = 0.8779\n",
            "Mean AP = 0.8736\n",
            "~~~~~~~~\n",
            "Results:\n",
            "0.746\n",
            "0.997\n",
            "0.878\n",
            "0.874\n",
            "~~~~~~~~\n",
            "\n",
            "--------------------------------------------------------------\n",
            "Results computed with the **unofficial** Python eval code.\n",
            "Results should be very close to the official MATLAB eval code.\n",
            "Recompute with `./tools/reval.py --matlab ...` for your paper.\n",
            "-- Thanks, The Management\n",
            "--------------------------------------------------------------\n",
            "Eval IoU : 0.55\n",
            "Eval IoU : 0.60\n",
            "Eval IoU : 0.65\n",
            "Eval IoU : 0.70\n",
            "Eval IoU : 0.75\n",
            "Eval IoU : 0.80\n",
            "Eval IoU : 0.85\n",
            "Eval IoU : 0.90\n",
            "Eval IoU : 0.95\n",
            "--------------------------------------------------------------\n",
            "map_5095: 0.5738467751884626\n",
            "map_50: 0.8736254518609222\n",
            "--------------------------------------------------------------\n",
            "\u001b[32m2022-03-09 17:01:07\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m314\u001b[0m - \u001b[1m\n",
            "Average forward time: 7.45 ms, Average NMS time: 1.13 ms, Average inference time: 8.59 ms\n",
            "\u001b[0m\n",
            "\u001b[32m2022-03-09 17:01:07\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m323\u001b[0m - \u001b[1mSave weights to ./YOLOX_outputs/yolox_voc_s\u001b[0m\n",
            "\u001b[32m2022-03-09 17:01:07\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m193\u001b[0m - \u001b[1m---> start train epoch22\u001b[0m\n",
            "\u001b[32m2022-03-09 17:01:14\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m255\u001b[0m - \u001b[1mepoch: 22/300, iter: 10/29, mem: 12340Mb, iter_time: 0.710s, data_time: 0.004s, total_loss: 3.2, iou_loss: 1.6, l1_loss: 0.0, conf_loss: 1.2, cls_loss: 0.5, lr: 2.480e-03, size: 736, ETA: 1:35:25\u001b[0m\n",
            "\u001b[32m2022-03-09 17:01:21\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m255\u001b[0m - \u001b[1mepoch: 22/300, iter: 20/29, mem: 12340Mb, iter_time: 0.704s, data_time: 0.004s, total_loss: 3.5, iou_loss: 1.7, l1_loss: 0.0, conf_loss: 1.3, cls_loss: 0.5, lr: 2.479e-03, size: 480, ETA: 1:35:18\u001b[0m\n",
            "\u001b[32m2022-03-09 17:01:27\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m323\u001b[0m - \u001b[1mSave weights to ./YOLOX_outputs/yolox_voc_s\u001b[0m\n",
            "100%|##########| 2/2 [00:01<00:00,  1.52it/s]\n",
            "\u001b[32m2022-03-09 17:01:29\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.evaluators.voc_evaluator\u001b[0m:\u001b[36m161\u001b[0m - \u001b[1mEvaluate in main process...\u001b[0m\n",
            "Writing rbc VOC results file\n",
            "Writing wbc VOC results file\n",
            "Writing platelets VOC results file\n",
            "Eval IoU : 0.50\n",
            "AP for rbc = 0.8064\n",
            "AP for wbc = 0.9933\n",
            "AP for platelets = 0.9340\n",
            "Mean AP = 0.9112\n",
            "~~~~~~~~\n",
            "Results:\n",
            "0.806\n",
            "0.993\n",
            "0.934\n",
            "0.911\n",
            "~~~~~~~~\n",
            "\n",
            "--------------------------------------------------------------\n",
            "Results computed with the **unofficial** Python eval code.\n",
            "Results should be very close to the official MATLAB eval code.\n",
            "Recompute with `./tools/reval.py --matlab ...` for your paper.\n",
            "-- Thanks, The Management\n",
            "--------------------------------------------------------------\n",
            "Eval IoU : 0.55\n",
            "Eval IoU : 0.60\n",
            "Eval IoU : 0.65\n",
            "Eval IoU : 0.70\n",
            "Eval IoU : 0.75\n",
            "Eval IoU : 0.80\n",
            "Eval IoU : 0.85\n",
            "Eval IoU : 0.90\n",
            "Eval IoU : 0.95\n",
            "--------------------------------------------------------------\n",
            "map_5095: 0.6301407506292727\n",
            "map_50: 0.9112309765760077\n",
            "--------------------------------------------------------------\n",
            "\u001b[32m2022-03-09 17:01:29\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m314\u001b[0m - \u001b[1m\n",
            "Average forward time: 4.68 ms, Average NMS time: 0.89 ms, Average inference time: 5.57 ms\n",
            "\u001b[0m\n",
            "\u001b[32m2022-03-09 17:01:29\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m323\u001b[0m - \u001b[1mSave weights to ./YOLOX_outputs/yolox_voc_s\u001b[0m\n",
            "\u001b[32m2022-03-09 17:01:30\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m193\u001b[0m - \u001b[1m---> start train epoch23\u001b[0m\n",
            "\u001b[32m2022-03-09 17:01:35\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m255\u001b[0m - \u001b[1mepoch: 23/300, iter: 10/29, mem: 12340Mb, iter_time: 0.573s, data_time: 0.003s, total_loss: 3.5, iou_loss: 1.7, l1_loss: 0.0, conf_loss: 1.3, cls_loss: 0.5, lr: 2.478e-03, size: 832, ETA: 1:34:35\u001b[0m\n",
            "\u001b[32m2022-03-09 17:01:44\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m255\u001b[0m - \u001b[1mepoch: 23/300, iter: 20/29, mem: 12340Mb, iter_time: 0.837s, data_time: 0.002s, total_loss: 3.6, iou_loss: 1.7, l1_loss: 0.0, conf_loss: 1.4, cls_loss: 0.5, lr: 2.477e-03, size: 736, ETA: 1:34:44\u001b[0m\n",
            "\u001b[32m2022-03-09 17:01:51\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m323\u001b[0m - \u001b[1mSave weights to ./YOLOX_outputs/yolox_voc_s\u001b[0m\n",
            "100%|##########| 2/2 [00:01<00:00,  1.05it/s]\n",
            "\u001b[32m2022-03-09 17:01:53\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.evaluators.voc_evaluator\u001b[0m:\u001b[36m161\u001b[0m - \u001b[1mEvaluate in main process...\u001b[0m\n",
            "Writing rbc VOC results file\n",
            "Writing wbc VOC results file\n",
            "Writing platelets VOC results file\n",
            "Eval IoU : 0.50\n",
            "AP for rbc = 0.8017\n",
            "AP for wbc = 0.9933\n",
            "AP for platelets = 0.9481\n",
            "Mean AP = 0.9144\n",
            "~~~~~~~~\n",
            "Results:\n",
            "0.802\n",
            "0.993\n",
            "0.948\n",
            "0.914\n",
            "~~~~~~~~\n",
            "\n",
            "--------------------------------------------------------------\n",
            "Results computed with the **unofficial** Python eval code.\n",
            "Results should be very close to the official MATLAB eval code.\n",
            "Recompute with `./tools/reval.py --matlab ...` for your paper.\n",
            "-- Thanks, The Management\n",
            "--------------------------------------------------------------\n",
            "Eval IoU : 0.55\n",
            "Eval IoU : 0.60\n",
            "Eval IoU : 0.65\n",
            "Eval IoU : 0.70\n",
            "Eval IoU : 0.75\n",
            "Eval IoU : 0.80\n",
            "Eval IoU : 0.85\n",
            "Eval IoU : 0.90\n",
            "Eval IoU : 0.95\n",
            "--------------------------------------------------------------\n",
            "map_5095: 0.6192026003356992\n",
            "map_50: 0.914367650108621\n",
            "--------------------------------------------------------------\n",
            "\u001b[32m2022-03-09 17:01:54\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m314\u001b[0m - \u001b[1m\n",
            "Average forward time: 6.75 ms, Average NMS time: 3.29 ms, Average inference time: 10.04 ms\n",
            "\u001b[0m\n",
            "\u001b[32m2022-03-09 17:01:54\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m323\u001b[0m - \u001b[1mSave weights to ./YOLOX_outputs/yolox_voc_s\u001b[0m\n",
            "\u001b[32m2022-03-09 17:01:54\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m193\u001b[0m - \u001b[1m---> start train epoch24\u001b[0m\n",
            "\u001b[32m2022-03-09 17:02:00\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m255\u001b[0m - \u001b[1mepoch: 24/300, iter: 10/29, mem: 12340Mb, iter_time: 0.611s, data_time: 0.004s, total_loss: 3.4, iou_loss: 1.6, l1_loss: 0.0, conf_loss: 1.3, cls_loss: 0.5, lr: 2.475e-03, size: 544, ETA: 1:34:27\u001b[0m\n",
            "\u001b[32m2022-03-09 17:02:06\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m255\u001b[0m - \u001b[1mepoch: 24/300, iter: 20/29, mem: 12340Mb, iter_time: 0.599s, data_time: 0.005s, total_loss: 3.3, iou_loss: 1.6, l1_loss: 0.0, conf_loss: 1.2, cls_loss: 0.5, lr: 2.474e-03, size: 640, ETA: 1:34:07\u001b[0m\n",
            "\u001b[32m2022-03-09 17:02:13\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m323\u001b[0m - \u001b[1mSave weights to ./YOLOX_outputs/yolox_voc_s\u001b[0m\n",
            "100%|##########| 2/2 [00:01<00:00,  1.48it/s]\n",
            "\u001b[32m2022-03-09 17:02:14\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.evaluators.voc_evaluator\u001b[0m:\u001b[36m161\u001b[0m - \u001b[1mEvaluate in main process...\u001b[0m\n",
            "Writing rbc VOC results file\n",
            "Writing wbc VOC results file\n",
            "Writing platelets VOC results file\n",
            "Eval IoU : 0.50\n",
            "AP for rbc = 0.8070\n",
            "AP for wbc = 0.9899\n",
            "AP for platelets = 0.9536\n",
            "Mean AP = 0.9168\n",
            "~~~~~~~~\n",
            "Results:\n",
            "0.807\n",
            "0.990\n",
            "0.954\n",
            "0.917\n",
            "~~~~~~~~\n",
            "\n",
            "--------------------------------------------------------------\n",
            "Results computed with the **unofficial** Python eval code.\n",
            "Results should be very close to the official MATLAB eval code.\n",
            "Recompute with `./tools/reval.py --matlab ...` for your paper.\n",
            "-- Thanks, The Management\n",
            "--------------------------------------------------------------\n",
            "Eval IoU : 0.55\n",
            "Eval IoU : 0.60\n",
            "Eval IoU : 0.65\n",
            "Eval IoU : 0.70\n",
            "Eval IoU : 0.75\n",
            "Eval IoU : 0.80\n",
            "Eval IoU : 0.85\n",
            "Eval IoU : 0.90\n",
            "Eval IoU : 0.95\n",
            "--------------------------------------------------------------\n",
            "map_5095: 0.6135562360023308\n",
            "map_50: 0.9168351543100863\n",
            "--------------------------------------------------------------\n",
            "\u001b[32m2022-03-09 17:02:15\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m314\u001b[0m - \u001b[1m\n",
            "Average forward time: 4.67 ms, Average NMS time: 0.87 ms, Average inference time: 5.54 ms\n",
            "\u001b[0m\n",
            "\u001b[32m2022-03-09 17:02:15\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m323\u001b[0m - \u001b[1mSave weights to ./YOLOX_outputs/yolox_voc_s\u001b[0m\n",
            "\u001b[32m2022-03-09 17:02:15\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m193\u001b[0m - \u001b[1m---> start train epoch25\u001b[0m\n",
            "\u001b[32m2022-03-09 17:02:21\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m255\u001b[0m - \u001b[1mepoch: 25/300, iter: 10/29, mem: 12340Mb, iter_time: 0.563s, data_time: 0.005s, total_loss: 3.3, iou_loss: 1.7, l1_loss: 0.0, conf_loss: 1.1, cls_loss: 0.5, lr: 2.472e-03, size: 544, ETA: 1:33:36\u001b[0m\n",
            "\u001b[32m2022-03-09 17:02:27\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m255\u001b[0m - \u001b[1mepoch: 25/300, iter: 20/29, mem: 12340Mb, iter_time: 0.606s, data_time: 0.007s, total_loss: 3.0, iou_loss: 1.5, l1_loss: 0.0, conf_loss: 1.0, cls_loss: 0.5, lr: 2.471e-03, size: 672, ETA: 1:33:18\u001b[0m\n",
            "\u001b[32m2022-03-09 17:02:33\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m323\u001b[0m - \u001b[1mSave weights to ./YOLOX_outputs/yolox_voc_s\u001b[0m\n",
            "100%|##########| 2/2 [00:02<00:00,  1.01s/it]\n",
            "\u001b[32m2022-03-09 17:02:35\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.evaluators.voc_evaluator\u001b[0m:\u001b[36m161\u001b[0m - \u001b[1mEvaluate in main process...\u001b[0m\n",
            "Writing rbc VOC results file\n",
            "Writing wbc VOC results file\n",
            "Writing platelets VOC results file\n",
            "Eval IoU : 0.50\n",
            "AP for rbc = 0.8088\n",
            "AP for wbc = 1.0000\n",
            "AP for platelets = 0.9617\n",
            "Mean AP = 0.9235\n",
            "~~~~~~~~\n",
            "Results:\n",
            "0.809\n",
            "1.000\n",
            "0.962\n",
            "0.924\n",
            "~~~~~~~~\n",
            "\n",
            "--------------------------------------------------------------\n",
            "Results computed with the **unofficial** Python eval code.\n",
            "Results should be very close to the official MATLAB eval code.\n",
            "Recompute with `./tools/reval.py --matlab ...` for your paper.\n",
            "-- Thanks, The Management\n",
            "--------------------------------------------------------------\n",
            "Eval IoU : 0.55\n",
            "Eval IoU : 0.60\n",
            "Eval IoU : 0.65\n",
            "Eval IoU : 0.70\n",
            "Eval IoU : 0.75\n",
            "Eval IoU : 0.80\n",
            "Eval IoU : 0.85\n",
            "Eval IoU : 0.90\n",
            "Eval IoU : 0.95\n",
            "--------------------------------------------------------------\n",
            "map_5095: 0.6423001449038932\n",
            "map_50: 0.9235199280679208\n",
            "--------------------------------------------------------------\n",
            "\u001b[32m2022-03-09 17:02:36\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m314\u001b[0m - \u001b[1m\n",
            "Average forward time: 6.80 ms, Average NMS time: 1.28 ms, Average inference time: 8.08 ms\n",
            "\u001b[0m\n",
            "\u001b[32m2022-03-09 17:02:36\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m323\u001b[0m - \u001b[1mSave weights to ./YOLOX_outputs/yolox_voc_s\u001b[0m\n",
            "\u001b[32m2022-03-09 17:02:37\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m193\u001b[0m - \u001b[1m---> start train epoch26\u001b[0m\n",
            "\u001b[32m2022-03-09 17:02:44\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m255\u001b[0m - \u001b[1mepoch: 26/300, iter: 10/29, mem: 12340Mb, iter_time: 0.772s, data_time: 0.007s, total_loss: 3.5, iou_loss: 1.7, l1_loss: 0.0, conf_loss: 1.3, cls_loss: 0.5, lr: 2.469e-03, size: 736, ETA: 1:33:10\u001b[0m\n",
            "\u001b[32m2022-03-09 17:02:52\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m255\u001b[0m - \u001b[1mepoch: 26/300, iter: 20/29, mem: 12340Mb, iter_time: 0.802s, data_time: 0.004s, total_loss: 3.7, iou_loss: 1.8, l1_loss: 0.0, conf_loss: 1.4, cls_loss: 0.5, lr: 2.468e-03, size: 736, ETA: 1:33:14\u001b[0m\n",
            "\u001b[32m2022-03-09 17:02:59\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m323\u001b[0m - \u001b[1mSave weights to ./YOLOX_outputs/yolox_voc_s\u001b[0m\n",
            "100%|##########| 2/2 [00:01<00:00,  1.21it/s]\n",
            "\u001b[32m2022-03-09 17:03:01\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.evaluators.voc_evaluator\u001b[0m:\u001b[36m161\u001b[0m - \u001b[1mEvaluate in main process...\u001b[0m\n",
            "Writing rbc VOC results file\n",
            "Writing wbc VOC results file\n",
            "Writing platelets VOC results file\n",
            "Eval IoU : 0.50\n",
            "AP for rbc = 0.8168\n",
            "AP for wbc = 0.9764\n",
            "AP for platelets = 0.9685\n",
            "Mean AP = 0.9206\n",
            "~~~~~~~~\n",
            "Results:\n",
            "0.817\n",
            "0.976\n",
            "0.969\n",
            "0.921\n",
            "~~~~~~~~\n",
            "\n",
            "--------------------------------------------------------------\n",
            "Results computed with the **unofficial** Python eval code.\n",
            "Results should be very close to the official MATLAB eval code.\n",
            "Recompute with `./tools/reval.py --matlab ...` for your paper.\n",
            "-- Thanks, The Management\n",
            "--------------------------------------------------------------\n",
            "Eval IoU : 0.55\n",
            "Eval IoU : 0.60\n",
            "Eval IoU : 0.65\n",
            "Eval IoU : 0.70\n",
            "Eval IoU : 0.75\n",
            "Eval IoU : 0.80\n",
            "Eval IoU : 0.85\n",
            "Eval IoU : 0.90\n",
            "Eval IoU : 0.95\n",
            "--------------------------------------------------------------\n",
            "map_5095: 0.6210978255548025\n",
            "map_50: 0.9205893024021362\n",
            "--------------------------------------------------------------\n",
            "\u001b[32m2022-03-09 17:03:02\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m314\u001b[0m - \u001b[1m\n",
            "Average forward time: 6.92 ms, Average NMS time: 1.08 ms, Average inference time: 8.00 ms\n",
            "\u001b[0m\n",
            "\u001b[32m2022-03-09 17:03:02\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m323\u001b[0m - \u001b[1mSave weights to ./YOLOX_outputs/yolox_voc_s\u001b[0m\n",
            "\u001b[32m2022-03-09 17:03:02\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m193\u001b[0m - \u001b[1m---> start train epoch27\u001b[0m\n",
            "\u001b[32m2022-03-09 17:03:09\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m255\u001b[0m - \u001b[1mepoch: 27/300, iter: 10/29, mem: 12340Mb, iter_time: 0.687s, data_time: 0.009s, total_loss: 3.3, iou_loss: 1.6, l1_loss: 0.0, conf_loss: 1.1, cls_loss: 0.5, lr: 2.466e-03, size: 800, ETA: 1:33:04\u001b[0m\n",
            "\u001b[32m2022-03-09 17:03:17\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m255\u001b[0m - \u001b[1mepoch: 27/300, iter: 20/29, mem: 12340Mb, iter_time: 0.755s, data_time: 0.004s, total_loss: 3.4, iou_loss: 1.7, l1_loss: 0.0, conf_loss: 1.3, cls_loss: 0.5, lr: 2.465e-03, size: 800, ETA: 1:33:02\u001b[0m\n",
            "\u001b[32m2022-03-09 17:03:24\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m323\u001b[0m - \u001b[1mSave weights to ./YOLOX_outputs/yolox_voc_s\u001b[0m\n",
            "100%|##########| 2/2 [00:01<00:00,  1.18it/s]\n",
            "\u001b[32m2022-03-09 17:03:27\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.evaluators.voc_evaluator\u001b[0m:\u001b[36m161\u001b[0m - \u001b[1mEvaluate in main process...\u001b[0m\n",
            "Writing rbc VOC results file\n",
            "Writing wbc VOC results file\n",
            "Writing platelets VOC results file\n",
            "Eval IoU : 0.50\n",
            "AP for rbc = 0.8186\n",
            "AP for wbc = 0.9865\n",
            "AP for platelets = 0.8800\n",
            "Mean AP = 0.8951\n",
            "~~~~~~~~\n",
            "Results:\n",
            "0.819\n",
            "0.987\n",
            "0.880\n",
            "0.895\n",
            "~~~~~~~~\n",
            "\n",
            "--------------------------------------------------------------\n",
            "Results computed with the **unofficial** Python eval code.\n",
            "Results should be very close to the official MATLAB eval code.\n",
            "Recompute with `./tools/reval.py --matlab ...` for your paper.\n",
            "-- Thanks, The Management\n",
            "--------------------------------------------------------------\n",
            "Eval IoU : 0.55\n",
            "Eval IoU : 0.60\n",
            "Eval IoU : 0.65\n",
            "Eval IoU : 0.70\n",
            "Eval IoU : 0.75\n",
            "Eval IoU : 0.80\n",
            "Eval IoU : 0.85\n",
            "Eval IoU : 0.90\n",
            "Eval IoU : 0.95\n",
            "--------------------------------------------------------------\n",
            "map_5095: 0.6171246941978514\n",
            "map_50: 0.8950526686023318\n",
            "--------------------------------------------------------------\n",
            "\u001b[32m2022-03-09 17:03:27\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m314\u001b[0m - \u001b[1m\n",
            "Average forward time: 6.80 ms, Average NMS time: 1.18 ms, Average inference time: 7.98 ms\n",
            "\u001b[0m\n",
            "\u001b[32m2022-03-09 17:03:27\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m323\u001b[0m - \u001b[1mSave weights to ./YOLOX_outputs/yolox_voc_s\u001b[0m\n",
            "\u001b[32m2022-03-09 17:03:28\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m193\u001b[0m - \u001b[1m---> start train epoch28\u001b[0m\n",
            "\u001b[32m2022-03-09 17:03:36\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m255\u001b[0m - \u001b[1mepoch: 28/300, iter: 10/29, mem: 12340Mb, iter_time: 0.807s, data_time: 0.006s, total_loss: 3.5, iou_loss: 1.7, l1_loss: 0.0, conf_loss: 1.4, cls_loss: 0.5, lr: 2.463e-03, size: 736, ETA: 1:33:14\u001b[0m\n",
            "\u001b[32m2022-03-09 17:03:44\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m255\u001b[0m - \u001b[1mepoch: 28/300, iter: 20/29, mem: 12340Mb, iter_time: 0.807s, data_time: 0.003s, total_loss: 3.4, iou_loss: 1.6, l1_loss: 0.0, conf_loss: 1.3, cls_loss: 0.5, lr: 2.462e-03, size: 768, ETA: 1:33:17\u001b[0m\n",
            "\u001b[32m2022-03-09 17:03:51\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m323\u001b[0m - \u001b[1mSave weights to ./YOLOX_outputs/yolox_voc_s\u001b[0m\n",
            "100%|##########| 2/2 [00:01<00:00,  1.22it/s]\n",
            "\u001b[32m2022-03-09 17:03:53\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.evaluators.voc_evaluator\u001b[0m:\u001b[36m161\u001b[0m - \u001b[1mEvaluate in main process...\u001b[0m\n",
            "Writing rbc VOC results file\n",
            "Writing wbc VOC results file\n",
            "Writing platelets VOC results file\n",
            "Eval IoU : 0.50\n",
            "AP for rbc = 0.8220\n",
            "AP for wbc = 0.9933\n",
            "AP for platelets = 0.9559\n",
            "Mean AP = 0.9237\n",
            "~~~~~~~~\n",
            "Results:\n",
            "0.822\n",
            "0.993\n",
            "0.956\n",
            "0.924\n",
            "~~~~~~~~\n",
            "\n",
            "--------------------------------------------------------------\n",
            "Results computed with the **unofficial** Python eval code.\n",
            "Results should be very close to the official MATLAB eval code.\n",
            "Recompute with `./tools/reval.py --matlab ...` for your paper.\n",
            "-- Thanks, The Management\n",
            "--------------------------------------------------------------\n",
            "Eval IoU : 0.55\n",
            "Eval IoU : 0.60\n",
            "Eval IoU : 0.65\n",
            "Eval IoU : 0.70\n",
            "Eval IoU : 0.75\n",
            "Eval IoU : 0.80\n",
            "Eval IoU : 0.85\n",
            "Eval IoU : 0.90\n",
            "Eval IoU : 0.95\n",
            "--------------------------------------------------------------\n",
            "map_5095: 0.645420292902112\n",
            "map_50: 0.9237379191564644\n",
            "--------------------------------------------------------------\n",
            "\u001b[32m2022-03-09 17:03:53\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m314\u001b[0m - \u001b[1m\n",
            "Average forward time: 5.24 ms, Average NMS time: 1.29 ms, Average inference time: 6.52 ms\n",
            "\u001b[0m\n",
            "\u001b[32m2022-03-09 17:03:53\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m323\u001b[0m - \u001b[1mSave weights to ./YOLOX_outputs/yolox_voc_s\u001b[0m\n",
            "\u001b[32m2022-03-09 17:03:54\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m193\u001b[0m - \u001b[1m---> start train epoch29\u001b[0m\n",
            "\u001b[32m2022-03-09 17:04:00\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m255\u001b[0m - \u001b[1mepoch: 29/300, iter: 10/29, mem: 12340Mb, iter_time: 0.582s, data_time: 0.003s, total_loss: 4.1, iou_loss: 1.8, l1_loss: 0.0, conf_loss: 1.7, cls_loss: 0.5, lr: 2.459e-03, size: 640, ETA: 1:32:58\u001b[0m\n",
            "\u001b[32m2022-03-09 17:04:05\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m255\u001b[0m - \u001b[1mepoch: 29/300, iter: 20/29, mem: 12340Mb, iter_time: 0.554s, data_time: 0.004s, total_loss: 3.8, iou_loss: 1.7, l1_loss: 0.0, conf_loss: 1.7, cls_loss: 0.5, lr: 2.458e-03, size: 704, ETA: 1:32:36\u001b[0m\n",
            "\u001b[32m2022-03-09 17:04:11\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m323\u001b[0m - \u001b[1mSave weights to ./YOLOX_outputs/yolox_voc_s\u001b[0m\n",
            "100%|##########| 2/2 [00:02<00:00,  1.10s/it]\n",
            "\u001b[32m2022-03-09 17:04:14\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.evaluators.voc_evaluator\u001b[0m:\u001b[36m161\u001b[0m - \u001b[1mEvaluate in main process...\u001b[0m\n",
            "Writing rbc VOC results file\n",
            "Writing wbc VOC results file\n",
            "Writing platelets VOC results file\n",
            "Eval IoU : 0.50\n",
            "AP for rbc = 0.8072\n",
            "AP for wbc = 0.9764\n",
            "AP for platelets = 0.9597\n",
            "Mean AP = 0.9144\n",
            "~~~~~~~~\n",
            "Results:\n",
            "0.807\n",
            "0.976\n",
            "0.960\n",
            "0.914\n",
            "~~~~~~~~\n",
            "\n",
            "--------------------------------------------------------------\n",
            "Results computed with the **unofficial** Python eval code.\n",
            "Results should be very close to the official MATLAB eval code.\n",
            "Recompute with `./tools/reval.py --matlab ...` for your paper.\n",
            "-- Thanks, The Management\n",
            "--------------------------------------------------------------\n",
            "Eval IoU : 0.55\n",
            "Eval IoU : 0.60\n",
            "Eval IoU : 0.65\n",
            "Eval IoU : 0.70\n",
            "Eval IoU : 0.75\n",
            "Eval IoU : 0.80\n",
            "Eval IoU : 0.85\n",
            "Eval IoU : 0.90\n",
            "Eval IoU : 0.95\n",
            "--------------------------------------------------------------\n",
            "map_5095: 0.5791155052198372\n",
            "map_50: 0.9144474712497243\n",
            "--------------------------------------------------------------\n",
            "\u001b[32m2022-03-09 17:04:15\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m314\u001b[0m - \u001b[1m\n",
            "Average forward time: 7.13 ms, Average NMS time: 2.33 ms, Average inference time: 9.46 ms\n",
            "\u001b[0m\n",
            "\u001b[32m2022-03-09 17:04:15\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m323\u001b[0m - \u001b[1mSave weights to ./YOLOX_outputs/yolox_voc_s\u001b[0m\n",
            "\u001b[32m2022-03-09 17:04:15\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m193\u001b[0m - \u001b[1m---> start train epoch30\u001b[0m\n",
            "\u001b[32m2022-03-09 17:04:21\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m255\u001b[0m - \u001b[1mepoch: 30/300, iter: 10/29, mem: 12340Mb, iter_time: 0.634s, data_time: 0.008s, total_loss: 3.5, iou_loss: 1.7, l1_loss: 0.0, conf_loss: 1.3, cls_loss: 0.5, lr: 2.456e-03, size: 800, ETA: 1:32:15\u001b[0m\n",
            "\u001b[32m2022-03-09 17:04:28\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m255\u001b[0m - \u001b[1mepoch: 30/300, iter: 20/29, mem: 12340Mb, iter_time: 0.711s, data_time: 0.006s, total_loss: 4.6, iou_loss: 2.0, l1_loss: 0.0, conf_loss: 2.1, cls_loss: 0.6, lr: 2.455e-03, size: 608, ETA: 1:32:08\u001b[0m\n",
            "\u001b[32m2022-03-09 17:04:35\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m323\u001b[0m - \u001b[1mSave weights to ./YOLOX_outputs/yolox_voc_s\u001b[0m\n",
            "100%|##########| 2/2 [00:02<00:00,  1.01s/it]\n",
            "\u001b[32m2022-03-09 17:04:38\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.evaluators.voc_evaluator\u001b[0m:\u001b[36m161\u001b[0m - \u001b[1mEvaluate in main process...\u001b[0m\n",
            "Writing rbc VOC results file\n",
            "Writing wbc VOC results file\n",
            "Writing platelets VOC results file\n",
            "Eval IoU : 0.50\n",
            "AP for rbc = 0.8143\n",
            "AP for wbc = 0.9935\n",
            "AP for platelets = 0.9486\n",
            "Mean AP = 0.9188\n",
            "~~~~~~~~\n",
            "Results:\n",
            "0.814\n",
            "0.994\n",
            "0.949\n",
            "0.919\n",
            "~~~~~~~~\n",
            "\n",
            "--------------------------------------------------------------\n",
            "Results computed with the **unofficial** Python eval code.\n",
            "Results should be very close to the official MATLAB eval code.\n",
            "Recompute with `./tools/reval.py --matlab ...` for your paper.\n",
            "-- Thanks, The Management\n",
            "--------------------------------------------------------------\n",
            "Eval IoU : 0.55\n",
            "Eval IoU : 0.60\n",
            "Eval IoU : 0.65\n",
            "Eval IoU : 0.70\n",
            "Eval IoU : 0.75\n",
            "Eval IoU : 0.80\n",
            "Eval IoU : 0.85\n",
            "Eval IoU : 0.90\n",
            "Eval IoU : 0.95\n",
            "--------------------------------------------------------------\n",
            "map_5095: 0.6318647192011239\n",
            "map_50: 0.918803404811562\n",
            "--------------------------------------------------------------\n",
            "\u001b[32m2022-03-09 17:04:38\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m314\u001b[0m - \u001b[1m\n",
            "Average forward time: 6.76 ms, Average NMS time: 1.29 ms, Average inference time: 8.05 ms\n",
            "\u001b[0m\n",
            "\u001b[32m2022-03-09 17:04:38\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m323\u001b[0m - \u001b[1mSave weights to ./YOLOX_outputs/yolox_voc_s\u001b[0m\n",
            "\u001b[32m2022-03-09 17:04:38\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m193\u001b[0m - \u001b[1m---> start train epoch31\u001b[0m\n",
            "\u001b[32m2022-03-09 17:04:45\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m255\u001b[0m - \u001b[1mepoch: 31/300, iter: 10/29, mem: 12340Mb, iter_time: 0.642s, data_time: 0.006s, total_loss: 3.7, iou_loss: 1.7, l1_loss: 0.0, conf_loss: 1.5, cls_loss: 0.5, lr: 2.452e-03, size: 736, ETA: 1:31:53\u001b[0m\n",
            "\u001b[32m2022-03-09 17:04:52\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.core.trainer\u001b[0m:\u001b[36m188\u001b[0m - \u001b[1mTraining of experiment is done and the best AP is 64.54\u001b[0m\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8UjsuFDICVov"
      },
      "source": [
        "# Evaluate the Model"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sE5oWuEOICAF",
        "outputId": "dcdb2911-d73b-4145-c808-2bf21380f013"
      },
      "source": [
        "MODEL_PATH = \"/content/YOLOX/YOLOX_outputs/yolox_voc_s/best_ckpt.pth.tar\"\n",
        "!python3 tools/eval.py -n  yolox-s -c {MODEL_PATH} -b 10 -d 1 --conf 0.001 -f exps/example/yolox_voc/yolox_voc_s.py"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "`fused_weight_gradient_mlp_cuda` module not found. gradient accumulation fusion with weight gradient computation disabled.\n",
            "\u001b[32m2022-03-09 17:06:31\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36m__main__\u001b[0m:\u001b[36m129\u001b[0m - \u001b[1mArgs: Namespace(batch_size=10, ckpt='/content/YOLOX/YOLOX_outputs/yolox_voc_s/best_ckpt.pth.tar', conf=0.001, devices=1, dist_backend='nccl', dist_url=None, exp_file='exps/example/yolox_voc/yolox_voc_s.py', experiment_name='yolox_voc_s', fp16=False, fuse=False, local_rank=0, machine_rank=0, name='yolox-s', nms=None, num_machines=1, opts=[], seed=None, speed=False, test=False, trt=False, tsize=None)\u001b[0m\n",
            "\u001b[32m2022-03-09 17:06:32\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36m__main__\u001b[0m:\u001b[36m139\u001b[0m - \u001b[1mModel Summary: Params: 8.94M, Gflops: 26.64\u001b[0m\n",
            "\u001b[32m2022-03-09 17:06:32\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36m__main__\u001b[0m:\u001b[36m140\u001b[0m - \u001b[1mModel Structure:\n",
            "YOLOX(\n",
            "  (backbone): YOLOPAFPN(\n",
            "    (backbone): CSPDarknet(\n",
            "      (stem): Focus(\n",
            "        (conv): BaseConv(\n",
            "          (conv): Conv2d(12, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "          (bn): BatchNorm2d(32, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "          (act): SiLU(inplace=True)\n",
            "        )\n",
            "      )\n",
            "      (dark2): Sequential(\n",
            "        (0): BaseConv(\n",
            "          (conv): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n",
            "          (bn): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "          (act): SiLU(inplace=True)\n",
            "        )\n",
            "        (1): CSPLayer(\n",
            "          (conv1): BaseConv(\n",
            "            (conv): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
            "            (bn): BatchNorm2d(32, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "            (act): SiLU(inplace=True)\n",
            "          )\n",
            "          (conv2): BaseConv(\n",
            "            (conv): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
            "            (bn): BatchNorm2d(32, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "            (act): SiLU(inplace=True)\n",
            "          )\n",
            "          (conv3): BaseConv(\n",
            "            (conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
            "            (bn): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "            (act): SiLU(inplace=True)\n",
            "          )\n",
            "          (m): Sequential(\n",
            "            (0): Bottleneck(\n",
            "              (conv1): BaseConv(\n",
            "                (conv): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
            "                (bn): BatchNorm2d(32, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "                (act): SiLU(inplace=True)\n",
            "              )\n",
            "              (conv2): BaseConv(\n",
            "                (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "                (bn): BatchNorm2d(32, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "                (act): SiLU(inplace=True)\n",
            "              )\n",
            "            )\n",
            "          )\n",
            "        )\n",
            "      )\n",
            "      (dark3): Sequential(\n",
            "        (0): BaseConv(\n",
            "          (conv): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n",
            "          (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "          (act): SiLU(inplace=True)\n",
            "        )\n",
            "        (1): CSPLayer(\n",
            "          (conv1): BaseConv(\n",
            "            (conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
            "            (bn): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "            (act): SiLU(inplace=True)\n",
            "          )\n",
            "          (conv2): BaseConv(\n",
            "            (conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
            "            (bn): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "            (act): SiLU(inplace=True)\n",
            "          )\n",
            "          (conv3): BaseConv(\n",
            "            (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
            "            (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "            (act): SiLU(inplace=True)\n",
            "          )\n",
            "          (m): Sequential(\n",
            "            (0): Bottleneck(\n",
            "              (conv1): BaseConv(\n",
            "                (conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
            "                (bn): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "                (act): SiLU(inplace=True)\n",
            "              )\n",
            "              (conv2): BaseConv(\n",
            "                (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "                (bn): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "                (act): SiLU(inplace=True)\n",
            "              )\n",
            "            )\n",
            "            (1): Bottleneck(\n",
            "              (conv1): BaseConv(\n",
            "                (conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
            "                (bn): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "                (act): SiLU(inplace=True)\n",
            "              )\n",
            "              (conv2): BaseConv(\n",
            "                (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "                (bn): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "                (act): SiLU(inplace=True)\n",
            "              )\n",
            "            )\n",
            "            (2): Bottleneck(\n",
            "              (conv1): BaseConv(\n",
            "                (conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
            "                (bn): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "                (act): SiLU(inplace=True)\n",
            "              )\n",
            "              (conv2): BaseConv(\n",
            "                (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "                (bn): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "                (act): SiLU(inplace=True)\n",
            "              )\n",
            "            )\n",
            "          )\n",
            "        )\n",
            "      )\n",
            "      (dark4): Sequential(\n",
            "        (0): BaseConv(\n",
            "          (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n",
            "          (bn): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "          (act): SiLU(inplace=True)\n",
            "        )\n",
            "        (1): CSPLayer(\n",
            "          (conv1): BaseConv(\n",
            "            (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
            "            (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "            (act): SiLU(inplace=True)\n",
            "          )\n",
            "          (conv2): BaseConv(\n",
            "            (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
            "            (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "            (act): SiLU(inplace=True)\n",
            "          )\n",
            "          (conv3): BaseConv(\n",
            "            (conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
            "            (bn): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "            (act): SiLU(inplace=True)\n",
            "          )\n",
            "          (m): Sequential(\n",
            "            (0): Bottleneck(\n",
            "              (conv1): BaseConv(\n",
            "                (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
            "                (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "                (act): SiLU(inplace=True)\n",
            "              )\n",
            "              (conv2): BaseConv(\n",
            "                (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "                (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "                (act): SiLU(inplace=True)\n",
            "              )\n",
            "            )\n",
            "            (1): Bottleneck(\n",
            "              (conv1): BaseConv(\n",
            "                (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
            "                (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "                (act): SiLU(inplace=True)\n",
            "              )\n",
            "              (conv2): BaseConv(\n",
            "                (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "                (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "                (act): SiLU(inplace=True)\n",
            "              )\n",
            "            )\n",
            "            (2): Bottleneck(\n",
            "              (conv1): BaseConv(\n",
            "                (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
            "                (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "                (act): SiLU(inplace=True)\n",
            "              )\n",
            "              (conv2): BaseConv(\n",
            "                (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "                (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "                (act): SiLU(inplace=True)\n",
            "              )\n",
            "            )\n",
            "          )\n",
            "        )\n",
            "      )\n",
            "      (dark5): Sequential(\n",
            "        (0): BaseConv(\n",
            "          (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n",
            "          (bn): BatchNorm2d(512, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "          (act): SiLU(inplace=True)\n",
            "        )\n",
            "        (1): SPPBottleneck(\n",
            "          (conv1): BaseConv(\n",
            "            (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
            "            (bn): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "            (act): SiLU(inplace=True)\n",
            "          )\n",
            "          (m): ModuleList(\n",
            "            (0): MaxPool2d(kernel_size=5, stride=1, padding=2, dilation=1, ceil_mode=False)\n",
            "            (1): MaxPool2d(kernel_size=9, stride=1, padding=4, dilation=1, ceil_mode=False)\n",
            "            (2): MaxPool2d(kernel_size=13, stride=1, padding=6, dilation=1, ceil_mode=False)\n",
            "          )\n",
            "          (conv2): BaseConv(\n",
            "            (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
            "            (bn): BatchNorm2d(512, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "            (act): SiLU(inplace=True)\n",
            "          )\n",
            "        )\n",
            "        (2): CSPLayer(\n",
            "          (conv1): BaseConv(\n",
            "            (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
            "            (bn): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "            (act): SiLU(inplace=True)\n",
            "          )\n",
            "          (conv2): BaseConv(\n",
            "            (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
            "            (bn): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "            (act): SiLU(inplace=True)\n",
            "          )\n",
            "          (conv3): BaseConv(\n",
            "            (conv): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
            "            (bn): BatchNorm2d(512, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "            (act): SiLU(inplace=True)\n",
            "          )\n",
            "          (m): Sequential(\n",
            "            (0): Bottleneck(\n",
            "              (conv1): BaseConv(\n",
            "                (conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
            "                (bn): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "                (act): SiLU(inplace=True)\n",
            "              )\n",
            "              (conv2): BaseConv(\n",
            "                (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "                (bn): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "                (act): SiLU(inplace=True)\n",
            "              )\n",
            "            )\n",
            "          )\n",
            "        )\n",
            "      )\n",
            "    )\n",
            "    (upsample): Upsample(scale_factor=2.0, mode=nearest)\n",
            "    (lateral_conv0): BaseConv(\n",
            "      (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
            "      (bn): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "      (act): SiLU(inplace=True)\n",
            "    )\n",
            "    (C3_p4): CSPLayer(\n",
            "      (conv1): BaseConv(\n",
            "        (conv): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
            "        (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "        (act): SiLU(inplace=True)\n",
            "      )\n",
            "      (conv2): BaseConv(\n",
            "        (conv): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
            "        (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "        (act): SiLU(inplace=True)\n",
            "      )\n",
            "      (conv3): BaseConv(\n",
            "        (conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
            "        (bn): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "        (act): SiLU(inplace=True)\n",
            "      )\n",
            "      (m): Sequential(\n",
            "        (0): Bottleneck(\n",
            "          (conv1): BaseConv(\n",
            "            (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
            "            (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "            (act): SiLU(inplace=True)\n",
            "          )\n",
            "          (conv2): BaseConv(\n",
            "            (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "            (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "            (act): SiLU(inplace=True)\n",
            "          )\n",
            "        )\n",
            "      )\n",
            "    )\n",
            "    (reduce_conv1): BaseConv(\n",
            "      (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
            "      (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "      (act): SiLU(inplace=True)\n",
            "    )\n",
            "    (C3_p3): CSPLayer(\n",
            "      (conv1): BaseConv(\n",
            "        (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
            "        (bn): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "        (act): SiLU(inplace=True)\n",
            "      )\n",
            "      (conv2): BaseConv(\n",
            "        (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
            "        (bn): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "        (act): SiLU(inplace=True)\n",
            "      )\n",
            "      (conv3): BaseConv(\n",
            "        (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
            "        (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "        (act): SiLU(inplace=True)\n",
            "      )\n",
            "      (m): Sequential(\n",
            "        (0): Bottleneck(\n",
            "          (conv1): BaseConv(\n",
            "            (conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
            "            (bn): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "            (act): SiLU(inplace=True)\n",
            "          )\n",
            "          (conv2): BaseConv(\n",
            "            (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "            (bn): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "            (act): SiLU(inplace=True)\n",
            "          )\n",
            "        )\n",
            "      )\n",
            "    )\n",
            "    (bu_conv2): BaseConv(\n",
            "      (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n",
            "      (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "      (act): SiLU(inplace=True)\n",
            "    )\n",
            "    (C3_n3): CSPLayer(\n",
            "      (conv1): BaseConv(\n",
            "        (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
            "        (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "        (act): SiLU(inplace=True)\n",
            "      )\n",
            "      (conv2): BaseConv(\n",
            "        (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
            "        (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "        (act): SiLU(inplace=True)\n",
            "      )\n",
            "      (conv3): BaseConv(\n",
            "        (conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
            "        (bn): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "        (act): SiLU(inplace=True)\n",
            "      )\n",
            "      (m): Sequential(\n",
            "        (0): Bottleneck(\n",
            "          (conv1): BaseConv(\n",
            "            (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
            "            (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "            (act): SiLU(inplace=True)\n",
            "          )\n",
            "          (conv2): BaseConv(\n",
            "            (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "            (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "            (act): SiLU(inplace=True)\n",
            "          )\n",
            "        )\n",
            "      )\n",
            "    )\n",
            "    (bu_conv1): BaseConv(\n",
            "      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n",
            "      (bn): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "      (act): SiLU(inplace=True)\n",
            "    )\n",
            "    (C3_n4): CSPLayer(\n",
            "      (conv1): BaseConv(\n",
            "        (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
            "        (bn): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "        (act): SiLU(inplace=True)\n",
            "      )\n",
            "      (conv2): BaseConv(\n",
            "        (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
            "        (bn): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "        (act): SiLU(inplace=True)\n",
            "      )\n",
            "      (conv3): BaseConv(\n",
            "        (conv): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
            "        (bn): BatchNorm2d(512, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "        (act): SiLU(inplace=True)\n",
            "      )\n",
            "      (m): Sequential(\n",
            "        (0): Bottleneck(\n",
            "          (conv1): BaseConv(\n",
            "            (conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
            "            (bn): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "            (act): SiLU(inplace=True)\n",
            "          )\n",
            "          (conv2): BaseConv(\n",
            "            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "            (bn): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "            (act): SiLU(inplace=True)\n",
            "          )\n",
            "        )\n",
            "      )\n",
            "    )\n",
            "  )\n",
            "  (head): YOLOXHead(\n",
            "    (cls_convs): ModuleList(\n",
            "      (0): Sequential(\n",
            "        (0): BaseConv(\n",
            "          (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "          (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "          (act): SiLU(inplace=True)\n",
            "        )\n",
            "        (1): BaseConv(\n",
            "          (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "          (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "          (act): SiLU(inplace=True)\n",
            "        )\n",
            "      )\n",
            "      (1): Sequential(\n",
            "        (0): BaseConv(\n",
            "          (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "          (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "          (act): SiLU(inplace=True)\n",
            "        )\n",
            "        (1): BaseConv(\n",
            "          (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "          (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "          (act): SiLU(inplace=True)\n",
            "        )\n",
            "      )\n",
            "      (2): Sequential(\n",
            "        (0): BaseConv(\n",
            "          (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "          (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "          (act): SiLU(inplace=True)\n",
            "        )\n",
            "        (1): BaseConv(\n",
            "          (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "          (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "          (act): SiLU(inplace=True)\n",
            "        )\n",
            "      )\n",
            "    )\n",
            "    (reg_convs): ModuleList(\n",
            "      (0): Sequential(\n",
            "        (0): BaseConv(\n",
            "          (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "          (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "          (act): SiLU(inplace=True)\n",
            "        )\n",
            "        (1): BaseConv(\n",
            "          (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "          (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "          (act): SiLU(inplace=True)\n",
            "        )\n",
            "      )\n",
            "      (1): Sequential(\n",
            "        (0): BaseConv(\n",
            "          (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "          (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "          (act): SiLU(inplace=True)\n",
            "        )\n",
            "        (1): BaseConv(\n",
            "          (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "          (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "          (act): SiLU(inplace=True)\n",
            "        )\n",
            "      )\n",
            "      (2): Sequential(\n",
            "        (0): BaseConv(\n",
            "          (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "          (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "          (act): SiLU(inplace=True)\n",
            "        )\n",
            "        (1): BaseConv(\n",
            "          (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
            "          (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "          (act): SiLU(inplace=True)\n",
            "        )\n",
            "      )\n",
            "    )\n",
            "    (cls_preds): ModuleList(\n",
            "      (0): Conv2d(128, 3, kernel_size=(1, 1), stride=(1, 1))\n",
            "      (1): Conv2d(128, 3, kernel_size=(1, 1), stride=(1, 1))\n",
            "      (2): Conv2d(128, 3, kernel_size=(1, 1), stride=(1, 1))\n",
            "    )\n",
            "    (reg_preds): ModuleList(\n",
            "      (0): Conv2d(128, 4, kernel_size=(1, 1), stride=(1, 1))\n",
            "      (1): Conv2d(128, 4, kernel_size=(1, 1), stride=(1, 1))\n",
            "      (2): Conv2d(128, 4, kernel_size=(1, 1), stride=(1, 1))\n",
            "    )\n",
            "    (obj_preds): ModuleList(\n",
            "      (0): Conv2d(128, 1, kernel_size=(1, 1), stride=(1, 1))\n",
            "      (1): Conv2d(128, 1, kernel_size=(1, 1), stride=(1, 1))\n",
            "      (2): Conv2d(128, 1, kernel_size=(1, 1), stride=(1, 1))\n",
            "    )\n",
            "    (stems): ModuleList(\n",
            "      (0): BaseConv(\n",
            "        (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
            "        (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "        (act): SiLU(inplace=True)\n",
            "      )\n",
            "      (1): BaseConv(\n",
            "        (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
            "        (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "        (act): SiLU(inplace=True)\n",
            "      )\n",
            "      (2): BaseConv(\n",
            "        (conv): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
            "        (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)\n",
            "        (act): SiLU(inplace=True)\n",
            "      )\n",
            "    )\n",
            "    (l1_loss): L1Loss()\n",
            "    (bcewithlog_loss): BCEWithLogitsLoss()\n",
            "    (iou_loss): IOUloss()\n",
            "  )\n",
            ")\u001b[0m\n",
            "\u001b[32m2022-03-09 17:06:35\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36m__main__\u001b[0m:\u001b[36m153\u001b[0m - \u001b[1mloading checkpoint\u001b[0m\n",
            "\u001b[32m2022-03-09 17:06:35\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36m__main__\u001b[0m:\u001b[36m158\u001b[0m - \u001b[1mloaded checkpoint done.\u001b[0m\n",
            "100%|##########| 3/3 [00:03<00:00,  1.02s/it]\n",
            "\u001b[32m2022-03-09 17:06:38\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36myolox.evaluators.voc_evaluator\u001b[0m:\u001b[36m161\u001b[0m - \u001b[1mEvaluate in main process...\u001b[0m\n",
            "Writing rbc VOC results file\n",
            "Writing wbc VOC results file\n",
            "Writing platelets VOC results file\n",
            "Eval IoU : 0.50\n",
            "AP for rbc = 0.8217\n",
            "AP for wbc = 0.9933\n",
            "AP for platelets = 0.9559\n",
            "Mean AP = 0.9236\n",
            "~~~~~~~~\n",
            "Results:\n",
            "0.822\n",
            "0.993\n",
            "0.956\n",
            "0.924\n",
            "~~~~~~~~\n",
            "\n",
            "--------------------------------------------------------------\n",
            "Results computed with the **unofficial** Python eval code.\n",
            "Results should be very close to the official MATLAB eval code.\n",
            "Recompute with `./tools/reval.py --matlab ...` for your paper.\n",
            "-- Thanks, The Management\n",
            "--------------------------------------------------------------\n",
            "Eval IoU : 0.55\n",
            "Eval IoU : 0.60\n",
            "Eval IoU : 0.65\n",
            "Eval IoU : 0.70\n",
            "Eval IoU : 0.75\n",
            "Eval IoU : 0.80\n",
            "Eval IoU : 0.85\n",
            "Eval IoU : 0.90\n",
            "Eval IoU : 0.95\n",
            "--------------------------------------------------------------\n",
            "map_5095: 0.6464555893386057\n",
            "map_50: 0.9236230379713343\n",
            "--------------------------------------------------------------\n",
            "\u001b[32m2022-03-09 17:06:39\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36m__main__\u001b[0m:\u001b[36m185\u001b[0m - \u001b[1m\n",
            "Average forward time: 78.73 ms, Average NMS time: 0.65 ms, Average inference time: 79.38 ms\n",
            "\u001b[0m\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CnFRJEa7CaPe"
      },
      "source": [
        "# Test the Model\n",
        "Make sure you replace the `TEST_IMAGE_PATH` variable with a test image from your dataset"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uIXoCCwkMjpK",
        "outputId": "22549026-80f0-4465-9c26-c1199dd14be3"
      },
      "source": [
        "TEST_IMAGE_PATH = \"/content/test/BloodImage_00038_jpg.rf.63d04b5c9db95f32fa7669f72e4903ca.jpg\"\n",
        "!python tools/demo.py image -f /content/YOLOX/exps/example/yolox_voc/yolox_voc_s.py -c {MODEL_PATH} --path {TEST_IMAGE_PATH} --conf 0.25 --nms 0.45 --tsize 640 --save_result --device gpu"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[32m2022-03-09 17:10:33.005\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36m__main__\u001b[0m:\u001b[36mmain\u001b[0m:\u001b[36m240\u001b[0m - \u001b[1mArgs: Namespace(camid=0, ckpt='/content/YOLOX/YOLOX_outputs/yolox_voc_s/best_ckpt.pth.tar', conf=0.25, demo='image', device='gpu', exp_file='/content/YOLOX/exps/example/yolox_voc/yolox_voc_s.py', experiment_name='yolox_voc_s', fp16=False, fuse=False, name=None, nms=0.45, path='/content/test/BloodImage_00038_jpg.rf.63d04b5c9db95f32fa7669f72e4903ca.jpg', save_result=True, trt=False, tsize=640)\u001b[0m\n",
            "\u001b[32m2022-03-09 17:10:33.180\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36m__main__\u001b[0m:\u001b[36mmain\u001b[0m:\u001b[36m250\u001b[0m - \u001b[1mModel Summary: Params: 8.94M, Gflops: 26.64\u001b[0m\n",
            "\u001b[32m2022-03-09 17:10:36.752\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36m__main__\u001b[0m:\u001b[36mmain\u001b[0m:\u001b[36m261\u001b[0m - \u001b[1mloading checkpoint\u001b[0m\n",
            "\u001b[32m2022-03-09 17:10:36.843\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36m__main__\u001b[0m:\u001b[36mmain\u001b[0m:\u001b[36m265\u001b[0m - \u001b[1mloaded checkpoint done.\u001b[0m\n",
            "\u001b[32m2022-03-09 17:10:37.224\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36m__main__\u001b[0m:\u001b[36minference\u001b[0m:\u001b[36m151\u001b[0m - \u001b[1mInfer time: 0.3468s\u001b[0m\n",
            "\u001b[32m2022-03-09 17:10:37.233\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36m__main__\u001b[0m:\u001b[36mimage_demo\u001b[0m:\u001b[36m188\u001b[0m - \u001b[1mSaving detection result in ./YOLOX_outputs/yolox_voc_s/vis_res/2022_03_09_17_10_36/BloodImage_00038_jpg.rf.63d04b5c9db95f32fa7669f72e4903ca.jpg\u001b[0m\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "N7nX2nwWCper"
      },
      "source": [
        "# Visualize the Predictions\n",
        "Make sure you replace the `OUTPUT_IMAGE_PATH` with the respective path of the image output. This path can be found somewhere in the `YOLOX_outputs` folder\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "B3_kOK2cZtJK",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 497
        },
        "outputId": "855baf2f-1118-4087-e33c-aa32803d1b74"
      },
      "source": [
        "from PIL import Image\n",
        "OUTPUT_IMAGE_PATH = \"/content/YOLOX/YOLOX_outputs/yolox_voc_s/vis_res/2022_03_09_17_10_36/BloodImage_00038_jpg.rf.63d04b5c9db95f32fa7669f72e4903ca.jpg\" \n",
        "Image.open(OUTPUT_IMAGE_PATH)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=640x480 at 0x7F55C5C0CB50>"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XFbMKDkxPWoD"
      },
      "source": [
        "# Export Trained Weights for Future Inference\n",
        "\n",
        "Now that you have trained your custom detector, you can export the trained weights you have made here for inference on your device elsewhere"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SlZf3KlMPYPS",
        "outputId": "815982e7-6328-4be9-9794-ff5599713881"
      },
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/gdrive')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Mounted at /content/gdrive\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LDrqgjePPaXK"
      },
      "source": [
        "%cp {MODEL_PATH} /content/gdrive/My\\ Drive"
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}